/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50611
Source Host           : localhost:3306
Source Database       : yovim

Target Server Type    : MYSQL
Target Server Version : 50611
File Encoding         : 65001

Date: 2017-05-03 20:47:55
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for yov_friend_link
-- ----------------------------
DROP TABLE IF EXISTS `yov_friend_link`;
CREATE TABLE `yov_friend_link` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `url` varchar(1000) DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `order` int(3) DEFAULT NULL,
  `active` tinyint(1) DEFAULT '1',
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_friend_link
-- ----------------------------
INSERT INTO `yov_friend_link` VALUES ('7', 'BaiDu', 'http://www.baidu.com', ' ', '0', '1', '2014-12-08 23:46:23');
INSERT INTO `yov_friend_link` VALUES ('8', 'CSND', 'http://www.csdn.net/', ' ', '0', '1', '2014-12-08 23:56:50');
INSERT INTO `yov_friend_link` VALUES ('9', 'phpChina', 'http://phpchina.com/', ' ', '0', '1', '2014-12-08 23:57:41');
INSERT INTO `yov_friend_link` VALUES ('10', 'EasyUI', 'http://www.jeasyui.com/', ' ', '0', '1', '2014-12-08 23:59:35');
INSERT INTO `yov_friend_link` VALUES ('11', 'jQuery', 'http://jquery.com/', ' ', '0', '1', '2014-12-09 00:00:04');

-- ----------------------------
-- Table structure for yov_hot_tag
-- ----------------------------
DROP TABLE IF EXISTS `yov_hot_tag`;
CREATE TABLE `yov_hot_tag` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `tag` varchar(100) DEFAULT NULL,
  `count` int(12) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_hot_tag
-- ----------------------------
INSERT INTO `yov_hot_tag` VALUES ('1', '远程登陆', '1');
INSERT INTO `yov_hot_tag` VALUES ('2', 'Root', '1');
INSERT INTO `yov_hot_tag` VALUES ('3', 'SSH', '1');
INSERT INTO `yov_hot_tag` VALUES ('4', 'Linux', '1');
INSERT INTO `yov_hot_tag` VALUES ('5', '部署', '1');
INSERT INTO `yov_hot_tag` VALUES ('6', 'Apache', '3');
INSERT INTO `yov_hot_tag` VALUES ('7', 'memcache', '2');
INSERT INTO `yov_hot_tag` VALUES ('8', 'redis', '1');
INSERT INTO `yov_hot_tag` VALUES ('9', 'mongodb', '1');
INSERT INTO `yov_hot_tag` VALUES ('10', 'Samba', '5');
INSERT INTO `yov_hot_tag` VALUES ('11', 'selinux', '2');

-- ----------------------------
-- Table structure for yov_log
-- ----------------------------
DROP TABLE IF EXISTS `yov_log`;
CREATE TABLE `yov_log` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `controller` varchar(200) DEFAULT NULL,
  `action` varchar(200) DEFAULT NULL,
  `id_user` int(12) DEFAULT NULL,
  `ip` varchar(100) DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL,
  `info` longtext,
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=82 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_log
-- ----------------------------
INSERT INTO `yov_log` VALUES ('31', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 16:48:50');
INSERT INTO `yov_log` VALUES ('32', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 16:51:32');
INSERT INTO `yov_log` VALUES ('33', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 16:54:50');
INSERT INTO `yov_log` VALUES ('34', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 22:35:14');
INSERT INTO `yov_log` VALUES ('35', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 22:39:36');
INSERT INTO `yov_log` VALUES ('36', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 22:39:44');
INSERT INTO `yov_log` VALUES ('37', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 22:41:42');
INSERT INTO `yov_log` VALUES ('38', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 22:41:59');
INSERT INTO `yov_log` VALUES ('39', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 22:43:03');
INSERT INTO `yov_log` VALUES ('40', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 23:10:15');
INSERT INTO `yov_log` VALUES ('41', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 23:22:34');
INSERT INTO `yov_log` VALUES ('42', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 23:27:03');
INSERT INTO `yov_log` VALUES ('43', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-09 23:28:31');
INSERT INTO `yov_log` VALUES ('44', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-10 22:29:49');
INSERT INTO `yov_log` VALUES ('45', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-10 22:33:25');
INSERT INTO `yov_log` VALUES ('46', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-10 22:48:38');
INSERT INTO `yov_log` VALUES ('47', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2014-12-10 22:51:31');
INSERT INTO `yov_log` VALUES ('48', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-08 16:26:03');
INSERT INTO `yov_log` VALUES ('49', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-08 16:32:00');
INSERT INTO `yov_log` VALUES ('50', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-08 16:33:06');
INSERT INTO `yov_log` VALUES ('51', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-09 09:06:07');
INSERT INTO `yov_log` VALUES ('52', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-09 09:07:44');
INSERT INTO `yov_log` VALUES ('53', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-09 09:34:23');
INSERT INTO `yov_log` VALUES ('54', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-09 10:43:21');
INSERT INTO `yov_log` VALUES ('55', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-09 10:43:38');
INSERT INTO `yov_log` VALUES ('56', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-01-09 10:44:06');
INSERT INTO `yov_log` VALUES ('57', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:14:23');
INSERT INTO `yov_log` VALUES ('58', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:14:54');
INSERT INTO `yov_log` VALUES ('59', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:15:08');
INSERT INTO `yov_log` VALUES ('60', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:15:55');
INSERT INTO `yov_log` VALUES ('61', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:16:41');
INSERT INTO `yov_log` VALUES ('62', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:17:33');
INSERT INTO `yov_log` VALUES ('63', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-03-02 13:18:10');
INSERT INTO `yov_log` VALUES ('64', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:37:28');
INSERT INTO `yov_log` VALUES ('65', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:39:45');
INSERT INTO `yov_log` VALUES ('66', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:40:13');
INSERT INTO `yov_log` VALUES ('67', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:40:41');
INSERT INTO `yov_log` VALUES ('68', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:41:11');
INSERT INTO `yov_log` VALUES ('69', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:44:39');
INSERT INTO `yov_log` VALUES ('70', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 14:45:08');
INSERT INTO `yov_log` VALUES ('71', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:12:57');
INSERT INTO `yov_log` VALUES ('72', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:14:45');
INSERT INTO `yov_log` VALUES ('73', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:15:09');
INSERT INTO `yov_log` VALUES ('74', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:17:38');
INSERT INTO `yov_log` VALUES ('75', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:18:24');
INSERT INTO `yov_log` VALUES ('76', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:19:25');
INSERT INTO `yov_log` VALUES ('77', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:20:02');
INSERT INTO `yov_log` VALUES ('78', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-04-16 19:20:43');
INSERT INTO `yov_log` VALUES ('79', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-09-15 16:43:04');
INSERT INTO `yov_log` VALUES ('80', 'admin_source', 'edit', '1', '10.11.110.200', '4', 'Edit source success.', '2015-09-15 16:43:19');
INSERT INTO `yov_log` VALUES ('81', 'Index', 'index', '1', 'On Server', '0', 'Unknown Action', '0000-00-00 00:00:00');

-- ----------------------------
-- Table structure for yov_menu
-- ----------------------------
DROP TABLE IF EXISTS `yov_menu`;
CREATE TABLE `yov_menu` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `url` varchar(1000) DEFAULT NULL,
  `order` int(3) DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `time_add` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_menu
-- ----------------------------

-- ----------------------------
-- Table structure for yov_recommend
-- ----------------------------
DROP TABLE IF EXISTS `yov_recommend`;
CREATE TABLE `yov_recommend` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `id_source` int(12) DEFAULT NULL,
  `id_user` int(12) DEFAULT NULL,
  `comment` varchar(1000) DEFAULT NULL,
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=106 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_recommend
-- ----------------------------
INSERT INTO `yov_recommend` VALUES ('58', '10002', '1', null, '2014-12-08 23:38:52');
INSERT INTO `yov_recommend` VALUES ('59', '10007', '1', null, '2014-12-09 23:13:23');
INSERT INTO `yov_recommend` VALUES ('60', '10008', '1', null, '2014-12-09 23:13:24');
INSERT INTO `yov_recommend` VALUES ('61', '10006', '1', null, '2014-12-09 23:13:25');
INSERT INTO `yov_recommend` VALUES ('62', '10004', '1', null, '2014-12-09 23:13:28');
INSERT INTO `yov_recommend` VALUES ('63', '10004', '1', null, '2014-12-09 23:13:28');
INSERT INTO `yov_recommend` VALUES ('64', '10004', '1', null, '2014-12-09 23:13:29');
INSERT INTO `yov_recommend` VALUES ('65', '10002', '1', null, '2014-12-09 23:13:30');
INSERT INTO `yov_recommend` VALUES ('66', '10002', '1', null, '2014-12-09 23:13:31');
INSERT INTO `yov_recommend` VALUES ('67', '10002', '1', null, '2014-12-09 23:13:31');
INSERT INTO `yov_recommend` VALUES ('68', '10002', '1', null, '2014-12-09 23:13:32');
INSERT INTO `yov_recommend` VALUES ('69', '10002', '1', null, '2014-12-09 23:13:32');
INSERT INTO `yov_recommend` VALUES ('70', '10007', '1', null, '2014-12-09 23:13:35');
INSERT INTO `yov_recommend` VALUES ('71', '10007', '1', null, '2014-12-09 23:13:36');
INSERT INTO `yov_recommend` VALUES ('72', '10008', '1', null, '2014-12-09 23:13:37');
INSERT INTO `yov_recommend` VALUES ('73', '10008', '1', null, '2014-12-09 23:13:38');
INSERT INTO `yov_recommend` VALUES ('74', '10008', '1', null, '2014-12-09 23:13:39');
INSERT INTO `yov_recommend` VALUES ('75', '10008', '1', null, '2014-12-09 23:13:39');
INSERT INTO `yov_recommend` VALUES ('76', '10008', '1', null, '2014-12-09 23:13:39');
INSERT INTO `yov_recommend` VALUES ('77', '10008', '1', null, '2014-12-09 23:13:40');
INSERT INTO `yov_recommend` VALUES ('78', '10006', '1', null, '2014-12-10 22:49:03');
INSERT INTO `yov_recommend` VALUES ('79', '10042', '1', null, '2015-01-09 10:17:43');
INSERT INTO `yov_recommend` VALUES ('80', '10041', '1', null, '2015-01-09 10:17:46');
INSERT INTO `yov_recommend` VALUES ('81', '10027', '1', null, '2015-01-09 16:10:10');
INSERT INTO `yov_recommend` VALUES ('82', '10049', '1', null, '2015-04-16 14:47:28');
INSERT INTO `yov_recommend` VALUES ('83', '10049', '1', null, '2015-04-16 14:47:31');
INSERT INTO `yov_recommend` VALUES ('84', '10048', '1', null, '2015-04-16 14:47:33');
INSERT INTO `yov_recommend` VALUES ('85', '10048', '1', null, '2015-04-16 14:47:34');
INSERT INTO `yov_recommend` VALUES ('86', '10048', '1', null, '2015-04-16 14:47:34');
INSERT INTO `yov_recommend` VALUES ('87', '10048', '1', null, '2015-04-16 14:47:35');
INSERT INTO `yov_recommend` VALUES ('88', '10048', '1', null, '2015-04-16 14:47:35');
INSERT INTO `yov_recommend` VALUES ('89', '10048', '1', null, '2015-04-16 14:47:35');
INSERT INTO `yov_recommend` VALUES ('90', '10046', '1', null, '2015-04-16 14:47:39');
INSERT INTO `yov_recommend` VALUES ('91', '10046', '1', null, '2015-04-16 14:47:40');
INSERT INTO `yov_recommend` VALUES ('92', '10046', '1', null, '2015-04-16 14:47:40');
INSERT INTO `yov_recommend` VALUES ('93', '10046', '1', null, '2015-04-16 14:47:40');
INSERT INTO `yov_recommend` VALUES ('94', '10048', '1', null, '2015-04-16 19:23:22');
INSERT INTO `yov_recommend` VALUES ('95', '10045', '1', null, '2015-04-16 19:23:27');
INSERT INTO `yov_recommend` VALUES ('96', '10044', '1', null, '2015-04-16 19:23:33');
INSERT INTO `yov_recommend` VALUES ('97', '10045', '1', null, '2015-04-16 19:23:42');
INSERT INTO `yov_recommend` VALUES ('98', '10045', '1', null, '2015-04-16 19:23:44');
INSERT INTO `yov_recommend` VALUES ('99', '10045', '1', null, '2015-04-16 19:23:45');
INSERT INTO `yov_recommend` VALUES ('100', '10045', '1', null, '2015-04-16 19:23:46');
INSERT INTO `yov_recommend` VALUES ('101', '10045', '1', null, '2015-04-16 19:23:46');
INSERT INTO `yov_recommend` VALUES ('102', '10045', '1', null, '2015-04-16 19:23:47');
INSERT INTO `yov_recommend` VALUES ('103', '10045', '1', null, '2015-04-16 19:23:47');
INSERT INTO `yov_recommend` VALUES ('104', '10045', '1', null, '2015-04-16 19:23:47');
INSERT INTO `yov_recommend` VALUES ('105', '10053', '1', null, '2015-10-27 11:02:49');

-- ----------------------------
-- Table structure for yov_setting
-- ----------------------------
DROP TABLE IF EXISTS `yov_setting`;
CREATE TABLE `yov_setting` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `text` text,
  `active` tinyint(1) DEFAULT '1',
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_setting
-- ----------------------------

-- ----------------------------
-- Table structure for yov_source
-- ----------------------------
DROP TABLE IF EXISTS `yov_source`;
CREATE TABLE `yov_source` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `keywords` varchar(200) DEFAULT NULL,
  `summary` varchar(1000) DEFAULT NULL,
  `description` text,
  `url` varchar(1000) DEFAULT NULL,
  `link` varchar(1000) DEFAULT NULL,
  `snapshot` varchar(200) DEFAULT NULL,
  `thumb` varchar(200) DEFAULT NULL,
  `hash` varchar(64) DEFAULT NULL,
  `hash_snap` varchar(64) DEFAULT NULL,
  `id_user` int(12) DEFAULT NULL,
  `id_source_type` int(12) NOT NULL,
  `origin` varchar(1000) DEFAULT NULL,
  `active` tinyint(1) DEFAULT '1',
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=10054 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_source
-- ----------------------------
INSERT INTO `yov_source` VALUES ('10000', '3D image gallery', '3D image gallery folded', '', '', 'index.html', 'source/201412/3d-folded-images-gallery/', '', '', 'a92f14ca054dd841c921c380e82d7bf5', '', '1', '1', '', '0', '2014-12-08 23:30:24');
INSERT INTO `yov_source` VALUES ('10001', 'css3 loading', 'css3 loading', '', '', 'index.html', 'source/201412/4-happy-css3-loading-animation/', '', '', 'b07a208b06e9a6dcd7b8685c71505d0a', '', '1', '1', '', '0', '2014-12-08 23:32:15');
INSERT INTO `yov_source` VALUES ('10002', 'css3 + svg 制作的矢量动画图标', 'css3 svg icon', '本应用是用CSS3和SVG来完成的，一个超级炫酷的图标动画实例；其中包含了多种风格样式的图标动画，适合不同的网页风格。SVG是可缩放矢量图形，因此，我们可以对其进行任意缩放而不影响其辨识度，是种超赞的网页设计方案。', '<p>\r\n	HTML:\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-html\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=\"innerwrap red\"&gt;\r\n		&lt;div class=\"iconholder\"&gt;\r\n            &lt;h2&gt;Animated SVG Icons:	Flat Design&lt;/h2&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-browser\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-brush\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-calander\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-camera\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-clock\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-coffee\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-diamond\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-disk\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-email\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-film\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-flag\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-folder\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-graph\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-heart\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-home\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-lightning\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-location\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-lock\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-magnify\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-message\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-mic\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-paper\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-pencil\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-phone\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-picture\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-plane\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-present\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-robot\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-rocket\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-screen\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-settings\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-spaceship\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-storm\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-suitcase\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-tag\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-thumbsdown\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-thumbsup\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-trash\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-user\"&gt;&lt;/span&gt;\r\n            &lt;span class=\"svg-icon flat-filled\" id=\"filled-winner\"&gt;&lt;/span&gt;\r\n        &lt;/div&gt;&lt;!-- IconHolder End--&gt;\r\n	&lt;/div&gt;&lt;!--iconholder End--&gt;</pre>\r\nCSS:\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-css\">/*=============================================\r\n[ Icon Wrap]\r\n==============================================*/\r\n.svg-icon {\r\n    display: inline-block;\r\n    width: 134px;\r\n    height: 138px;\r\n    margin: 40px 30px;\r\n    float: left;\r\n}\r\n.svg-icon:hover { cursor: pointer }\r\n.flat-filled {\r\n    display: inline-block;\r\n    width: 100px;\r\n    height: 100px;\r\n    margin: 40px 30px;\r\n}\r\n.flat-line {\r\n    display: inline-block;\r\n    width: 100px;\r\n    height: 100px;\r\n    margin: 40px 30px;\r\n}\r\n.flat-shadow {\r\n    display: inline-block;\r\n    width: 100px;\r\n    height: 100px;\r\n    margin: 40px 30px;\r\n}\r\n/*=============================================\r\n[ Inactive Styles ]\r\n==============================================*/\r\n.social-line {\r\n    display: inline-block;\r\n    width: 134px;\r\n    height: 138px;\r\n    margin-right: 54px;\r\n}\r\n.social-line:hover { cursor: pointer }\r\n/* Gradient Offsets */\r\n.offset0 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0.5;\r\n}\r\n.offset1 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0.2;\r\n}\r\n.offset2 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0.173;\r\n}\r\n.offset3 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0;\r\n}\r\n.offset4 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0.7;\r\n}\r\n.offset5 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0.1143;\r\n}\r\n.offset6 {\r\n    stop-color: #000000;\r\n    stop-opacity: 0.1106;\r\n}\r\n.social-line {\r\n    width: 80px;\r\n    height: 80px;\r\n    overflow: hidden;\r\n}\r\n.social-line .icon_circle_shadow {\r\n    fill: none;\r\n    fill-opacity: 0;\r\n    opacity: 0;\r\n    -webkit-transition: all .4s ease;\r\n    -moz-transition: all 4s ease;\r\n    transition: all .4s ease;\r\n}\r\n.social-line .icon_shape_shadow {\r\n    fill: none;\r\n    fill-opacity: 0;\r\n}\r\n.social-line .icon_circle {\r\n    stroke: #FFFFFF;\r\n    stroke-width: 5;\r\n    stroke-miterlimit: 10;\r\n    fill: none;\r\n}\r\n.social-line .icon_shape { fill: #FFFFFF }\r\n/*=============================================\r\n[ Hover Styles ]\r\n==============================================*/\r\n.social-line:hover {\r\n    overflow: visible;\r\n    -webkit-transform: scale(1.15,1.15);\r\n    -moz-transform: scale(1.15,1.15);\r\n    transform: scale(1.15,1.15);\r\n}\r\n/* Gradient IDs */\r\n.social-line:hover .icon_circle_shadow {\r\n    fill: url(#icon_circle_gradient);\r\n    fill-opacity: 0.7;\r\n    opacity: 1;\r\n}\r\n.social-line:hover .icon_shape_shadow {\r\n    fill: url(#icon_shape_gradient);\r\n    fill-opacity: 0.9;\r\n    -webkit-transition-delay: .4s;\r\n    -moz-transition-delay: .4s;\r\n    transition-delay: .4s;\r\n    -webkit-transform: scale(1,1);\r\n    -moz-transform: scale(1,1);\r\n    transform: scale(1,1);\r\n}\r\n/* Icon Styles */\r\n.social-line:hover .icon_circle {\r\n    stroke: #FFFFFF;\r\n    stroke-width: 5;\r\n    stroke-miterlimit: 10;\r\n    fill: none;\r\n}\r\n.social-line:hover path.icon_shape {\r\n    -moz-transform: scale(1,1);\r\n    -webkit-transform: scale(1,1);\r\n    transform: scale(1,1);\r\n    /*animation-name*/\r\n    -webkit-animation-name: burst;\r\n    -moz-animation-name: burst;\r\n    -ms-animation-name: burst;\r\n    -o-animation-name: burst;\r\n    animation-name: burst;\r\n    /*animation-duration*/\r\n    -webkit-animation-duration: .4s;\r\n    -moz-animation-duration: .4s;\r\n    -ms-animation-duration: .4s;\r\n    -o-animation-duration: .4s;\r\n    animation-duration: .4s;\r\n    /*transform-origin*/\r\n    -webkit-transform-origin: 50% 50%;\r\n    -moz-transform-origin: 40px 38px !important;\r\n    -ms-transform-origin: 50% 50%;\r\n    -o-transform-origin: 50% 50%;\r\n    transform-origin: 50% 50%;\r\n}</pre>\r\n</p>', 'index.html', 'source/201412/150-css3-svg-icons/', 'source/201412/150-css3-svg-icons/8f6a58b25e31d364d7a0528685c7d878.png', 'source/201412/150-css3-svg-icons/thumb-8f6a58b25e31d364d7a0528685c7d878.png', 'fca3d77144a603295e8c9be5d6442a74', 'd18c2f32791afff5fe3ff5e8e31dd907', '1', '1', '', '1', '2014-12-08 23:36:37');
INSERT INTO `yov_source` VALUES ('10003', '3D html5 logo', '3D html5 logo', '', '', 'index.html', 'source/201412/3d-html5-logo/', '', '', '441286e53113e01b69595e594e73c394', '', '1', '3', '', '0', '2014-12-09 21:58:40');
INSERT INTO `yov_source` VALUES ('10004', 'Android dock', 'Android dock', '本实例是模拟Android的风格，也可以说是模拟Apple的桌面风格，很有创意，也很实用，处理得很简单；我们可以用来做各种各样的变化样式，希望对大家有帮助。', '<p>\r\n	部分代码\r\n</p>\r\n<p>\r\n	HTML：\r\n</p>\r\n<pre class=\"prettyprint lang-html\">  &lt;div id=\"dock-wrapper\"&gt;\r\n    &lt;div class=\"dock\"&gt;\r\n      &lt;div class=\"dock-front\"&gt;\r\n    	    &lt;img src=\"images/arrow-up.png\" alt=\"Arrow Up\" id=\"arrow-up\" /&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"dock-top\"&gt;\r\n    	    &lt;img src=\"images/arrow-down.png\" alt=\"Arrow Down\" id=\"arrow-down\" /&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"item\"&gt;\r\n    	&lt;img src=\"images/launcher-pro.png\" width=\"60\" /&gt;\r\n    	&lt;img src=\"images/2do.png\" width=\"60\" /&gt;\r\n    	&lt;img src=\"images/antivirus.png\" width=\"60\" /&gt;\r\n    	&lt;img src=\"images/drive.png\" width=\"60\" /&gt;\r\n    	&lt;img src=\"images/plex.png\" width=\"60\" /&gt;\r\n    	&lt;img src=\"images/maps.png\" width=\"60\" /&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n</pre>\r\n<p>\r\n	CSS:\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-css\">.dock {\r\n      height: 70px;\r\n      -webkit-transform-style: preserve-3d;\r\n         -moz-transform-style: preserve-3d;\r\n          -ms-transform-style: preserve-3d;\r\n           -o-transform-style: preserve-3d;\r\n              transform-style: preserve-3d;\r\n      -webkit-transition: -webkit-transform 1s;\r\n         -moz-transition: -moz-transform 1s;\r\n          -ms-transition: -ms-transform 1s;\r\n           -o-transition: -o-transform 1s;\r\n              transition: transform 1s;\r\n    }\r\n.dock-show {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -webkit-transform: translateZ(-25px) rotateX(-95deg);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -moz-transform: translateZ(-25px) rotateX(-95deg);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -ms-transform: translateZ(-25px) rotateX(-95deg);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -o-transform: translateZ(-25px) rotateX(-95deg);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; transform: translateZ(-25px) rotateX(-95deg);\r\n&nbsp;&nbsp;&nbsp; }\r\n&nbsp;&nbsp; &nbsp;\r\n.dock-front, .dock-top {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; position: absolute;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display: block;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; width: 100%;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height: 40px;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; padding: 10px 0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; box-shadow: 0px -3px 6px rgba(0,0,0,0.3);\r\n&nbsp;&nbsp;&nbsp; }\r\n</pre>\r\n<p>\r\n	<br />\r\n</p>', 'index.html', 'source/201412/AndroidDock/', 'source/201412/AndroidDock/c1fc4b43a6667e9f402e7eff8ca14c00.png', 'source/201412/AndroidDock/thumb-c1fc4b43a6667e9f402e7eff8ca14c00.png', 'ce8205ad16ad4058eb96f7b6ab992822', '20d8c59f51155e4d736349a16ae4887f', '1', '9', '', '1', '2014-12-09 22:01:20');
INSERT INTO `yov_source` VALUES ('10005', '3D chart animated', '3D chart animated', '', '', 'index.html', 'source/201412/Animated3DBarChart/', '', '', 'ea57f94d5dd6ee44f8bd3ab9a0cb6ccc', '', '1', '1', '', '0', '2014-12-09 22:44:31');
INSERT INTO `yov_source` VALUES ('10006', 'Player cassette', 'Player cassette', '用css模拟的磁带，十分逼真，你看了肯定会瞬间被带入到90年代，那是一个多么接地气的时代，有很多事值得我们去怀念，是的，这是一个时代的象征，也是生活在这个时代的人们的思绪所在。<br />', '<p>\r\n	部分代码：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-css\">/* Tape elements */\r\n.vc-tape-wrapper{\r\n	-webkit-perspective: 800px;	\r\n	-moz-perspective: 800px;\r\n	-o-perspective: 800px;\r\n	-ms-perspective: 800px;\r\n	perspective: 800px;\r\n}\r\n.vc-tape{\r\n	width: 586px;\r\n	height: 379px;\r\n	margin: 30px auto 0;\r\n	position: relative;\r\n	-webkit-transition: all .4s ease-in-out;	\r\n	-moz-transition: all .4s ease-in-out;\r\n	-o-transition: all .4s ease-in-out;\r\n	-ms-transition: all .4s ease-in-out;\r\n	transition: all .4s ease-in-out;\r\n}\r\n.vc-loader{\r\n	position: absolute;\r\n	width: 31px;\r\n	height: 31px;\r\n	bottom: 50px;\r\n	left: 50%;\r\n	margin: -15px 0 0 -15px;\r\n	background: transparent url(../images/ajax-loader.gif) no-repeat center center;\r\n	display: none;\r\n}\r\n.vc-tape-back{\r\n	width: 100%;\r\n	height: 100%;\r\n	position: relative;\r\n	background: transparent url(../images/cs_back.png) no-repeat center center;\r\n}\r\n.vc-tape-wheel{\r\n	width: 125px;\r\n	height: 125px;\r\n	position: absolute;\r\n	top: 110px;\r\n	background: transparent;\r\n	border-radius: 50%;\r\n}\r\n.vc-tape-wheel-left{\r\n	left: 109px;\r\n	box-shadow: 0 0 0 70px #000;\r\n}\r\n.vc-tape-wheel-right{\r\n	right: 113px;\r\n}\r\n@-webkit-keyframes rotateLeft {\r\n	0% { -webkit-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -webkit-transform: rotate(-360deg) translateZ(-1px); }\r\n}\r\n@-webkit-keyframes rotateRight {\r\n	0% { -webkit-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -webkit-transform: rotate(360deg) translateZ(-1px); }\r\n}\r\n@-moz-keyframes rotateLeft {\r\n	0% { -moz-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -moz-transform: rotate(-360deg) translateZ(-1px); }\r\n}\r\n@-moz-keyframes rotateRight {\r\n	0% { -moz-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -moz-transform: rotate(360deg) translateZ(-1px); }\r\n}\r\n@-o-keyframes rotateLeft {\r\n	0% { -o-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -o-transform: rotate(-360deg) translateZ(-1px); }\r\n}\r\n@-o-keyframes rotateRight {\r\n	0% { -o-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -o-transform: rotate(360deg) translateZ(-1px); }\r\n}\r\n@-ms-keyframes rotateLeft {\r\n	0% { -ms-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -ms-transform: rotate(-360deg) translateZ(-1px); }\r\n}\r\n@-ms-keyframes rotateRight {\r\n	0% { -ms-transform: rotate(0deg) translateZ(-1px); }\r\n	100% { -ms-transform: rotate(360deg) translateZ(-1px); }\r\n}\r\n@keyframes rotateLeft {\r\n	0% { transform: rotate(0deg) translateZ(-1px); }\r\n	100% { transform: rotate(-360deg) translateZ(-1px); }\r\n}\r\n@keyframes rotateRight {\r\n	0% { transform: rotate(0deg) translateZ(-1px); }\r\n	100% { transform: rotate(360deg) translateZ(-1px); }\r\n}\r\n.vc-tape-wheel div{\r\n	width: 100%;\r\n	height: 100%;\r\n	background: transparent url(../images/cs_wheel.png) no-repeat center center;\r\n}\r\n.vc-tape-front{\r\n	width: 100%;\r\n	height: 100%;\r\n	position: absolute;\r\n	background: transparent url(../images/cs_front.png) no-repeat center center;\r\n	top: 0px;\r\n	left: 0px;\r\n}\r\n.vc-tape-side-b{\r\n	display: none;\r\n	-webkit-transform: rotate3d(0, 1, 0, 180deg);\r\n	-moz-transform: rotate3d(0, 1, 0, 180deg);\r\n	-o-transform: rotate3d(0, 1, 0, 180deg);\r\n	-ms-transform: rotate3d(0, 1, 0, 180deg);\r\n	transform: rotate3d(0, 1, 0, 180deg);\r\n}\r\n\r\n.vc-tape-front span{\r\n	color: rgba(0, 0, 0, 0.6);\r\n	position: absolute;\r\n	top: 83px;\r\n	left: 67px;\r\n	font-family: Arial;\r\n	font-weight: bold;\r\n	font-size: 20px;\r\n}\r\n</pre>\r\n</p>', 'index.html', 'source/201412/CassettePlayer/', 'source/201412/CassettePlayer/881806d24f30e5b8fbcb7a0e6637c57f.png', 'source/201412/CassettePlayer/thumb-881806d24f30e5b8fbcb7a0e6637c57f.png', '0260b367d84042cb664c6239ea51a42b', 'cdfc553667267c55b28baf1253e07f7e', '1', '1', '', '1', '2014-12-09 23:04:32');
INSERT INTO `yov_source` VALUES ('10007', '实用的chart 使用js完成', 'chart js', '很不错的JS制作的统计图，包含了柱形、锥形、线型、网状等类型，而且是动态显示的，浏览实例时需要手动选择URL： bar.html, doughnut.html, line.html, pie.html, polarArea.html, radar.html, sixup.html<br />', '<p>\r\n	部分JS代码：\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-js\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chart = this;\r\n\r\n	var animationOptions = {\r\n		linear : function (t){\r\n			return t;\r\n		},\r\n		easeInQuad: function (t) {\r\n			return t*t;\r\n		},\r\n		easeOutQuad: function (t) {\r\n			return -1 *t*(t-2);\r\n		},\r\n		easeInOutQuad: function (t) {\r\n			if ((t/=1/2) &lt; 1) return 1/2*t*t;\r\n			return -1/2 * ((--t)*(t-2) - 1);\r\n		},\r\n		easeInCubic: function (t) {\r\n			return t*t*t;\r\n		},\r\n		easeOutCubic: function (t) {\r\n			return 1*((t=t/1-1)*t*t + 1);\r\n		},\r\n		easeInOutCubic: function (t) {\r\n			if ((t/=1/2) &lt; 1) return 1/2*t*t*t;\r\n			return 1/2*((t-=2)*t*t + 2);\r\n		},\r\n		easeInQuart: function (t) {\r\n			return t*t*t*t;\r\n		},\r\n		easeOutQuart: function (t) {\r\n			return -1 * ((t=t/1-1)*t*t*t - 1);\r\n		},\r\n		easeInOutQuart: function (t) {\r\n			if ((t/=1/2) &lt; 1) return 1/2*t*t*t*t;\r\n			return -1/2 * ((t-=2)*t*t*t - 2);\r\n		},\r\n		easeInQuint: function (t) {\r\n			return 1*(t/=1)*t*t*t*t;\r\n		},\r\n		easeOutQuint: function (t) {\r\n			return 1*((t=t/1-1)*t*t*t*t + 1);\r\n		},\r\n		easeInOutQuint: function (t) {\r\n			if ((t/=1/2) &lt; 1) return 1/2*t*t*t*t*t;\r\n			return 1/2*((t-=2)*t*t*t*t + 2);\r\n		},\r\n		easeInSine: function (t) {\r\n			return -1 * Math.cos(t/1 * (Math.PI/2)) + 1;\r\n		},\r\n		easeOutSine: function (t) {\r\n			return 1 * Math.sin(t/1 * (Math.PI/2));\r\n		},\r\n		easeInOutSine: function (t) {\r\n			return -1/2 * (Math.cos(Math.PI*t/1) - 1);\r\n		},\r\n		easeInExpo: function (t) {\r\n			return (t==0) ? 1 : 1 * Math.pow(2, 10 * (t/1 - 1));\r\n		},\r\n		easeOutExpo: function (t) {\r\n			return (t==1) ? 1 : 1 * (-Math.pow(2, -10 * t/1) + 1);\r\n		},\r\n		easeInOutExpo: function (t) {\r\n			if (t==0) return 0;\r\n			if (t==1) return 1;\r\n			if ((t/=1/2) &lt; 1) return 1/2 * Math.pow(2, 10 * (t - 1));\r\n			return 1/2 * (-Math.pow(2, -10 * --t) + 2);\r\n			},\r\n		easeInCirc: function (t) {\r\n			if (t&gt;=1) return t;\r\n			return -1 * (Math.sqrt(1 - (t/=1)*t) - 1);\r\n		},\r\n		easeOutCirc: function (t) {\r\n			return 1 * Math.sqrt(1 - (t=t/1-1)*t);\r\n		},\r\n		easeInOutCirc: function (t) {\r\n			if ((t/=1/2) &lt; 1) return -1/2 * (Math.sqrt(1 - t*t) - 1);\r\n			return 1/2 * (Math.sqrt(1 - (t-=2)*t) + 1);\r\n		},\r\n		easeInElastic: function (t) {\r\n			var s=1.70158;var p=0;var a=1;\r\n			if (t==0) return 0;  if ((t/=1)==1) return 1;  if (!p) p=1*.3;\r\n			if (a &lt; Math.abs(1)) { a=1; var s=p/4; }\r\n			else var s = p/(2*Math.PI) * Math.asin (1/a);\r\n			return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p ));\r\n		},\r\n		easeOutElastic: function (t) {\r\n			var s=1.70158;var p=0;var a=1;\r\n			if (t==0) return 0;  if ((t/=1)==1) return 1;  if (!p) p=1*.3;\r\n			if (a &lt; Math.abs(1)) { a=1; var s=p/4; }\r\n			else var s = p/(2*Math.PI) * Math.asin (1/a);\r\n			return a*Math.pow(2,-10*t) * Math.sin( (t*1-s)*(2*Math.PI)/p ) + 1;\r\n		},\r\n		easeInOutElastic: function (t) {\r\n			var s=1.70158;var p=0;var a=1;\r\n			if (t==0) return 0;  if ((t/=1/2)==2) return 1;  if (!p) p=1*(.3*1.5);\r\n			if (a &lt; Math.abs(1)) { a=1; var s=p/4; }\r\n			else var s = p/(2*Math.PI) * Math.asin (1/a);\r\n			if (t &lt; 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p ));\r\n			return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p )*.5 + 1;\r\n		},\r\n		easeInBack: function (t) {\r\n			var s = 1.70158;\r\n			return 1*(t/=1)*t*((s+1)*t - s);\r\n		},\r\n		easeOutBack: function (t) {\r\n			var s = 1.70158;\r\n			return 1*((t=t/1-1)*t*((s+1)*t + s) + 1);\r\n		},\r\n		easeInOutBack: function (t) {\r\n			var s = 1.70158; \r\n			if ((t/=1/2) &lt; 1) return 1/2*(t*t*(((s*=(1.525))+1)*t - s));\r\n			return 1/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2);\r\n		},\r\n		easeInBounce: function (t) {\r\n			return 1 - animationOptions.easeOutBounce (1-t);\r\n		},\r\n		easeOutBounce: function (t) {\r\n			if ((t/=1) &lt; (1/2.75)) {\r\n				return 1*(7.5625*t*t);\r\n			} else if (t &lt; (2/2.75)) {\r\n				return 1*(7.5625*(t-=(1.5/2.75))*t + .75);\r\n			} else if (t &lt; (2.5/2.75)) {\r\n				return 1*(7.5625*(t-=(2.25/2.75))*t + .9375);\r\n			} else {\r\n				return 1*(7.5625*(t-=(2.625/2.75))*t + .984375);\r\n			}\r\n		},\r\n		easeInOutBounce: function (t) {\r\n			if (t &lt; 1/2) return animationOptions.easeInBounce (t*2) * .5;\r\n			return animationOptions.easeOutBounce (t*2-1) * .5 + 1*.5;\r\n		}\r\n	};</pre>\r\n<p>\r\n	<br />\r\n</p>', 'samples/pie.html', 'source/201412/chartjs/', 'source/201412/chartjs/9dc57be20bbfd8637681ad44b17b180c.png', 'source/201412/chartjs/thumb-9dc57be20bbfd8637681ad44b17b180c.png', 'b7c82918acce1e676e696bdebbb7fb4b', '625b009b8cf60283293f82e6bc01d37d', '1', '2', '', '1', '2014-12-09 23:08:27');
INSERT INTO `yov_source` VALUES ('10008', '很酷的CSS3字体', 'css3 text effect', '很酷的CSS3字体，很实用，大家也可以自己根据需要，按照本例所提供的方法，来进行定制。', '<p>\r\n	CSS 代码：\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-css\">@media print{h1{-webkit-filter:contrast()/*to print shadows*/}}\r\nh1:before,h1:after{position:absolute;top:0;left:0;right:0}\r\n\r\n.outlinedA{color:hsl(200,75%,35%);text-shadow:0 0 1px currentColor,\r\n-1px -1px 1px hsl(200,75%,45%),\r\n0 -1px 1px hsl(200,75%,40%),\r\n-1px 0 1px hsl(200,75%,35%),\r\n1px -1px 1px hsl(200,75%,35%),\r\n1px 0 1px hsl(200,75%,30%),\r\n1px 1px 1px hsl(200,75%,30%),\r\n0 1px 1px hsl(200,75%,30%),\r\n-1px 1px 1px hsl(200,75%,30%),\r\n\r\n-2px -2px 1px hsl(200,75%,75%),\r\n-2px -1px 1px hsl(200,75%,60%),\r\n-2px 0 1px hsl(200,75%,60%),\r\n-1px -2px 1px hsl(200,75%,50%),\r\n0 -2px 1px hsl(200,75%,50%),\r\n1px -2px 1px hsl(200,75%,50%),\r\n2px -2px 1px hsl(200,75%,35%),\r\n2px -1px 1px hsl(200,75%,35%),\r\n2px 0 1px hsl(200,75%,30%),\r\n2px 1px 1px hsl(200,75%,10%),\r\n2px 2px 1px hsl(200,75%,10%),\r\n1px 2px 1px hsl(200,75%,15%),\r\n0 2px 1px hsl(200,75%,10%),\r\n-1px 2px 1px hsl(200,75%,20%),\r\n-2px 2px 1px hsl(200,75%,20%),\r\n-2px 1px 1px hsl(200,75%,10%),\r\n\r\n-3px -3px 1px #006,\r\n-2px -3px 1px #006,\r\n-1px -3px 1px #006,\r\n0 -3px 1px #006,\r\n1px -3px 1px #006,\r\n2px -3px 1px #006,\r\n3px -3px 1px #006,\r\n3px -2px 1px #006,\r\n3px -1px 1px #006,\r\n3px 0 1px #006,\r\n3px 1px 1px #006,\r\n3px 2px 1px #006,\r\n3px 3px 2px #006,\r\n2px 3px 1px #006,\r\n1px 3px 1px #006,\r\n0 3px 1px #006,\r\n-1px 3px 1px #006,\r\n-2px 3px 1px #006,\r\n-3px 3px 1px #006,\r\n-3px 2px 1px #006,\r\n-3px 1px 1px #006,\r\n-3px 0 1px #006,\r\n-3px -1px 1px #006,\r\n-3px -2px 1px #006\r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>', 'index.html', 'source/201412/cool-css3-text-effect/', 'source/201412/cool-css3-text-effect/2f294bee9c0224844b345bd7ca135d10.png', 'source/201412/cool-css3-text-effect/thumb-2f294bee9c0224844b345bd7ca135d10.png', '78ab3a6d8c5dc9c38daa804bcf06de6b', '6a18f81cfed2ccf68b05e2f95156fa39', '1', '1', '', '1', '2014-12-09 23:11:23');
INSERT INTO `yov_source` VALUES ('10009', '创业团队的招聘与留人', '创业 团队 招聘 留人', '&nbsp;&nbsp;&nbsp; 对创业公司来说，招聘仅仅是获得人才的第一步，招到合适的人非常重要，但留住人更加重要。传统招聘网站社招和校招两条路以外，创业公司还需要探索其他的招人途径和留住人的方法。', '<strong><span style=\"color:#e36c09;\">招人</span></strong> \r\n<h4>\r\n	如何破除招人困局\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在互联网一片红火的大背景下，BAT公司会经常组织各种“英才计划”来抢夺精英，可见现在想招到合适的人才越来越困难。对创业公司来说，去各大招聘网站花钱\r\n发布JD（职位描述），期待“盘亮条顺会来事儿”且要求不高的才子愿意踏进这滩“泥潭”，这事就和矮矬穷逆袭白富美一样不大靠谱。当然不排除富有理想、有\r\n抱负、不愿背负“金手铐”、笃定创业路的佳人，但毕竟凤毛麟角、可遇不可求。因此总体而言，现在对创业公司来说也许是最好的圈钱时代，但同时也是最坏的招\r\n人时节——通过传统招聘网站社招这条路，不大行得通。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;两年前，我们曾经在创新工场的校园招聘中吸引到三四个不错的青年才俊，分别来自中科\r\n院、北大、北航等院校，好不容易克服心理障碍给了我自认为对应届生来说已非常不错的薪酬，但转眼他们便被网易、腾讯、微软等公司用重金强势瓜分。背靠创新\r\n工场这棵大树，凭借它在学生中的辐射效应，我们尚且如此，那些没有名气和背景、缺乏资金、只有梦想的创业公司更难以获得青睐——走校园招聘这条路，也很难\r\n走得通。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;因此，创业公司需要探索其他招人路径。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;动用团队的人脉来寻找人才。这是平时的慢工细活，无法一蹴而就。公司技术合伙人平日就需注意拓展在技术圈的人脉，居安思危，就像小时候都读过的蚂蚱和蚂蚁的寓言故事，不要等到过冬（需要招人）时才想起储存粮食（拓展人脉）。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;当然，拓展技术人脉并不是见面交换名片“打个哈哈”那么简单的事，否则这事交给负责商务拓展的人就足够，不用劳烦本来就不很善于言辞、很难自来熟的技术合伙\r\n人。因为工程师都是桀骜的，他们拜服于技术水平、技术视野、项目能力，而非三寸不烂之舌。虚的东西他们也许表面迎合，但内心会有自己冷静的判断，或许很难\r\n产生认同感。唯有技术相关的讨论，甚至真枪实弹的代码，才能戳中他们的G点。工程师往往先对人认可，然后才会对项目认可。而这种对人的认可，在一次次交往\r\n中，才能逐渐形成。\r\n</p>\r\n<p>\r\n	<b>曲线救国，聘用实习生来达到获取人才的目的。</b> \r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;通过在水木社区等学校论坛中发布信息吸引大三下学期或者研二\r\n的学生，然后利诱之。一般大公司在实习生层面都有公司制定的统一标准，人家能给120/天，你就给150/天；人家给150/天，你就200/天。一个月\r\n算下来并不多太多但能捞得一块璞玉。其实学生找实习和找工作的心态是不同的：去大公司实习意味着一个萝卜一个坑，施展不了才华，学不到太多，但去创业公\r\n司，只要技术老板靠谱，就能获得很多成长；学生找工作则求稳、求高薪，成长性方面有人考量不多，毕竟走向社会面临房子、车子等很实际的生活压力。只要肯下\r\n功夫，就能找到不错的苗子。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;人和人之间就怕没有交集，有交集后一些事会好办很多。实习生一旦开始工作，如果技术合伙人重视并加以培养，通过手把手教带出感情、通过做项目让其认识到公司伟大的愿景，那么实习期结束，一份合理的薪水将其留下的概率要远远大于一份高额薪水拿下一个校招学生的概率。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;其他还有一些路子，比如尝试一些新出现的招聘平台，使用LinkedIn和心仪的人“眉来眼去”等。总之，技术合伙人要把自己的技术魅力和人格魅力全方位使用，招人困局才能够逐渐破解。\r\n</p>\r\n<h4>\r\n	面试是个技巧活\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;招人时面试是个技巧活。如何在最短的时间里对面试者有最全面的了解，这非常考验面试官的能力。初期团队规模还小时，技术合伙人当仁不让是面试的把关者。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;面试的目的是收获人才，而非展示“我比你强”的优越感。有些面试官以将对方问倒，甚至激怒对方为荣，还美其名曰为“压力测试”。我不喜欢这种做法——我希望\r\n面试时尽可能让对方展现其最大的能力。所以一开始我会将氛围轻松化，然后问一些基础性的问题及简历中感兴趣的点，一点点发问、深挖。基础性的问题不大容易\r\n靠作假和背题就能涵盖，即使碰巧背到了，再给一些上下文问得细一些，就能露出端倪。比如很多应试者难以讲清楚lock-free、wait-free的概\r\n念和应用场景，即使勉强讲出来，再让其描述如何做一个lock-free的queue，他也多半会卡住（甚至不大会反问我使用的场景，在我提示只用实现\r\nsingle producer single consumer lock-free \r\nqueue后，也无法继续下去）。在我看来，基础扎实大于工作经验。因为工作经验是可以混出来的。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;面试时多些开放性的问题，多让面试者进行场景的描述，然后据此提后续补充问题。比如：你解决过的最困难的问题是什么？如果让你来做XXX，会怎么考虑？\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;面试时还不要忘记给面试者机会展示自己真正的实力——有时面试官的问题对面试者来说可能是偏门。问得差不多，在心里有初步定论后把话语权抛给对方：“刚才问了不少问题，有没有哪些是自己的强项但问题没有涉及的？可否分享下？”\r\n</p>\r\n<p>\r\n	最\r\n后别忘了笔试。毕竟招来的人是来做事而不是侃侃而谈的。我一般会给出简单的题目（包括一个项目），让对方回去尽最快速度完成。完成的代码要求健壮、有测试\r\n例；项目还需要在Heroku上能部署出一个可运行的版本。什么？没接触过Heroku，那正好是考察学习能力的机会……\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;我不喜欢在纸上做\r\n出的笔试。白板上我也只看伪码和架构图。真正的代码要用计算机写出来，能运行、有输入输出、有测试。拿到交出的代码后，我会先看测试例是否充分，是否考虑\r\n到各种边界条件、exception、corner \r\ncase，然后手动输入几组测试数据，看是否crash，之后才看代码。代码写得逻辑是否正确、是否干净整洁、是否健壮、是否有注释、是否符合\r\nPEP8（针对Python）等。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;只要面试官有足够的创造力，笔试能够玩出很多“花活儿”。我一般不会让面试者当场做题，而是请他们回去完成。这样做出于三方面考虑：\r\n</p>\r\n<ol>\r\n	<li>\r\n		<span style=\"background-color:initial;\">现场笔试时间有限；</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">选择一些对方可能没用过的library让其在项目中使用，考察学习能力；</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">如果对方最终没有提交代码，不是他对公司不感兴趣，就是能力有限。如果对方做得很棒，又能对自己的代码细节解释清楚，会是很好的团队成员。</span> \r\n	</li>\r\n</ol>\r\n<p>\r\n	如果最终只有一个招人名额，但有多个面试者都很不错，举棋不定时选那位思维最清晰缜密的人，怎么判断思维清晰缜密？\r\n</p>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">表达能力——把一件事情说清楚明白的能力；</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">写作能力（现在很多人都会写博客，博客里的文章能反映出来写作能力）。</span> \r\n	</li>\r\n</ul>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">留人</span></strong> \r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;招聘只是获得人才的第一步，接下来就是尽可能长时间地留住人才，为公司所用。能留住人的第一要务当然是公司有足够的吸引力，比如公司业务蒸蒸日上，收入水涨\r\n船高；或者不赚钱但处在开疆辟土、攻城略地的阶段；再不济起码要有各种故事、各种预期以及可能的美好未来。如果这些都不具备，所有可能的利好还都出尽，那\r\n留得住人只能靠创始人的人品了。\r\n</p>\r\n<h4>\r\n	人品\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;创业团队和一般公司的团队不同，创业公司创始人的人品可以有非常强的感召力。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;有个很俗的段子说“男人四大铁”，虽然粗俗，但却在理。2011年我离开Juniper创业时，即使我跟自己的团队振臂一呼谁愿意一起走？绝对没人愿意。因\r\n为公司的同事相敬如宾，合作再愉快也总隔着层纱——写个邮件还要琢磨着我用惊叹号是不是过分了，要不要“补个妆”，发个笑脸？所以经理人品再好，感召力也\r\n一般。而创业团队则不同，一起编码到半夜、吵需求吵到面红耳赤、打飞盘打到咬牙切齿——这和“男人四大铁”段子里说的一起同过窗、一起扛过枪有几分神似。\r\n也许以后男人四大铁还会加一个：一起创过业。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;这也是为什么那些人品不错的创业者，即便在山穷水尽时还有人不离不弃。人品代表了很多方面，我\r\n前老板Frank曾说NetScreen的成功，“财散人聚”是其中一条重要原因。这里财散人聚就体现出人品的一个方面：不贪。创始人如果戒贪、弃嗔、不\r\n痴、摆低姿态、不轻慢别人（不慢）、做事坚决果敢（不疑），那就是人品好，别人也愿意跟随。\r\n</p>\r\n<h4>\r\n	提供发挥和成长的空间\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在提供合理报酬的前提下，员工为什么会留在某个团队？无非是个人发挥和成长的空间。对社招的工程师来说，发挥的空间很重要；对应届生或实习生来说，重要的则是快速成长的空间。了解这种诉求并正确应对，才能为留住人打下良好基础。\r\n</p>\r\n<p>\r\n	如\r\n果在大公司待过，就会发现在大公司有不少有能力但郁郁不得志的青年才俊。只要给个舞台逼出潜能，做事都是顶呱呱。可惜戴着“金手铐”锐气被磨尽，天天在邮\r\n件群里、会议堆里穿梭，以至于迷失了自己。这样的人如果不慎被你捡个漏，加盟了你的创业公司，那么让其充分发挥能力，找到适合他的舞台非常重要。很多公司\r\n都说要为员工提供“没有天花板的舞台”，但其实真正做到的没几个。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;应届生和实习生往往是等待雕琢的璞玉，需要下大力气培养。很多创业团队认为“时不我待”没空培养，其实未必。我的亲身体验是：他们学习的热情是非常高的，为了完成一件事，可以不惜代价。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;给应届生或实习生培训时，工作相关的内容不要有所保留。有句话说得好：如果缺乏必要的帮助，员工的失败是老板的失败。我一般会从架构讲起，使用哪些组件，这\r\n么选择（或妥协）的原因何在，然后一点点过渡到代码。要强调的是平日里要不厌其烦地回答他们的问题，哪怕问题显得非常“naive”——take it \r\neasy，因为“人不naive枉少年”啊。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;有人担心实习生若掌握太多公司核心代码，实习完就走人，这是杞人忧天。且不说进公司都要签\r\nNDA（Non Disclosure \r\nAgreement，保密协议），就算没有NDA，一家创业公司还挣扎在生死线上，“核心”是什么也未必清晰，实在没必要忧虑这些不着调的方面。信任是双\r\n向的，人事任用上必须用人不疑，包括对实习生。当然，必要的权限措施是需要的——但那是针对不同的角色，不是针对某个人。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;一旦实习生进入状态，提供一份合理的薪酬，他们毕业后留下来的概率会非常大。毕竟，你有好几个月的时间展示个人魅力、公司愿景、所做产品的价值。如果这样都留不下，那就算提高薪酬强留，也没多大意义。\r\n</p>\r\n<h4>\r\n	进行情感投入\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;感情是个微妙的东西，很多时候是能够起决定性的因素。没事找个员工一起喝杯咖啡闲聊，谈谈人生、理想、读书等，就是为感情银行里注入新的投资。作为一个老\r\n板，最好能够对团队里每个人（或重要员工）的家庭、情感、生活等有较细致的了解。都说感情一半是处出来的，一半是聊出来的。虽然大家朝夕相处，一起写代\r\n码，一起Debug，一起Hackathon，但没有深入聊过的感情总是“欠临门一脚”，无法坐实。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;情感投入可以说是细水长流，是基金定投。这份投入必须是发自内心、不计回报的。遇到重大变故也无须打出感情牌——人对了，投入够了，该有的就会有；否则，即使打出感情牌，也无济于事，还可能伤了相互的心。\r\n</p>', 'index.html', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-09-10/2821625', '1', '2015-01-09 09:04:04');
INSERT INTO `yov_source` VALUES ('10010', '创业公司优秀工程师的必备特质', '创业公司 工程师 特质', '&nbsp;&nbsp;&nbsp;&nbsp;许多优秀工程师在Google这样的大公司拥有丰富的工作经验，但他们未必适合创业公司。本文作者列举了一些能让工程师在创业公司里更易成功优秀特质，能够出类拔萃。<br />', '<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;我曾为创业公司面试过很多工程师，他们中有些人在Google这种大公司中拥有丰富的工作经验，但他们并不适合创业公司。不能说他们没能力，但他们在创业公司中表现得确实并不那么出类拔萃。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在多年的工作中，我发现的确有一些特质能让工程师在创业公司里更易成功。在创业公司中，我曾共事过的最高效工程师都有很好的决策力及工作技巧，尤其突出的是他们都具有下列几种特质。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201409/05/540969df99e87.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201409/05/540969df99e87.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<b>解决问题的技巧</b>。高效解决问题需要有缜密且科学的思维模式：提出假设然后想出可重复、高效的方法来测试。在创业公司中，解决问题的技巧并不局限于技术领域。如何设计交互方式推动用户数增长、如何避免项目延期等都可能是工程师会面临的问题。\r\n</p>\r\n<p>\r\n	<b>勇于学习</b>。\r\n作为创业公司的工程师，需要经常面对纷繁复杂且不熟悉的代码库，所以在大型代码库中迅速定位代码的能力尤为关键，这种能力多得益于大量的代码学习经验。在\r\n创业公司中，工程师需要学习的新东西并不仅与代码有关，有时候甚至需要做一些比如客户服务、销售、培训新员工这类不熟悉的工作。\r\n</p>\r\n<p>\r\n	<b>务实的态度</b>。大公司里，代码审查、单元测试等工作也许重要，但创业公司的工程师需要更加务实。这里的务实是指工程师需要知道什么时候该坚持观点、什么时候该接受观点，以此使项目得以顺利推进。要知道，还有很多更困难和更重要的决策需要去做，这些更值得多花些时间和精力。\r\n</p>\r\n<p>\r\n	<b>开发新工具提升效率</b>。创业公司最宝贵的资源是时间，而工具软件可以帮助工程师更好地利用时间。但创业公司中很难有开发工具软件的团队。优秀工程师总可以开发出新工具来自动化一些重复性操作，以便高效地利用时间。如果所开发的工具其他人也可以使用，将会提升整个团队的效率。\r\n</p>\r\n<p>\r\n	<b>强大的多面手</b>。除时间外，创业公司最需要的是多面手人才。比如前端开发人员如果懂一些服务器端知识，或是后端开发人员懂一些前端知识，他们的工作效率将会有极大提高，毕竟有些小问题将可以自己解决。\r\n</p>\r\n<p>\r\n	<b>当演员不当观众</b>。对于任何问题，我们都能以两种心态来看待：观众或是演员。观众心态使我们将问题归因于外部环境，而演员心态则会促使我们努力解决问题。创业公司当然需要后一类心态。\r\n</p>\r\n<p>\r\n	<b>学习意愿和坚忍不拔的毅力</b>。以上的六种品质有一个共同点：可以后天习得。想要获得这些品质，需要有坚韧不拔的毅力与学习意愿。从经验中不断学习，才能明白自己的弱项和需要提高的地方。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-09-02/2821497', '1', '2015-01-09 09:09:15');
INSERT INTO `yov_source` VALUES ('10011', '向上管理：管理自己的老板', '向上管理 管理 老板', '&nbsp;&nbsp;&nbsp;&nbsp;为什么有人在台下聊天能滔滔不绝，一上台发言就磕磕巴巴无所适从？“走上台”就意味着平等、亲密的关系被打破。和老板相处之道也类似，越是将老板放在高高在上的位置，如同图腾一般，就越无法和他有正常的关系。<br />', '<p>\r\n	<strong><span style=\"color:#e36c09;\">了解老板并构建双向关系</span></strong>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;当\r\n我作为职场新人第一天报道时，就很好奇将要面对的是一位什么样的老板。他是一位斯文的中年人，个子不高，戴副眼镜，书生气十足，一看就是从程序员升上来的\r\n管理者。他给我指定了一个Mentor（导师）后，就很少管我，除了周会我们只是在一起吃饭时聊聊无关痛痒的事情——往往是新闻上那些无聊的八卦。给我分\r\n配什么任务我就做什么，我从来不挑工作，但也没太多主见。就这样，我唯唯诺诺地度过了职场新人的第一年。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;坦白地说，我的老板对我挺好，还帮\r\n我申请了公司的一个大奖。但我们除了技术和八卦外，从来没有更深入的交流。他不会问我有什么样的诉求，未来希望的发展方向是什么；而我也从不关心他工作上\r\n背负的压力，以及他究竟对我有些什么期望等。不仅如此，就连工资、奖金多一点少一点带来的心理不平衡，我也不会流露出来，更别说抗争。那时的我和大多数职\r\n场新人的想法一样，不会刻意讨好老板，也不会和老板作对，也就是“说什么我都照做就OK了”。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;后来我换了家公司，是一家在业界很富名望的外\r\n企。我的新老板比我大不了几岁，他给我留下的印象是“爱玩，开一辆二手‘大切’，霸气”。他总是在给大家安排任务时和我们唠唠家常，偶尔还会在小黑屋里两\r\n人一起聊点严肃的话题。起先我并不适应，还会把自己遮得很严，不怎么敞开心扉，后来逐渐放开了些。有次他邀请我参加他的几个同事朋友的私人聚会，这令我受\r\n宠若惊又有点不安，半推半就下最终我还是出席了。大家在河边烧烤，聊着各自的家庭、生活、事业和理想。回来的路上，我看到了他野性的一面：途中有辆“马\r\n六”危险超车险些出事故，这惹恼了他，一路猛踩油门狂追，嘴上还骂骂咧咧，全然不顾他媳妇让他冷静的呼喊。狂追几百米后，那车车主被这气势吓住了，默默靠\r\n边让出车道停了下来。而他驱车靠近那车，摇下窗户狠狠瞪了车主一眼，然后扬长而去……\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;这次聚会后，我和这位新老板的心理距离似乎被拉近了——我重新认识了我的老板。对我来说，他的形象逐渐丰满起来，开始有血有肉。\r\n</p>\r\n<p>\r\n	了\r\n解老板（及其诉求）很重要。了解老板的性格特点、工作经历、家庭情况甚至是喜欢吃什么等这些小的细节，有助于你把他当成和自己一样平等的一个人去看待。这\r\n就是为什么有人在台下聊天能滔滔不绝，而一上台发言就磕磕巴巴无所适从？尽管可能面对的人群未变，但“走上台”也就意味着这种平等、亲密的关系被打破。和\r\n老板相处之道也类似，越是将老板放在高高在上的位置，如同图腾一般，你就越无法和他有正常的关系。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">管理双方的目标和期望</span></strong>\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;后\r\n来在我和老板间的One One \r\nTalk中，我渐渐有话直说。他提出对我的期望，相应地，我也表达出对他的期望以及我的工作目标，然后试图把双方的想法加以协调。老板自然是要管理下属的\r\n期望和目标，但我的经验是：作为下属，你也需要好好管理双方的期望和目标。如果老板对你的期望和你对自己的期望有所偏差，需要及时反馈，同时也需要将你对\r\n老板的期望及时传达。这就像是谈判，老板对你施加影响，你也可以反过来对他施加合理的影响。当然，如果双方的目标差距太大，除非你更换工作岗位，否则需要\r\n以老板的目标为主——因为他是给你定岗发工资的那个人。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;管理双方的期望和目标非常重要。它决定了今后的日子里你工作是否快乐。在年度\r\nReview中，我会明确告诉我的老板我不希望做的事情，比如说监控项目、把握进度等项目经理的工作，当然，紧急情况下需要我协助做是没有问题的，但前提\r\n是不希望这些内容成为我的日常工作。因为我喜爱琢磨技术胜过这些，如果让我去做，即使能做好，也会做得不开心。其实，在这种小问题上，老板一般会让步的。\r\n如果你不表达，老板也许想当然认为你比较适合某某工作，而其实你根本不喜欢，或者他为了你的前途考虑而给你分配这样的工作，那你可是哑巴吃黄连有苦说不\r\n出，只好硬着头皮做，久而久之会厌倦工作从而萌发离开的念头——如果因为这种原因离开一家公司，对大家而言是双输。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;但天下没有不散的宴席。\r\n一个人离开一个团队、一家公司去寻求更好的发展也是一种必然。不要羞于说出自己的想法。以我自己举例，在第二家公司的六年间，我一共换过三个团队。要么是\r\n因为我认为在某种技术上已做到瓶颈了，再继续就是重复劳动；要么是因为公司的需要，安排我接手某个团队。总之，无论换团队还是换公司，不用藏着掖着，把你\r\n自己背后的想法和原因直截了当地跟老板沟通，很多时候会有意想不到的收获。\r\n</p>\r\n<p>\r\n	2008年初，我感觉自己在当时的Team中已做到最好了，再继\r\n续下去的动力不大，于是找了几家公司开始面试，最终决定去其中的一家。之后我将准备离开的想法和背后的原因直接跟老板谈了谈。当时我认为早点提出让彼此有\r\n个准备，尤其是将工作交接做得更平滑些。交谈中，直接老板看我去意已决并无太多阻拦，反而给我很多不错的建议，此外还让我谈谈对他的工作的建议。之后大老\r\n板又找我深入地谈话，这次谈话中，他帮我发现其实我想要的东西目前的公司都能提供：薪水、成长、空间。他还重点提及公司的创业文化和基因，以及我在公司中\r\n积累下的口碑和人脉。最后他让我休息几天，仔细分析利弊，做个SWOT分析后再综合考虑。而我照着做了——列了整整两页纸，最终的决定是留下来。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;这\r\n种分析的思路后来对我考虑问题帮助很大，有类似问题时我还会详细地做SWOT分析，综合各种输入，想明白后再做决定。很多人跳槽仅仅为了20%~40%的\r\n涨薪，这样其实并不值。换团队或公司是为了实现个人财富（价值）的提升，而薪水仅仅是财富的一部分，还有很多其他的比如说人脉等，这些无法用薪水估量。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;英语中有个短语叫“mutual respect”，就是指相互尊重，在管理的课程中经常提到。老板和员工相互尊重的基础是相互了解、信任。作为员工，不要被动地等待这一切的发生，通过自己工作上的努力，通过敞开心扉、直截了当地沟通，去主动寻求“被尊重”。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">管理老板的时间</span></strong>\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;每\r\n个人的时间都是有限的，事情越多，可分配的时间就越少，而老板的可分配时间更是如此。我现在的老板管理跨越不同时区的几个大团队，每天忙得不是在会议室里\r\n开会，就是在去会议室的路上。当他来北京出差时，我们还常常能有一些时间聊聊；当我到总部出差时，却连见一面的机会都很少。所以作为员工，你要懂得管理老\r\n板的时间——主动地要求他们在日程表上匀出“为你服务”的时间。否则，一忙起来，他们就会把你的事忘得死死的。\r\n</p>\r\n<p>\r\n	我一般会主动和老板约见面的\r\n时间。频度每月至少定期聊一次，大约半小时。这听起来似乎并无特别，但想象一下对于要管理数十人团队的人，每月不计其数的会议，这点时间真称得上弥足珍\r\n贵。当提出约见如果我老板说不行，我会退让请他给出合适的频度和时间点。这里有个小技巧，《影响力》一书中提到过一种谈判技巧：先提出不那么合理、对方肯\r\n定会拒绝的方案，等拒绝后再抛出一个较为合理的方案，那么达成一致的机会要大很多。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;我不仅会跟直接老板要时间，还会跟老板的老板，甚至有可\r\n能的话，跟跨两三级的老板约时间聊聊。工作中总会有各种各样的疑问，找些人聊聊会有很多意外的收获。而实际中很多工程师除非逼不得已，否则绝不会找大老板\r\n跨级聊天，他们认为这样做并不妥，有打小报告的嫌疑，或者觉得根本没有必要。其实不然，在企业中工作，要尽可能利用一切的资源帮助自己成长，让自己增值。\r\n很多人想成为更好的工程师，也有不少人想成为一名管理者，这都是很好的想法。但仅仅是坐在那儿自己琢磨或者抱着一堆书学习是远远不够的，你需要善于利用过\r\n来人的经验。不少公司会给初入职场的人分配Mentor，但这仅限于初入职场的人。其实纵观一个人的职业生涯，无论走到哪种位置，都需要Mentor或者\r\nAdvisor。孔子说：三人行必有我师。何况是比自己阅历更为丰富的老板们呢？同样的一个疑问，把它抛给不同级别的老板，你会得到不同程度的见识\r\n（insight）。如果从这个角度看待问题，你还会觉得找大老板跨级聊天是件不妥的事情吗？所谓身正不怕影子斜，心里没鬼，什么时候腰板都挺得直。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">公开支持，私下质疑</span></strong>\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;谈了这么多，我想越讲越明白——老板就是一个实实在在的人，他会有正常人拥有的七情六欲，也会有正常人都会有的各种缺点。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;当\r\n你跟好朋友私下在一起时会无话不说，常常毫不留情地批评对方。批评的程度越深，说明你们间的信任度越高。但在公开场合，尤其是很多不那么熟悉的朋友面前，\r\n你肯定不会毫不留情地把他的缺点暴露出来，因为那样会使对方下不来台。当好友需要支持和鼓励时，你除了会在私底下提供各种各样的支持，往往还会在公开场合\r\n对他支持，这种公开的支持和鼓励弥足珍贵，如雪中送炭，好友会非常感激。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;好朋友尚且如此，其他人更不必说。所以，跟老板提意见时，最好在One One Talk时，两人心平气和地摆事实讲道理。在外企中，直言不讳是大家比较接受的方式。所以私底下我常常会比较直接地跟自己老板说某件事该怎么做不该怎么做。你可以根据自己的实际情况处理。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;当老板需要支持和鼓励时，也是同样的道理。只要你认同，那么公开场合就应该旗帜鲜明地支持他。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;最后，总结一下管理老板的方法。\r\n</p>\r\n<ol>\r\n	<li>\r\n		<span style=\"background-color:initial;\">了解老板（及其诉求）并构建双向关系。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">管理双方的期望和目标。如果老板对你的期望有所偏差，及时反馈；同时将你对他的期望及时传达。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">管理老板的时间。每个老板的时间都不是均匀分配给所有员工的，你可以要求定期一对一沟通，要求更多的时间和心思花在你身上。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">公开支持与鼓励，私下质疑与建议。</span>\r\n	</li>\r\n</ol>\r\n<br />', '', '', '', '', '', '', '1', '1', 'http://www.csdn.net/article/2014-08-26/2821384', '1', '2015-01-09 09:11:14');
INSERT INTO `yov_source` VALUES ('10012', '管理人力资源', '管理 人力资源', '&nbsp;&nbsp;&nbsp;&nbsp;作为管理者，我们多数人很容易陷入一种典型的失败情境：习惯把人当作固定的模块来管理。由于长年累月对模块化方法的依赖，新晋的管理者很少会怀疑是否能沿用同样的方法对人力资源进行管理。很不幸，这常常并不奏效。<br />', '<h3>\r\n	<span style=\"font-size:14px;color:#333333;font-weight:normal;background-color:initial;\">&nbsp;&nbsp;&nbsp;&nbsp;作\r\n为管理者，我们多数人很容易陷入一种典型的失败情境：习惯把人当作固定的模块来管理。当然，这种惯性来源显而易见。回顾我们在走上管理岗位之前所做的准\r\n备：我们之所以被认为具备管理者的素质，是因为作为办事员、技术员或开发者的我们所表现出来的良好绩效。这样的绩效得益于我们能够将资源划分为模块，例如\r\n软件的过程、电路板或其他工作单元。我们用黑盒的特性来构建这些模块，从而达到屏蔽模块内部特性的目的。设计这些模块，使得它们可以通过标准接口来使用。</span>\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;由于长年累月对模块化方法的依赖，新晋的管理者很少会怀疑是否能沿用同样的方法对人力资源进行管理。很不幸，这常常并不奏效。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在第一部分，我们一起来探索一种迥然不同的思考人及管理人的办法。这种办法考虑的是怎样去适应人的“非模块化”特征。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">干酪汉堡，做一个，卖一个</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;开发的本质完全迥异于生产。然而，开发管理者的思想却通常被生产环境衍生而来的管理哲学所左右。\r\n</p>\r\n<p>\r\n	假设你是一位本地快餐店的老板，那么采用如下任何一条或多条高效生产度量都是合情合理的：\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">·压缩出错率，让机器（“人”这台机器）能够尽量平稳地运转。</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">·对工作上犯错的员工采取严厉手段。</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">·把工人当成是机器上可替换的部件。</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">·优化稳定状态。（根本不用考虑运行是怎样开始的，或者需要怎样去终止运行。）</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">·标准化流程，让一切有章可循。</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">·消灭试验——总部那帮家伙就专门干这事儿。</span> \r\n	</li>\r\n</ul>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在快餐行业（或者任何生产环境），这些都是司空见惯的合理手段，但对你来说不是。这种“干酪汉堡，做一个，卖一个”的思维观念在开发领域是致命的。这种做法只能让你的团队士气低落，让他们无法将精力集中到真正的问题上。这种管理风格与开发工作水火不容。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;要管理脑力劳动者，你需要与前面走的路背道而驰。我们提出的相反做法会在下面几节详述。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">错误在所难免</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;对于大多数脑力劳动者来说，工作偶尔出错再自然不过，也很健康，没什么危害。但总有些教条主义者会把工作中的错误和罪恶联系起来。我们需要采取措施去改变这种态度。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;面对一群软件开发经理，我们介绍了一种迭代式设计的策略。这个想法是针对那些天生容易出错的设计的，我们应该彻底抛弃而不是去修复。这种设计活动上的死胡同是我们可以预期的，而为此付出的成本却微不足道，不过就是从头再来，轻装前进。令我们感到惊诧的是，\r\n    许多管理者觉得这是给他们老板出了一道不可能解决的政治难题：“我们怎么能丢掉公司付钱生产的产品呢？”他们好像更相信我们应该补救这个有缺陷的版本，即使从长远来看，我们可能会付出更多。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;营造一个不容许任何失误的氛围会让大家持有戒心。他们不愿去尝试那些有可能变坏的事情。当你试图体系化流程时，当你倾向于墨守成规时，你就在强化这\r\n种戒心，于是大家就会人为地被禁止做出关键的战略决策，因为他们害怕犯错。在不允许犯错的规定下，或许平均的技术水平会稳步提高，但团队的社会氛围却会遭\r\n受可悲的伤害。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;相反的做法是鼓励大家犯错。你可以不时问问大家遭遇了哪些死胡同，并明确地让大家明白：最佳答案并非是“没有”。当有人说了出来，应该祝贺他们 ——\r\n    这是他们应得的。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">管理：傻瓜定义</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;管理的复杂度使得我们很难简单地定义它，但在伦敦的一次专业学术组织大会上，我们遇到的一位资深管理者让这些细微差异变得荡然无存。他用一句话总结\r\n了他对这个主题的观点：“管理就是踢屁股。”这等于说管理者负责全盘思考，而他的手下就照章办事。这种想法可能对于制作干酪汉堡会奏效，但在依靠脑力而非\r\n体力的环境中是没有用的。在这样的环境，每个人都要带着脑子工作。踢他们的屁股，可能会让大家行动起来，却不可能让他们去创新、创造以及思考。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;即使向人们施压可以增加短期产出，长远来看还是无效的：对于所有工作者来说，若是因为他们感到动力不足而需要老板来“弥补”，没有什么比这更让人沮丧的了。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;最可悲的是，这种管理手段几乎永远都会让生产过剩。你根本不需要使用严格的度量来促使大家工作——大部分人是热爱他们的工作的。你有时可能需要采取一些手段让大家少工作一会儿，这样就可以做一些更有意义的工作（更多想法参见第3章）。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">稳定的项目濒临死亡</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;稳定的生产思维对项目工作尤为有害。我们很容易忘记项目生命周期的最终目标就是要结束自己。一个项目唯一的稳定期就是将死之时。除非你正在一个被取\r\n消或将要取消的项目中，所有的项目管理关注点都应该投入到开发的动态调整上。然而在一个新项目中，我们衡量员工的价值却使用了稳定状态下的特征：他们写了\r\n多少代码或者产出了多少文档。我们对于每个员工在整个开发投入中的切合度关注甚少。\r\n</p>\r\n<blockquote style=\"margin-left:3em !important;font-style:normal !important;color:#777777;\">\r\n	几\r\n年前，在我教授一堂企业内部设计课程时，一位高级管理者抓住我，要我评估课堂的学员（他项目上的员工）。他对一位女士尤为好奇，毫不掩饰对她的质疑：“我\r\n看不见她给项目带来的贡献，她不是一个好的开发人员或测试人员，或者任何其他专业人员。”在做了一些调查后，我发现了一个引人注目的事实：在她<span>12\r\n年的公司生涯中，她所在的项目没有一个不是获得巨大成功的。她的贡献不是很明显，但她所在的项目总是成功了。在课堂观察了她一周，并与她的同事交流过后，\r\n我得出一个结论：她就是一个超级催化剂。她的存在使得团队内部更有黏度。她帮助团队成员互相交流和相处，有她的项目会变得更加有趣。当我试图向那位管理者\r\n阐述这一理念时，我被震惊了：他居然不知道催化剂这个角色在一个项目中的重要性。<br />\r\n</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;——<span>TDM</span>\r\n</blockquote>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;催化剂很重要，因为项目总是处于不断变化的状态。一个能够让项目更稳定的人抵得上两个做事的人。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">我们只是做事，没时间考虑工作自身</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;如果分配给你一个任务，你会花多少时间来真正实施这项任务？不可能百分之百。实施之前肯定需要做一些头脑风暴，调研新方法，找到规避一些子任务的方法，阅读相关材料，培训，还有试错。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;回首我们作为管理者的那些年，我们都没有正确地认识到这一点。我们都花了太多时间去做事，却没有花足够的时间提出关键问题，“这件事到底该不该\r\n做？”稳定阶段的干酪汉堡心态使得我们根本没有去思考这项工作。这种心态会推着我们把百分百的投入放到实施状态。倘若真要为没有思考时间寻找借口，那么这\r\n个借口永远都是时间压力——就好像还有什么工作可以在没有时间压力的情况下完成似的。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;随着更多利益的介入，思考方法的重要性也显著提高。正所谓“磨刀不误砍柴工”，我们必须学习如何多花时间在思考上，少花时间在实施上。项目需要的投\r\n入越夸张，成员就越应该学习如何更好地协作，对这份工作的热爱也会变得更重要。项目越是需要在一个无法完成的固定时间交付，项目团队就越不能缺乏频繁的头\r\n脑风暴，或者项目组聚餐之类的活动来帮助团队形成一个统一的整体。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;但是，这些都是人文关怀。每个人都知道怎么做，对吗？错。在做事情上我们都是如此的一根筋。我们花费不到5%的时间在计划、新方法调研、培训、读\r\n书、评估、预算、排期、人员安排这一系列活动上。（5%这个数字来自于对系统开发项目的分析，但这个数字涉及的范围应该更广，可能涵盖了所有拿薪水的工作\r\n者。）\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;关于读书的统计结果让人尤为失望：以软件开发人员的平均水平为例，平均每人没有一本和工作相关的书，甚至没有阅读过一本相关书籍。这种现状让每一个重视质量的人心怀忧虑。对我们这些写书的人来说，简直就是一场悲剧。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">质量——如果时间允许</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;20世纪的心理学理论指出，人类的特征被一系列基本天性控制：生存、繁衍、领地等。这些都是直接植入我们脑子里的。你可以不带任何情绪理性地分析这\r\n些本能（正是你现在做的），但当你感知到它们的时候，总是会带有浓厚的感情色彩。即使对于这些内在的价值观仅有一点小的挑战也会让人感觉失望。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;任何强烈的情绪表达都显示了大脑中的原始价值观受到了威胁。一个新手管理者也许会相信工作可以在不掺杂个人情绪的情况下完成，但只要管理者具备一点点经验，就会知道事与愿违。我们的工作给了我们表达自己情绪的很多机会。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;你想想，总有一次某人的情绪完全因为工作相关的事情而被煽动起来。好好思考这件事，然后反问自己（可能是第n次了），情绪从何而来？若对这件事的背\r\n景一无所知，我打赌，它一定是威胁自信的一大成因。在个人生活中，造成情绪化反应的因素可能很多，然而在工作环境中，主要的导火索就是对自信的威胁。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;我们通常倾向于将我们的自信与生产出的产品质量（并非产品数量）紧紧关联。（因为某些原因，生产出大量质量马虎的产品带来的满足感很小，尽管在某些情况下需要这么做。）采取任何可能牺牲产品质量的行动都可能挑起员工反对你的情绪。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">飞离卓越的航班</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;管理人员设定的不可达到的期限威胁着产品的质量，但他们不会这样去思考这一问题——他们自认为给了团队一个有趣的挑战，可以激发他们去追求卓越。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;有经验的员工（老油条）却不这么想。他们知道，在枪口下，他们的任何努力都是受到约束的。不能自由调配资源，以满足准时交付的要求。要想增加更多的\r\n人，或者减少功能？没门！只有质量是可以降低标准的。当员工处于极度的时间压力之下时，质量就开始被牺牲了。他们会把问题藏到脚垫下面，或者直接扔给产品\r\n的最终用户。他们交付的产品是不稳定、不完整的。他们会讨厌自己做的事情，但能有什么选择呢？\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;一些死板现实的管理者会这样回答上述问题：“我们一些同志会为了‘质量’在一个任务上无休无止，但市场才不管你啥质量呢——昨天就赶着要这个产品了，即使质量粗糙也行。”多数情况下，你对市场的判断或许正确，但通过施压让大家制造出达不到自己质量标准的产品终归是错误的。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;我们这些管理者总是认为质量只是产品的另外一个特性，可以视市场的需求而调整。就像你涂在自制蛋糕上的巧克力酱：想要多点就多涂点，想要少点就少涂点。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;然而，产品制造者对待质量却完全不同。因为他们的自信来自于产品质量，所以会有自己的一套质量标准。对他们而言，要让自己满意，最低标准就是要达到过去做到的最好质量。这当然要比市场要求并愿意为之付出的标准更高。\r\n</p>\r\n<blockquote style=\"margin-left:3em !important;font-style:normal !important;color:#777777;\">\r\n	质量，远远不只是最终用户的要求，而是达到高产能的一种方法。\r\n</blockquote>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;如果你对这点有疑问，想象一下下面的试验：到大街上随便找100个人，问他们认为谁是以高质量著称的组织、文化或者国家。估计一半的人会告诉你是\r\n“日本”。我们再问另外100个人：什么组织、文化或者国家以高效能著称？同样，大多数人还是会说“日本”。这个国家在作为质量领袖的同时，也以高产能著\r\n称。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;等等，高质量怎么可能和高产能并存呢？按常规理论，若要提高产品质量，就必然需要在生产过程中花费更多。为了找到答案，让我们一起来看看两位最受尊敬的评论家田岛（Tajima）和松原（Matsubara）对日本现象的解释：\r\n</p>\r\n<blockquote style=\"margin-left:3em !important;font-style:normal !important;color:#777777;\">\r\n	价格和质量的对立在日本并不存在；相反，高质量带来成本的降低却是被广泛接受的想法。\r\n</blockquote>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">质量是免费的，但是……</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;很早之前，惠普就被认为是一个通过制造者自定义高质量标准而提升生产效率获益的典型组织了。从一开始，惠普就信奉质量。在这种环境下，需要更多时间\r\n或资金来生产高质量产品的说法压根儿就没有出现过。因此，开发人员形成的文化是交付的质量要超越市场的质量要求。他们追求质量的标志成为提高他们工作满意\r\n度的动因，从而拥有行业内最低的人员流失率。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">再谈帕金森定律</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;英国作家诺斯古德·帕金森（C. Northcote Parkinson）于1954年引入了一个概念，认为工作会自动膨胀，占满一个人可以用的所有时间，这被称为帕金森定律。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;倘若你不知道其实很少有管理者接受过管理方面的正规培训，你可能会错以为他们都是科班出身，在学校就学过帕金森定律及其分支理论。即使管理者对管理\r\n一无所知，他们也极为认同帕金森定律这一针对员工及其态度进行管理的公理。定律为他们提供了强有力的证据，只有设定不可能完成的交付日期，才能保证工作的\r\n完成。\r\n</p>\r\n<h4>\r\n	<b><span style=\"color:#e36c09;\">帕金森定律和牛顿定律</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;生命苦短，不能在工作中虚度光阴。只要大家热爱工作，就不可能让一项工作变得遥遥无绝期——这会推迟获得他们向往的满足感。在不需要降低标准、牺牲质量的时候，他们和你一样，期望工作能快点完成。\r\n</p>\r\n<h4>\r\n	<b><span>如果经历了我们的见闻，你就不会这样说了</span></b>\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;每一位管理者在职业生涯中一定会遇到一个员工不想工作，或者完全达不到质量标准，又或者无法完成工作。对此，帕金森定律管用吗？\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在一个健康的工作环境里，要是某人表现欠佳，可能是因为能力不足、缺乏自信，或者无法理解项目中别人的想法和项目目标。通过增加进度压力无助于解决\r\n上述问题。一旦某位员工表现出工作低效，对工作质量漠不关心，就是发出了明确的信号，说明这个可怜的家伙快被工作困难给压垮了。他需要的不是更多的压力，\r\n而是调换工作，或者跳槽到另一家公司。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;即使在极端情况下，依靠某人是唯一的出路，管理者也应该将此作为最后的选择。团队发出的声音会更好。我们见证了一些良好团队的管理者和大家站在一起，共同批评那些不与别人协作的员工。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在随后的几章中，我们会就团队以及怎样促进团队良好的化学反应展开讨论。这里，我们不会讨论什么方法有效，而是讨论什么方法无效：把你的团队成员当做帕金森型的员工是不可能奏效的。这只能消磨他们的意志，让他们失去前进的动力。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-08-20/2821299', '1', '2015-01-09 09:13:53');
INSERT INTO `yov_source` VALUES ('10013', '教训：互联网创业必须避免的八大误区', '教训 互联网 创业 误区', '<strong></strong>&nbsp;&nbsp;&nbsp;&nbsp;新进入的创业者如何尽可能地规避创业路途上的一些大坑？作为过来人的创业者有哪些经验和教训可以借鉴？本文选自《教训：互联网创业必须避免的八大误区》，总结了创业过程中的八大教训以供参考。<br />', '<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;过往的书刊报纸中，有太多的文字用来讲述创业的方法论以及创业者的辉煌故事，实际上，创业本身是一部血泪史。\r\n</p>\r\n<p>\r\n	我们看见的是成功融资、上市、纳斯达克敲钟等各种光鲜，看不到的是创业的种种艰辛以及创业路上遭遇的种种挫折。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;新进入的创业者如何尽可能地规避创业路途上的一些大坑？作为过来人的创业者有哪些经验和教训可以借鉴？我们总结了创业过程中的八大教训以供参考。这八大教训前<span>5个是经营层面的教训，后3个是管理层面的教训。一般来说，管理是服从于经营，经营是选择对的事情做,管理是把事情做对。对创业而言既要选对事情，也要把事情做对，两者缺一不可。</span>\r\n</p>\r\n<p>\r\n	<b>1. </b><b>盲目照搬国外模式　忽视国情不接地气</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;商业模式是创业者在创业初期规划时遇到的首个问题。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;中国互联网过去<span>10年的创业大潮中，硅谷一直是中国创业者的灵感来源。他们习惯于利用硅谷和中国之间的趋势时间差，把硅谷热门的初创公司的商业模式复制到中国。在预计成功复制的同时，也需要考虑在中国市场上遭遇水土不服的风险。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;近几年蹿红的创业公司中，无论是预订酒店剩房的今夜酒店特价，还是面向短租客的爱日租，以及轻博客点点，都在复制美国模式的水土不服中中途折戟，只好另辟他途继续前行。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;今夜酒店特价初期学习的是美国红极一时的<span>Hotel\r\nTonight公司。Hotel Tonight在美国每个城市只做3家酒店，这种精品酒店模式可确保每个酒店都能获得大量的订单，从而加强话语权。今夜酒店特价发展初期，同样采用了每个城市只做少数几家精选酒店的方法，但实际效果却相差很多。为何？</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;今夜酒店特价的模式忽略了中美酒店市场的巨大差异。美国的酒店近<span>80%都是品牌深入人心的连锁店，用户更容易感知到打折力度，而在中国，像如家和7天这样的经济型连锁酒店市场占有率不到20%，独立酒店居多，在消费者不熟悉的情况下，巨大的折扣力度反而会让消费者质疑其体验。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;今\r\n夜酒店特价的模式还忽略了中美交通状况的差距。美国的汽车普及度高，强大的价格因素刺激容易驱动用户开车到较远的地方住酒店，尤其在地域广阔的美国西部和\r\n中部地区。反观中国市场，并非人人有车，而且大城市交通拥堵，这扼杀了多数用户驱车去住很远的低价酒店的冲动。他们更在乎自己身边有什么熟悉的酒店，并且\r\n期望更多样化的比对范围。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;即使富有产品经验的创业者有时候也会跌入同样的陷阱。曾成功运作校内网的许朝军创办了点点网，试图复制国外轻博客网站<span>Tumblr\r\n的辉煌，但事与愿违，点点最终没能达到市场的预期，其他的中国模仿者也都销声匿迹。背后的原因同样是中美经济和文化背景不同导致的用户差异。Tumblr\r\n式的轻博客代表着小众文化，但在美国，生活水平高、假期多又喜欢分享的用户群体大，Tumblr还有国际市场做支撑，这些条件国内的点点网都不具备。再加\r\n上微博和豆瓣两个社交平台都挤压了轻博客的生存空间，创业一年后点点网就陷入了艰难维持的状态。</span>\r\n</p>\r\n<p>\r\n	<b>2. </b><b>自己定义的需求不一定是真需求</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;找准目标用户的真实需求是创业的第一步。创业者起步阶段的市场调研缺少严密的数据分析，而是凭直觉判断，甚至是从自身需求出发判断市场，这中间往往存在着很大的误差。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;曾经创办世纪佳缘网的龚海燕是资深创业者。<span>10\r\n年前，龚海燕创办世纪佳缘的缘由是自己找不到对象，通过世纪佳缘，不仅她自己找到了幸福，也让千万世纪佳缘会员有情人终成眷属。10年后，当龚海燕再用这\r\n种思维路径去思考下一个创业方向时，她想到了自己在英语上的痛点—口语不行，决定再次从自己的痛点着手创业进入外语培训市场。但这种从解决“自我需求”出\r\n发的二次创业失败了。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;龚海燕起初想切入一个比婚恋市场经济效益更大的市场，去找一个更有可能突破的台风口。但是真正投入这个\r\n市场之后才发现困难重重，先是新东方创始人王强认为方向有问题放弃投资，随后在产品设计、公司经营上遇到多重困难。此后龚海燕放弃了外教口语教育，转而选\r\n择了基础教育市场。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;要找出用户真正的需求，不妨参考《精益创业》提倡的<span>MVP（Minimum Viable Product）概念，意即“最简可行产品”—用最快、最简明的方式建立一个可用的产品原型，这个原型要表达出你最终想要的产品效果，然后通过市场检验，快速迭代调整产品。</span>\r\n</p>\r\n<p>\r\n	<b>3. </b><b>曾经的经验是财富也可能是“包袱”</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;创业者过去的成功经验代表着一段时间的总结，但会陷入思维定势和路径依赖。知名天使投资人保罗<span> \"格雷厄姆（Paul \r\nGraham）曾经总结过创业公司的发展曲线：在创业初期，创业公司往往都处在一个急速上升的曲线，而且这时候创业者还没有碰过壁，处于“无知的乐观”之\r\n中；但是在经历了最初高速发展之后，创业公司会面临越来越多的问题，公司开始进入“创业绝望谷”，多次碰壁之后创业者会进入“有知的悲观”。大众点评的二\r\n次创业是这个创业曲线的典型代表。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;成立于<span>2003年的大众点评网，在创业的前7年中，一直不温不火，直到遇上了\r\n移动互联网，才开始焕发青春。2010年，大众点评开始往移动互联网方向转型，其中大众点评业务上发生的最大变化就是由过去的广告业务，开始涉足团购等本\r\n地生活服务。由于大众点评通过多年的积累，已经拥有大量商家信息，因此被外界认为是最适合做本地生活服务的公司。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;其实模式有\r\n很大不同。大众点评一直是和商家在打交道，过去希望商家在大众点评上做广告，这是一种内容或者媒体模式。而团购虽然也是和商家打交道，但却是希望商家来这\r\n里卖东西。这两种模式看似一致，但实际执行中很不一样。大众点评在进入团购领域后，还是按照原来经营慢公司的做法，没有第一时间快速拓展城市，而且认为三\r\n四线城市用户没有团购的需求，但后来发现错了。三四线城市的消费者不喜欢点评或者查找餐厅，并不意味着消费者不希望省钱。\r\n</p>\r\n<p>\r\n	<b>4. </b><b>环境巨变固步自封出危机</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;创业企业的致命危机往往在于当市场变化时没有及时调整，从而被用户抛弃。曾经红极一时的开心网、维络城都是如此。\r\n</p>\r\n<p>\r\n	当初开心网凭借“偷菜”、“争车位游戏”风靡全中国，抢占白领市场，成为<span>SNS市场与人人网齐名的社交网站。但开心网蹿红后，遭遇了“真假开心网”之争和新浪微博上线两道坎。无论是山寨开心网的人气分流，还是新浪微博上线，都让开心网元气大伤。与此同时，开心网内部创新不足，在红极一时之后，没有超越2009年之前的创新。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;主打优惠券业务的维络城也同样遭遇了过山车般的窘境。随着移动互联网时代的到来，维络城传统的打印纸质优惠劵的核心业务逐渐被手机<span>App所取代，面对这样的环境骤变，维络城没能及时调整并开展新的业务。这让维络城的失败几乎成为了必然。维络城全盛时期，其在北京的终端设备数量最多时曾超过1 500个。但后来，网点只剩下两位数。随着终端机器的消失，维络城公司也从最高峰时的2\r\n000多人缩减到与嘀嗒团合并前的不到200人。</span>\r\n</p>\r\n<p>\r\n	<b>5. </b><b>大规模转型风险高</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;前面讲了固步自封带来的危害，但不断调整市场定位、重构产品，风险也同样非常大。这就让创业者们饱受着“等死”和“找死”的双重煎熬。把握好“变”与“不变”的度是创业成功与否的关键。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;垂\r\n直互联网市场的成功者比比皆是，比如旅游市场的携程、房产市场的搜房网等，垂直市场成功的前提往往在于：细分市场规模足够大、标准化程度高以及有一定的行\r\n业壁垒。创业者对垂直市场的判断容易出现偏差，一些垂直市场往往貌似存在机会，但事实上只是暂时的空白，一旦成为横向整合者的目标，创业者的市场空间就会\r\n失去。比如鞋类电商乐淘一度是垂直电商的代表之一，随着天猫、京东进一步做大，成为横向扩张能力更强的大平台，它就被迫开始转型。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;乐淘的转\r\n型选择从渠道制转变为买手制，并且经历了一次次的内部结构大调整、整个供应链换血以及变相裁员。做自有品牌的方向本身没有错，但在执行上过于极端。原有的\r\n鞋类电商平台被砍掉，新诞生的自有品牌缺少强大的母体支撑。其实本可以在原有平台运营的基础上植入自己的品牌，慢慢养，同时去各大渠道分销。另外，乐淘一\r\n气推出<span>5个品牌的方式也过于激进了。尚显年轻的运营团队无法驾驭5个品牌。在一些有着丰富经验的传统鞋类企业来看，做一个品牌就非常不易，同时做5个品牌是异想天开。就这样，乐淘销声匿迹了。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;创业者选择方向时，进入一个相对蓝海的创业领域是可行的。但这个领域与自身的能力、创业过程中可以调动的资源是否相匹配则是更需要考虑的。创业者往往忽视了后续的资源支撑能力，一旦发现这个方向不可取，只能选择转型。公司一再转型则意味着整体系统风险的随时降临。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;点心作为创新工场的首个毕业生，一度笼罩着各种创业光环。它是创新工场家族中第一家注册的公司，也是第一家毕业的创业项目。作为最早杀入手机操作系统市场的创业公司，点心很快遇到<span>ROM\r\n的红海。点心希望和三星等大厂商合作，但最终只有夏普等二线手机厂商同意和它一起试水。与此同时，点心既没有建立起自己的核心粉丝群，产品版本迭代速度也\r\n很缓慢。最终其发现做ROM不是自己所擅长的，随即从硬件合作生产回到手机软件Android系统工具优化。在随后的转型中，点心又遭遇ROM和\r\nAndroid系统工具二选一的抉择，最终选择了Android系统工具的方向，把最早的手机OS产品线打包出售。为了进一步提升自己的商业化水\r\n准，2013年年初，点心接受百度的战略投资，进入安全市场。</span>\r\n</p>\r\n<p>\r\n	<b>6. </b><b>快速成长下的过度膨胀和管理失控</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;比\r\n起初创公司的艰难，有另外一类公司作为一个互联网细分行业（比如电商、团购）的拓荒者，借势中国经济和消费崛起，依仗一轮又一轮融资等因素有着完美的开\r\n局，但在陡峭增长曲线背后却隐藏着种种危险：大规模烧钱导致巨额亏损，公司人员极速扩张，素质却良莠不齐，迷信营销的力量而忽视更基本的质量问题……公司\r\n如同直插云霄的火箭突然失去动力急速下坠，在高速扩张中，失控的风险急剧增加。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;凡客诚品和拉手网便是其中的典型案例。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;成立于<span>2007\r\n年的凡客诚品，曾经是快公司的典型样本。“我是凡客”等凡客体风靡之时，2009～2010年凡客迎来了疯狂扩张，但随之而来的是巨大的管控漏洞：数亿积\r\n压库存报损、被销毁或低价出售；由于过分扩张品类，凡客早期清晰的服装品牌定位逐渐模糊，供应商和质量管理出现失控；人员急剧增加，但很多员工无所事\r\n事……在获得雷军等投资人的新一轮资金后，凡客开始了一场“小米式的变革”，但越来越多的迹象表明，凡客已经无法通过常规手段收复失地。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;拉\r\n手网的快速跌落类似凡客。作为国内团购市场早期曾经占据头把交椅的公司，拉手网从成立到递交上市申请不足两年半时间，但在经历了巨额的融资和高速的发展之\r\n后，其为冲击上市扩大规模和业绩，造成内部管理混乱，完全靠烧钱扩大市场份额，在上市受阻后迅速陨落，跌出了国内团购市场的第一阵营。\r\n</p>\r\n<p>\r\n	<b>7. </b><b>“兄弟义气”埋下团队内讧隐患</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;创业公司获得风险投资（<span>Venture\r\nCapital，简称VC）的青睐无疑是获得认同的可喜的一步，但公司创始人之间以及投资方和公司管理层的关系也变得更加复杂。投资人和管理层之间存在矛盾冲突，以及创始人内部的股权分配失衡，均会增长创业企业的不确定性，母婴用品起家的电商红孩子即是一个典型样本。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;徐沛欣、李阳、杨涛和马建阳几个好兄弟一起创办了红孩子，形成了<span>CEO+3\r\n的管理格局，四人性格互补，徐、李、杨、马四人组成的红孩子核心团队的协同作战能力也成为风险投资商相信红孩子的一个重要条件。在引入多轮融资之后，从\r\n2006年开始，红孩子创始人之间的矛盾开始发芽。在获得风险投资后，徐沛欣的话语权逐步加大。此时，李阳、徐沛欣的战略分歧也在日益凸显。是继续专注于\r\n母婴用品市场，还是引入化妆品、3C（China Compulsory \r\nCertification，中国强制性产品认证）等品类做综合B2C（Business to Customer）？李阳坚持前者，徐沛欣坚持后者。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在二人矛盾无法调和后，风险投资方支持徐沛欣，杨涛也选择站在徐沛欣一方，董事会决定让李阳和妻子王爽离开。另外两位创始人也因为内部原因而离开后，创始人团队只剩下被认为代表资本意志的徐沛欣。<span>2012年9月，苏宁宣布以6 600万美元收购红孩子，红孩子变成苏宁的母婴频道。</span>\r\n</p>\r\n<p>\r\n	<b>8. </b><b>过于依赖合作伙伴的模式迟早出问题</b>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;很多创业者在前期创业的时候都会因为资金准备不足、环境因素等而选择创业合作伙伴。选择创业合伙人也是一项技术活，选的如果不好，就会导致创业的失败。巨鲸便是因谷歌中国而崛起，也因谷歌中国而衰亡。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;巨鲸由姚明、姚明经纪人章明基及陈戈共同参股成立，三方出资规模达到<span>2 000万元。借助姚明巨大的明星效应及音乐正版说服力，巨鲸很快又遇到“贵人”—谷歌中国，双方一起推出谷歌音乐搜索。这一合作不仅使巨鲸获得1 500万美元的投资，更重要的是让巨鲸获得巨大资源和收入。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在谷歌中国入股并达成音乐搜索合作后，巨鲸彻底傍上了谷歌中国的大腿，失去谷歌中国技术、流量、资源支持后，巨鲸又一直对谷歌心存幻想，未能拿出有卖点的产品，未体现出新发展思路，导致自身在陷入被动后迟迟无法扭转危局。<span>2010年，谷歌宣布退出中国，让一切戛然而止。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;另一家公司云云有着类似的遭遇。作为一家谷歌精英创办的搜索引擎公司，云云本想依托早期投资方新浪这棵大树进入社交搜索领域。本来，在搜索市场格局大致已定的情况下，去做社交搜索就有些堂<span> \"吉诃德式的冒险，新浪微博的资源也不能充分满足云云团队做大的希望，云云创始团队最终只能出走。</span>\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-08-07/2821101', '1', '2015-01-09 09:16:35');
INSERT INTO `yov_source` VALUES ('10014', '高效能技术团队的协同工具箱', '技术团队 协同工具', '&nbsp;&nbsp;&nbsp;&nbsp;使用适合团队的协同工具，不但能使工作按预定成本如期顺利推进，而且能实现对团队成员、项目过程以及产品等的分析管理。未经调研就选择别人认为好的工具，很可能遭遇“水土不服”。<br />', '<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;谈到团队管理和项目管理，工具是必不可少的一环，本文就来谈谈什么样的工具可以帮助我们提高效能。每家公司的情况不同，选择的工具也不尽相同。所以\r\n根据公司自己的需求和情况，选择或开发不同的工具时，不要未经调研就选择别人认为好的工具。工具是为人和团队服务的，它的出现是帮我们解决问题，要从问题\r\n出发找解决方案，而不是为了使用某种工具而使用。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;本文基于敏捷项目管理介绍我经历的团队和组织使用过的项目管理工具，附带描述一下有利于团队协作的其他工具。\r\n</p>\r\n<h2>\r\n	<strong><span style=\"color:#e36c09;\">项目管理工具</span></strong>\r\n</h2>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在多年的敏捷项目管理中，我曾经使用过Rally、JIRA、Trello和物理白板。文中介绍的工具并不代表在某种条件下一定是最好的使用工具，还需根据实际情况来具体考量。\r\n</p>\r\n<h3>\r\n	工具选择与使用\r\n</h3>\r\n<h4>\r\n	Rally的使用场景\r\n</h4>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">上千人的研发规模。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">多层次的团队组织结构。公司的组织上，有不同的产品线和业务线，每一条产品线/业务线也有子的产品线/业务线，每一条子的产品/业务线有多个研发团队组，每一个研发团队组有多个Scrum团队。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">公司整体的蓝图（RoadMap）需要跨产品线合作和跨团队合作。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">团队成员跨地域。大概有80%的Scrum团队成员不是在同一个城市。</span>\r\n	</li>\r\n</ul>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;基于以上这种背景，公司可考虑使用Rally作为项目研发的管理工具，包括项目进度管理和规划、数据统计和缺陷跟踪等。\r\n</p>\r\n<h4>\r\n	JIRA的使用场景\r\n</h4>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">两百多人的研发团队。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">公司团队层级比较简单，不同的业务线或产品线下有1~2个Scrum团队。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">某些项目需要跨团队合作。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">个别团队成员跨地域。</span>\r\n	</li>\r\n</ul>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;对于基于以上这种情况的公司，可以使用JIRA+Greenhopper插件作为项目管理工具。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA和Rally有很多相似性，后面将详述彼此的优点和不足。\r\n</p>\r\n<h4>\r\n	Trello的使用场景\r\n</h4>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">虚拟团队，团队成员在不同的办公室或在家办公。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">开发步骤相对清晰固定。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">团队使用Kanban流程。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">不需要系统管理对外依赖关系。</span>\r\n	</li>\r\n</ul>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在很多敏捷社区的虚拟团队中，团队成员使用Trello这种免费的 、操作简单的工具协同工作。\r\n</p>\r\n<p>\r\n	<span style=\"background-color:initial;\">该款工具的主要优点如下。</span>\r\n</p>\r\n<ol>\r\n	<li>\r\n		<span style=\"background-color:initial;\">界面简单，上手容易是Trello最大的优点。可以很容易地在主界面中任意的一列添加一个任务，而不需要单独打开某个页面。就算打开某一个任务页面，里面也可以直接进行修改和添加注释。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">用不同的标签颜色，肉眼容易识别出不同的卡片分类。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">方便地添加任务负责人，在每一个卡片上创建待办列表。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">在注释中提到某个人时，则会相应地收到邮件，而且在被提及人打开Trello时也会收到提醒。</span>\r\n	</li>\r\n</ol>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;对于简单的项目管理来说，Trello非常好用，几乎不需要学习成本，但其本身的功能简单有限，如果需要复杂的管理需求，这款工具就并不合适了。例如任务分解、进度管理、产生报表、自定义视图、依赖关系管理及数据跟踪等这些方面都不支持。\r\n</p>\r\n<h4>\r\n	物理白板的使用\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;这是我最喜欢的一种项目协调方式，它不仅有利于团队协作，对于创建团队氛围也有不可忽视的功劳，其适用于以下场景。\r\n</p>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">上百人或几百人的研发规模，团队结构层级简单。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">团队成员在同一个办公室而且座位集中在一个区域。</span>\r\n	</li>\r\n</ul>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;物理白板不是使用某种软件工具，而是在团队的座位附近用一块白板来管理团队的项目。主要优点如下。\r\n</p>\r\n<span style=\"background-color:initial;\">\r\n<ol>\r\n	<li>\r\n		<span style=\"background-color:initial;\">透明，随时可见。不需要在电脑中打开某个软件系统就可以清晰地看到团队研发的进度、燃尽图、有哪些阻碍因素。尤其是醒目的障碍，每天都会清晰地看到，便于团队跟踪。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">及时更新。每天站立会议，大家站在附近边说边更新。而用软件工具，则还要提醒工程师们打开软件，更新进度和情况。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">有利于沟通。经常见到团队成员在白板前讨论某一个用户故事的实施细节。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">完全自定义。任何一款软件，就算满足大众的要求和某些自定义的要求，做到所有团队的完全支持还是很少。而物理白板则可以让团队根据自己的情况，自己设计白板显示哪些内容，用什么颜色，有多少工序等。</span>\r\n	</li>\r\n</ol>\r\n</span>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;但物理白板在使用上有一定的局限。\r\n</p>\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">跨地域团队不合适，无法共享相应的信息。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">需要自己手工准备数据，例如用户故事、燃尽图、整个项目进度的管理。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">公司领导需要到白板前了解开发进度，或者团队成员单独制作进度报告向领导报告。有个别公司的领导认为这是一个好工具，他会不时地在办公室走一圈，就了解了所有团队大概的开发进度。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">做完的用户故事/任务没有管理，整理文档复杂。不过有些专家曾经讨论过做完的用户故事存不存档是否有必要，因为我们可交付的软件已经就是一份文档。不在这里争论孰对孰错，如果你们公司需要这些内容，则这款工具有一定的局限。</span>\r\n	</li>\r\n</ul>\r\n<h3>\r\n	JIRA与Rally的优点及局限\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA和Rally各有优点和局限，下面从项目管理的需求和使用出发，分别进行描述。\r\n</p>\r\n<h4>\r\n	操作与使用\r\n</h4>\r\n<p>\r\n	<b>&nbsp;&nbsp;&nbsp;&nbsp;用户故事的查看与修改：</b><span style=\"background-color:initial;\">如图1所示，在JIRA中，信息都显示在一个页面上，清晰可见，例如负责人、描述、多少任务及状态、哪些依赖关系、多少缺陷、所有人的注释等。个别不常用的信息只有在编辑状态才可以看见。而哪些属于常用信息，哪些属于非常用信息完全可以自己定制。</span>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201407/16/53c5f2fc63afc.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201407/16/53c5f2fc63afc_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图1 &nbsp;JIRA与Rally的故事查看界面比较\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;而在Rally中，打开某个用户故事，按照不同的属性页分类，主页显示主要内容，其他属性页显示其他内容。需要一个一个点击才能查看到具体内容，例如该用户故事有多少任务，状态分别是什么等。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在JIRA中打开某一个用户故事，对于常用的内容可以在上面直接编辑，编辑后即保存而无须点击保存按钮。对于不常用的一些编辑，需要用编辑功能打开一个新的页面编辑。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;而在Rally中打开某个用户故事必须点击编辑功能，重新打开某个网页才可以进行编辑。对于某些选项需要用搜索功能，而搜索功能需要打开另一个页面查找。例如添加父类信息需要搜素。在这方面JIRA的操作性会比较好。\r\n</p>\r\n<p>\r\n	<b>同时修改多任务</b><span style=\"background-color:initial;\">：JIRA有批量处理功能，对于一批类似的修改可以通过批量修改实现，例如统一修改多个任务状态为“关闭”，或者统一修改发布时间为同一时间，如果修改多个故事、任务为不同的值，则需要一个一个处理。</span>\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Rally支持多个用户故事、任务同时编辑。例如在计划会议中，利用多任务编辑功能可以方便地编辑任务的负责人、故事点，而不需要单独打开这些用户故事、任务页面进行单独编辑，并且可以设定不同的值。\r\n</p>\r\n<h4>\r\n	项目结构\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA的项目结构没有层级概念，是扁平化的。如图2所示，所有的项目是一层。从某种意义上来讲也就无法实现Scrum of Scrum的开发模式。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201407/16/53c5f347b5a16.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201407/16/53c5f347b5a16_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图2 &nbsp;JIRA与Rally项目结构对比\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Rally的项目结构目录支持多层嵌套，公司根据Scrum团队的分布，可以在Rally中创建符合要求的项目目录。例如公司层面下可以看到业务线（BL）→子业务线（SBL）→研发团队组（DG）→研发团队（DT）。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Rally中同样有查询团队和人员的功能，在Track→Team Member Search中，输入某个人或某个团队就可以查询到相应的信息。例如PO、Scrum Master和团队其他成员。\r\n</p>\r\n<h4>\r\n	蓝图（RoadMap）、史诗（Epic）与用户故事的关系\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在JIRA中，用Greenhopper可以建立史诗（Epic），并在Epic下创建用户故事，然后在用户故事下创建多个任务。但并没有明确的蓝图的概念，不支持多层嵌套结构。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在\r\nRally中支持任务的多层级展示，可以显示公司的蓝图与团队或团队之间任务间的关系。在本公司，每一个业务/产品线会有第一层级的蓝图，子的业务/产品\r\n线或者研发团队组会有第二层级蓝图。每一个团队会有自己的史诗（Epic）和用户故事（User \r\nStory）以及子的用户故事。对于中间层级的“任务”都会有父类和子类，整个结构就像一棵树一样，有了根就知道枝干，有了枝干知道子枝干，有了子枝干知\r\n道叶子……因此也就容易知道整个蓝图的研发情况。\r\n</p>\r\n<h4>\r\n	冲刺计划\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA和Rally都对冲刺计划提供了很好的支持，通过在界面的简单拖拽就可以放到某一个迭代计划里面。相比之下个人认为JIRA的操作更加方便一些。\r\n</p>\r\n<span style=\"background-color:initial;\">\r\n<ul>\r\n	<li>\r\n		<span style=\"background-color:initial;\">提供一些快捷键，可以快速地将某一个用户故事放入最顶端或最底端（排优先级很方便），尤其是在产品目录有非常多的条目时。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">通过拖拽某个迭代条可以快速选择前面多少用户故事为当前迭代，而在Rally中则只能一个一个拖拽某个用户故事到某一个迭代，如图3所示。</span>\r\n	</li>\r\n</ul>\r\n</span>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201407/16/53c5f38716936.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201407/16/53c5f38716936_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图3 &nbsp;JIRA与Rally迭代拖拽对比\r\n</p>\r\n<h4>\r\n	发布计划\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA中只是通过将一部分用户故事放入到某一个发布版本中，通过自定义一些视图和搜索去查看相应的进度。\r\n</p>\r\n<p>\r\n	相比JIRA，Rally能比较好地支持发布计划（Release Planning）。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在做计划时，方便的拖拽可以轻松帮助我们发布计划，并且快速地统计发布计划中的用户故事点，以及查看相应的视图。\r\n</p>\r\n<h4>\r\n	质量管理\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在JIRA中，缺陷仅作为一个问题类型，通过问题类型过滤的方式可以产生相应的报告和视图，但没有特别为缺陷管理支持相关的功能。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在Rally中，有专门的质量管理一栏，可以做测试计划、测试用例以及产生测试缺陷报告等。\r\n</p>\r\n<h4>\r\n	视图面板及自定义\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;两种软件都支持各种视图和强大的自定义功能，但使用起来不同。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA的视图基于各种小配件和设计过滤条件的结果显示，一个视图中可以显示多个项目的不同数据，并且可以通过各种图表方式表达，例如饼图。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Rally\r\n大多基于项目本身的视图面板，在Rally中是先选择哪一个项目，然后所有的视图和功能都是基于这个项目的数据产生。例如燃尽图、用户故事进度等。除非用\r\n自定义的脚本去指定哪一个项目的视图（我认为这属于高级应用）。Rally中提供了很多关于敏捷所需要的视图，但自定义一些数据的视图例如饼图之类的就比\r\n较麻烦了。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在Rally中可以方便地定义不同用户角色查看项目。例如团队视图、Scrum Master视图、Program Manager视图、PO视图及成员视图等。\r\n</p>\r\n<h4>\r\n	内容更新提醒\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;在\r\nJIRA中当用户故事发生变更，例如状态更新从进行中变为开发完成，则相关人员可以及时收到邮件，测试人员就可以进行测试；或者有人对当前的用户故事进行\r\n了修改则相关人员可以快速地得到这个信息。而在Rally中目前尚未发现此功能，在某种程度上，大家无法依赖Rally中的进度更新而及时通知到大家，还\r\n需要单独告知相关人员。\r\n</p>\r\n<h4>\r\n	用户故事的导入与导出\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA尚不支持批量导入功能，即将Excel中的用户故事批量导入到系统中。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Rally则支持导入功能，可以将Excel表格按照规定的格式导入系统中，从而省略部分工作。但导入功能有点复杂，需要安装插件，而且Excel中规定的格式比较严格。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;JIRA提供了比Rally强大的导出功能，不仅可以导出Excel、XML，甚至可以导出由过滤条件数据中产生的图表。而Rally仅可以导出Excel格式。\r\n</p>\r\n<h4>\r\n	小结\r\n</h4>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;Rally和JIRA各有优劣，没有谁一定比谁好。总体来讲，在操作上我认为JIRA更为方便一些，而在功能上则是Rally更胜一筹。此外，在共有的功能上，JIRA在细节方面的用户体验会更好。\r\n</p>\r\n<h2>\r\n	<strong><span style=\"color:#e36c09;\">文档管理工具</span></strong>\r\n</h2>\r\n<p>\r\n	Confluence是一款很好的文档管理工具。这里列举一下我认为比较实用的地方。\r\n</p>\r\n<ol>\r\n	<li>\r\n		<span style=\"background-color:initial;\">可以为每一个团队创建自己的空间。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">协同合作功能不错，例如在收集信息时非常有用，大家可以在同一页面更新。例如头脑风暴产品的反馈意见和设计原型。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">当有文档变化时，可以通知到相应的人。这使得其他人可以快速地对变动进行预览和注释。有人说邮件也可以达到这种效果，但邮件很难管理和维护。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">可以对不同的空间、页面进行不同的权限控制，以防团队以外的人误操作。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">提供了强大的宏，可以自己定义图表或报告，使得文档更加便捷。</span>\r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;\">可以直接打开和操作Word、Excel、 PowerPoint。</span>\r\n	</li>\r\n</ol>\r\n<h2>\r\n	<strong><span style=\"color:#e36c09;\">其他小工具</span></strong>\r\n</h2>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;一家讲求创新的公司一定会有很多自己研发的工具，这些工具的使用者也是公司内部的员工。在协同工作和辅助方面，有很多有意思的小工具，在这里分享给大家。\r\n</p>\r\n<h3>\r\n	组件关系图\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;当一个组件（或者Service）需要被更新或修改时，势必要影响下游输出或受到上游输入的限制，如何快速地找到相应组件的前后关系和联系人，开发者们也自己研发出了组件关系图这样一个方便使用的小工具，便于大家分析和与相应的团队沟通合作。\r\n</p>\r\n<h3>\r\n	办公空间视图（Space View）\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;公司在全球有很多的办公室，不同地方的人员也会经常出差到其他地方，为了方便地了解其他办公室的环境，想知道相应的人坐在哪里，或者了解会议室的位置，办公室空间视图都是一个很好的工具，可以查询和查看全球所有办公室及人员座位的相应信息。\r\n</p>\r\n<h3>\r\n	预定会议室\r\n</h3>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;不\r\n同地域的会议非常多，在发会议邀请时，不仅要考虑到本地的会议室，还要考虑到对方的会议室，Outlook中虽然可以预订，但很不方便，尤其是在冲刺计划\r\n会议这天，大多数团队都是同一天开计划会议。于是公司员工就开发了一套快速定会议室的系统，只要选择地区、楼层、开会时间就会快速地找到哪些会议室有空\r\n闲，可以预订。\r\n</p>\r\n<h2>\r\n	<strong><span style=\"color:#e36c09;\">总结</span></strong>\r\n</h2>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;现在几乎没有一款软件是靠一个人可以独立完成的，如何让团队成员和团队与团队之间高效协作，管理者们不断谈论的话题。而工具是一种比较行之有效的方法。\r\n</p>\r\n<p>\r\n	&nbsp;&nbsp;&nbsp;&nbsp;另外需要注意，工具是为人和团队服务的，任何一个工具的使用和产生都建立在团队的问题上，结合各种不同的工具可以帮助团队高效合作，尤其是团队与团队之间的协作。如果为了使用工具而使用，往往会得到适得其反的结果。从问题出发，找到或开发适合自己的工具才是王道。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-07-16/2820681', '1', '2015-01-09 09:20:03');
INSERT INTO `yov_source` VALUES ('10015', '软件开发者如何准备未来？', '软件 开发者 未来', '&nbsp;&nbsp;&nbsp;&nbsp;现今，科技领域技术更新非常迅速，作为该领域幕后勤恳劳作的软件开发者要想在其中永远保持领先，跟得上时代，就需要时刻面向未来做好准备。但面对各种技术各种开发语言，软件开发者该如何做？<br />', '<p>\r\n	软件开发领域有点类似股票市场。为了避免沦落到沿街乞讨，你就得预测事物的发展方向。不幸的是，就像股票市场，预测技术方向也是不可能的。在黑莓垮\r\n台前，没人能想到它现在的下场。同样的还有Silverlight和Flash，这两种技术都意外地没落了。那么软件开发者怎样才能避免这种灾祸，确信已\r\n经为未来做好准备了呢？\r\n</p>\r\n<p>\r\n	<strong>挑选一个广阔而稳固的基础方向</strong>\r\n</p>\r\n<p>\r\n	确保软件开发者前途光明的最可靠办\r\n法是避免彻底偏向，应该打下一个广阔而稳固的职业基础。许多技术是时尚的，但总有一些技术更能经受时间磨砺，像C或者C++语言已经出现很久，仍在大量使\r\n用。JavaScript是另一个具备稳固基础的伟大技术，它可以用于任何平台的编程，包括移动端、网页端，甚至嵌入式系统。你尤其需要提升通用技术而不\r\n是特殊技术。拥有通用技巧是软件开发过程中编写良好代码的核心灵魂。\r\n</p>\r\n<p>\r\n	<strong>留意最新趋势</strong>\r\n</p>\r\n<p>\r\n	做不到准确预测未来，但可以通过一些指标看出潮流趋势，关注趋势和热议内容一直是个好主意。在Hacker News和 Pro Git等网站经常可以发现新技术的苗头。开发者大会和技术沙龙也是发现新趋势不错的渠道。\r\n</p>\r\n<p>\r\n	<strong>持续学习</strong>\r\n</p>\r\n<p>\r\n	保证不落伍最稳固的方法是学习新技术并不断扩展知识面、提升已有技术。作为软件开发者应该习惯于终身学习，做一个计划让每天或每周有一个固定的学习时间。学会如何学习，以提高学习效率并使学习变成更有趣的经历。自学是在永远变化的技术世界中存活的重要武器。\r\n</p>\r\n<p>\r\n	记住，世界上没有东西是凭空诞生的。新技术和新编程语言会出现，但它们都是现有某种技术或编程语言的改作或组合。你知道得越多，就越能关联新事物并使新学习部分大量减少。\r\n</p>\r\n<p>\r\n	<strong>愿意改变和调整</strong>\r\n</p>\r\n<p>\r\n	固守已知而忽略发展确实容易，但谁都不能阻止未来，我们最好放弃抗拒趋势发展，学会改变和调整。\r\n</p>\r\n<p>\r\n	如果始终迷信一种技术，最后伤害将多于帮助。我逐渐认识到在大风中应弯下腰——那些挺立于大地的最终会像芦苇一样被折断。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-06-24/2820358', '1', '2015-01-09 09:21:40');
INSERT INTO `yov_source` VALUES ('10016', '项目管理能力提升四要素', '项目管理 要素', '&nbsp;&nbsp;&nbsp;&nbsp;企业在应对快速发展的经营活动时有两个管理将起到关键性作用，一个是战略管理，一个是项目管理。战略管理立足于企业的长远和宏观，考虑的是核心竞争能力，而项目管理是实现战略并支持企业快速健康发展的手段和保障。<br />', '<h3>\r\n	<span style=\"color:#e36c09;\">认识项目管理</span>\r\n</h3>\r\n<p>\r\n	美国项目管理协会主席保罗说：“在当\r\n今社会，一切都是项目，一切也将成为项目。”项目，是在一段时间内为完成某一独特的产品或提供独特的服务所进行的一次性努力的过程。只要有目标和过程，就\r\n可以成为一个项目。譬如：设计开发某一产品功能、房屋装修改造、结婚的婚礼筹备等都能称为项目。\r\n</p>\r\n<p>\r\n	项目管理，就是在项目活动中运用知识、技能、工具和技术，以便达到项目要求，其目的是满足和超越项目干系人对项目的需求和期望。项目管理从本质上来说，就是面向目标的，所有的方法、行动都是为了达成目标而服务的。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">互联网公司的项目实践</span>\r\n</h3>\r\n<p>\r\n	早期或初创的互联网公司，产品经理和技术开发几乎承担着多种角色的工作。产品经理除了产品方案设计以外，还做交互设计、产品测试以及项目执行的整体协调推进工作。技术开发人员除了做程序编码实现以外，还做系统测试以及测试完成后的上线部署。\r\n</p>\r\n<p>\r\n	实\r\n际上，从标准规范的人员角色分工来讲，交互设计是交互设计师的工作范畴；系统测试属于测试工程师的工作范畴；上线部署属于运维工程师的工作范畴；项目执行\r\n的整体协调推进，也属于项目管理的工作范畴。当那些早期或初创的互联网公司的业务规模越来越大、项目越来越多时，一个人兼任多种角色，就会感到力不从心，\r\n必将影响项目进度和节奏。\r\n</p>\r\n<p>\r\n	以中国互联网行业里知名的A公司为例，A公司的W事业部在最早期的组织架构中，会有独立的产品、UE、UI、页面\r\n制作、前端、后端、测试等部门，当时没有专职的项目管理人员。项目管理工作多数是由产品和技术部门的负责人来承担。这一阶段尚未形成系统的项目管理流程，\r\n因此相关项目工作没有统一的依据，管理较为粗放。项目负责人的界定也不清晰，有时候项目出了问题也难免发生互相推诿扯皮的情况。后来项目执行中问题不断暴\r\n露，又得不到快速有效的解决。对项目管理的需求，就变得日益强烈，业务线的领导意识到需要从全局高度统一对项目做管理。主要体现在：需要确保项目资源合理\r\n利用、明确项目成员的角色分工、制订合理的项目计划并推进执行。看似非常简单的要求，却是A公司W事业部在项目管理方面的起航。\r\n</p>\r\n<p>\r\n	W事业部为了增强其项目管理能力，成立了项目管理部（PMO），直接向业务线的负责人（高级总监级别）汇报工作。当时在产品、设计和技术类部门，形成了如下形式的人员角色划分（运营和市场类部门，不做介绍），如图1所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201406/05/538fe6bb3fdda.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201406/05/538fe6bb3fdda_middle.jpg?_=31157\" alt=\"\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图1 &nbsp;业务部门架构图\r\n</p>\r\n<p>\r\n	其中，交互设计、视觉设计、页面制作和前端（JS）开发，都隶属于UED（用户体验设计）部门；后端开发、测试、网络运维，都隶属于技术部门。PMO、产品部、UED、技术部作为强矩阵式的架构，都由业务线的负责人直接管辖。项目运作上由项目管理部负责统筹管理执行。\r\n</p>\r\n<p>\r\n	随着项目管理工作逐渐规范化并得到各方的认可，W事业部也对项目管理部做了更新的职能定位。在此基础上，项目管理部在项目运作的摸索实践中，也帮助其他职能部门制定了相关工作守则。\r\n</p>\r\n<p>\r\n	举例来说，项目管理部职能范围有以下几部分。\r\n</p>\r\n<ul>\r\n	<li>\r\n		负责全部项目的管理、执行和推进，保障项目安全，解决项目中的各种风险和问题，准时着陆正确的目的地。\r\n	</li>\r\n	<li>\r\n		建立并维护公司项目管理方法论，帮助公司项目追求最佳的项目管理实践。\r\n	</li>\r\n	<li>\r\n		建立并实施一系列通用的项目管理过程和模板，不断优化公司项目管理的过程，对项目管理人员予以指导。\r\n	</li>\r\n	<li>\r\n		建立并使用规范的流程、工具和术语，便于项目团队内部、团队之间以及各个职能部门的沟通，减少误解，提高项目沟通及协作机制的效率和效果。\r\n	</li>\r\n	<li>\r\n		对项目进行组合管理，通过向项目干系人和各职能部门提供项目管理的普及和培训，提高公司项目管理的核心能力。\r\n	</li>\r\n	<li>\r\n		建设并维护项目管理信息系统（如JIRA、Confluence等），提升项目管理在流程、运作规则和团队协作等方面的自动化水平、自适应水平。\r\n	</li>\r\n	<li>\r\n		加强项目管理体系建设，通过针对项目管理的培训和指导，加强项目管理人员的队伍建设，提高项目管理人员的管理水平和一线管理能力。\r\n	</li>\r\n	<li>\r\n		对项目、项目管理人员、项目各角色成员进行绩效管理。\r\n	</li>\r\n</ul>\r\n期\r\n间，公司HR部门也多次邀请业界知名的项目管理专家，来公司做项目管理领域的系统培训。经过较长一段时间的运作，W事业部的项目管理水平有了较大提高，主\r\n要表现在：规范了项目中的协作流程，项目计划、进度节奏、执行管控等更加合理完善，项目管理的方法、工具得到广泛应用，沟通更顺畅，提高了管理效率和效\r\n果。\r\n<h3>\r\n	<span style=\"color:#e36c09;\">四个核心要素的体现</span>\r\n</h3>\r\n<p>\r\n	项目管理有四个核心要素即SPPT——Strategy战略目标、People优秀人才、Process制度流程、Tools管理工具。整个项目管理能力的改进过程中，都必须同时伴随着项目管理关注的这四个核心要素的配套支持。\r\n</p>\r\n<p>\r\n	这\r\n四个核心要素看似简单，但在互联网项目管理领域的从业者中，真正了解并实践的人并不多。举例来说，我之前面试过几十位应聘项目管理的候选人，几乎没几个人\r\n能正确回答出这四个核心要素的内容并用于实践指导。很多人都会把SPPT与项目管理过程的四个指标（多、快、好、省）以及项目管理的四个核心制约因素（范\r\n围、时间、质量、成本）互相混淆。\r\n</p>\r\n<p>\r\n	项目管理关注的这四个核心要素相辅相成，相互依赖，就像四个联动的齿轮，来确保项目的顺利实施，如图2所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201406/05/538fe8cc29c7e.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201406/05/538fe8cc29c7e_middle.jpg?_=34664\" alt=\"\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图2 &nbsp;项目管理四个核心要素\r\n</p>\r\n<p>\r\n	以下就这四个要素，谈谈如何结合项目管理的具体实践。\r\n</p>\r\n<h4>\r\n	Strategy战略目标\r\n</h4>\r\n<p>\r\n	战略目标可以理解为做事的目的和意义，目的和意义不同，会导致做事的结果完全不同。所以项目开始前，项目发起人首先要让项目成员理解项目的目的和意义。\r\n</p>\r\n<p>\r\n	举\r\n例说，A公司W事业部负责微博业务的管理与运营，但因A公司的战略问题，导致微博业务起步很晚。2011年1月，A公司启动了微博宽屏版项目。同年4月，\r\n按计划设计开发完成进入测试阶段，但测试完成后，部门领导却宣布当前的项目不能上线。这让项目团队当时很有挫败感，也提出很多疑问和质疑，产生了较大的负\r\n面情绪。\r\n</p>\r\n<p>\r\n	分析项目不能上线的原因，是由于当时做出来的产品和立项之初的战略目标、产品愿景（舒适阅读、视觉盛宴、极速体验）有较大差异。也\r\n就是说实际做事的结果与立项之初的战略目标不匹配。在项目立项后，宽屏版的产品设计方案和交互设计方案盲目追随国外网站Twitter，缺少自主思考，对\r\n宽屏版中“宽”字的理解不到位，导致项目成员走了较大的弯路。后来又经过两个多月的不懈努力，对微博Timeline及相关页面进行一系列的改造优化，使\r\n得视觉层面全面转向宽屏版效果，并在用户体验、浏览速度等方面也进行了优化，为用户提供更加舒适、快捷的阅读体验。最后在项目启动5个月后终于正式上线。\r\n</p>\r\n<p>\r\n	项\r\n目成员辛苦按项目计划，花费将近三个月做出来的东西，结果未能得到上线发布的认可，无论摊到哪个团队身上，都会有各种疑问或负面情绪。这个例子说明项目执\r\n行之前，正确理解项目战略目标很重要，如果项目负责人或项目成员不能正确理解发起这个项目的意图，就很难把项目做好，也得不到想要的结果。\r\n</p>\r\n<h4>\r\n	People优秀人才\r\n</h4>\r\n<p>\r\n	在项目管理中，人的要素非常重要。有时在项目中只要有足够能干和优秀的人来担任项目负责人或核心骨干，哪怕是在制度和流程不完善的情况下，也能做出好的结果。\r\n</p>\r\n<p>\r\n	互\r\n联网公司最有价值的就是人。办公桌椅、电脑设备等都会折旧，但对一家互联网公司来说，始终在增值的就是公司的每一位员工。但同时互联网行业竞争激烈，人才\r\n流动量也很大。以技术开发岗位为例，同一层级技术开发岗位，招聘进来的开发工程师的水平都有所差别，因此其参与到项目时，对同一个开发任务点，所花费时间\r\n和产出效果可能也会因人而异。从整体项目的维度，如何将人的因素融合到合理的项目节奏，就需要与制度、流程相结合，以制度机制稳定人。\r\n</p>\r\n<h4>\r\n	Process制度流程\r\n</h4>\r\n<p>\r\n	项目管理在很多时候研究的是做事的方法次序和安排、流程和过程。建立并实施完善优质的制度流程，能让公司内部管理的效率和效果显著提升。\r\n</p>\r\n<p>\r\n	图1中的A公司W事业部划分了项目的各种角色，如何制定一个符合部门体制又能确保各职能部门高效协同工作的制度流程，并持续改进优化是项目管理需要重点关注的。当时结合具体业务实际，制定了如下流程，如图3所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201406/05/538fe9153892f.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201406/05/538fe9153892f_middle.jpg?_=42896\" alt=\"\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图3 &nbsp;项目管理中的制度流程\r\n</p>\r\n<ul>\r\n	<li>\r\n		立项之后，进行产品需求方案的设计、评审和讲解。\r\n	</li>\r\n	<li>\r\n		产品评审并讲解完后，项目团队可以做两事件：后端技术人员做后端技术概要设计和评审准备；交互设计师做UE设计、评审准备和后续的讲解。\r\n	</li>\r\n	<li>\r\n		UE评审并讲解完后，项目团队可以做三件事：前端技术人员做前端技术概要设计和评审准备；视觉设计师做UI设计和评审准备，有必要的话，需要再做UI讲解；测试工程师做测试用例的编写和评审准备。\r\n	</li>\r\n	<li>\r\n		UI\r\n效果设计完成并评审通过后，进行页面制作（切图）环节，将页面提供给开发人员做嵌套。前、后端概要设计完成并评审通过，开发人员拿到页面，进入开发阶段。\r\n测试用例编写完成并评审通过，同时也拿到了开发人员提供的测试版本，进入测试阶段。当测试基本完成后，在正式上线之前，给项目的核心干系人（主要是指各职\r\n能部门的领导）做产品演示，用来展示项目团队在项目执行期间的工作成果。产品演示环节，视项目规模大小情况而定，不是必须要有的环节。产品上线后，进行数\r\n据监测，并根据数据情况持续进行产品优化，逐渐满足立项之初战略目标的预期。\r\n	</li>\r\n</ul>\r\n<p>\r\n	项目管理要在整个项目执行过程中做全程的管控，打通经脉、扫清障碍、风险预警和规避，帮助团队解决在项目执行过程中遇到的各种问题。\r\n</p>\r\n<p>\r\n	结\r\n合项目管理第二个要素People提到的人的因素，从整体项目的维度，为了将人的因素能契合到合理的项目节奏，在这个流程中设立了“后端概要设计评审”、\r\n“前端概要设计评审”两个环节，这两个技术层面的评审环节，可以针对部分技术水平参差不齐的开发同学，确保在开发质量和时间点上趋于理想预期的节奏。设立\r\n前、后端技术概要设计评审会的目的，是希望开发工程师在正式编码之前，对其所采用的技术选型、技术实现方案，能够由开发经验丰富的开发主管做把关和指导，\r\n采用最优的技术方案来实现，并评估出合理的开发周期。\r\n</p>\r\n<p>\r\n	从项目管理的角度来说，给新员工或者刚刚接触这个流程的开发工程师介绍这两个技术评审\r\n环节时，一定要注意沟通技巧，不能直接对开发工程师说“工程师技术水平参差不齐”之类的话，容易伤人自尊。项目管理要从整体产品复杂度的角度来表述，比如\r\n“微博产品的复杂度高，涉及面广，你开发的这个模块也许会引发其他模块的问题”、“需要做技术概要设计评审，由你的开发主管来把关……”这种表述。\r\n</p>\r\n<p>\r\n	总之，一个好的制度流程，能让项目团队持续产生好的项目结果。一个坏的制度流程，几乎无法让项目团队有好的成果。\r\n</p>\r\n<h4>\r\n	Tools管理工具\r\n</h4>\r\n<p>\r\n	项\r\n目管理中涉及项目的分解、执行的优先级，所以真正要把一个项目做好，很多时候要用到一系列工具、方法或技术。其中项目分解的要点是我们要掌握怎么把一个复\r\n杂的问题简单化、怎么排定各业务模块的优先级，找准时间管理、进度管理中的瓶颈，找准关键的人和路径等。这些内容可以落地到Office办公软件来管理，\r\n也可以落地到专业的管理工具来管理。如果项目数量少，落地到Excel可能会感觉比较轻松。但当项目逐渐增多，几十个、上百个项目并行执行出现时，如果再\r\n用Office去管理就力不从心了。这种情境下需要选择适合自身团队特点的专业管理工具来辅助项目管理。优质的项目管理工具，是项目成功运作的承载。\r\n</p>\r\n<p>\r\n	人，应该做自己喜欢并且擅长的事情。工具也一样，利用它最出色的特点。在提案跟踪及项目管理工具方面，我比较喜欢Atlassian公司的JIRA。项目执行管理\r\n、敏捷开发管理、体系流程管理\r\n、产品Bug跟踪、提案跟踪、需求管理、客户服务等，都是JIRA最擅长的。我曾在2014年4月刊《程序员》杂志发表过一篇《因你而变——JIRA使用心得》的文章，有兴趣的读者可以查阅，主要是介绍我六年多来使用JIRA的心得体会。\r\n</p>\r\n<p>\r\n	简单总结一下项目管理关注的四个核心要素（SPPT）：Strategy，就是我们要了解做项目的目的和意义，它决定我们做项目的方式和方法；People、Process 、Tools就是我们需要从人、流程、次序和管理工具上去做了解和领悟。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-06-05/2820086-Project-Management', '1', '2015-01-09 09:22:45');
INSERT INTO `yov_source` VALUES ('10017', '技术团队如何留住人才：注重团队体验和员工驱动力', '团队体验 员工驱动力', '&nbsp;&nbsp;&nbsp;&nbsp;好不容易培养的技术骨干、团队中坚力量，难免被外面盯上挖走。穷游网CTO黄向阳认为一个技术团队就像是一个UGC社区，团队中的每位同学都是社区用户，需要做好团队体验以及找到“用户”的驱动力。<br />', '<p>\r\n	如何留住人？我们要先搞清楚人为什么会离开。记得马云总结过两点非常到位：1. 钱没给到位；2. 心受了委屈。我们可以从团队的体验和员工驱动力来思考如何更好地管理一个技术团队。\r\n</p>\r\n<p>\r\n	<b>一个技术团队就像是一个UGC社区，团队中的每位同学都是社区的用户，他们在社区的激励体系（薪酬与绩效）下，贡献自己的价值（coding），获取社区的积分（工资），提升自己的等级（职位职级），同时也在吸收社区的营养（学习成长）。</b>\r\n</p>\r\n<p>\r\n	我\r\n们要像社区对待用户一样用心对待我们团队中的每个成员，重视用户反馈和感受，不断优化我们在团队管理上的细节和体验。第一，做伤害用户体验的事情就等于赶\r\n用户走，对于技术团队也一样，大家愿不愿意留下来，首先取决于这个团队的体验是否够好；第二，如何让大家积极做事，主动创造价值？就像UGC社区如何让用\r\n户贡献有价值的UGC一样，我们必须找到用户的驱动力。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">抱怨和指责是伤害团队体验的杀手</span>\r\n</h3>\r\n<p>\r\n	技\r\n术研发团队是需要高效协助的团队，协助中的抱怨会直接影响到项目的高效推进。谁都不喜欢在一个充满抱怨和指责的团队中工作。如果是在战场，当你的战友不给\r\n力时只有你更给力才可能杀出一条血路，否则只会死得更惨。所以我们在管理上一直给团队灌输一个理念\r\n“因为别人做得不好，所以我要做得更好”，没有人愿意做一件糟糕的事情出来。比如有一次我们在提交版本发布时，一位工程师由于自己的失误发布了错误的代\r\n码，造成了线上某个频道无法打开。当时我就在他旁边，发现他在处理问题时非常紧张和内疚，说话的声音都在颤抖，我告诉他没关系谁都会犯错误，之后问题顺利\r\n得以解决。这种情况下，所有的指责和埋怨都是多余的，团队的信任和宽容会唤醒他内心强大的力量更快地成长。宽容可以换来感恩，指责面临的将是对抗。作为管\r\n理者，我们要控制抱怨在团队中蔓延，让团队在感恩中成长。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">警惕拖垮团队的软肋</span>\r\n</h3>\r\n<p>\r\n	技\r\n术人员最忌怕什么？谁都不喜欢待在一个苦逼并且看不到未来的团队。无休止的加班却看不到成果，甚至平台的稳定性越来越糟糕，每天都在修修补补、半夜睡觉被\r\n叫醒处理故障、休假期间被打搅解决Bug……有人会说“我们是非常有凝聚力的团队，24小时都做好了战斗的准备”，借用雷军的一句话这其实是在“用战术上\r\n的勤奋，掩盖战略上的懒惰”，团队被拖垮只是时间上的问题。如果某个糟糕的软肋环节持续很久都没有办法得到改善，那一定是管理的责任。\r\n</p>\r\n<p>\r\n	不同\r\n的团队都会有一些软肋，人的软肋、架构上的软肋、系统性能安全上的软肋、流程上的软肋等。管理者一定要警惕这些可能会拖垮团队的软肋，在技术选型上也要一\r\n定选择适合自己团队的方案，避免透支团队体力而陷入挣扎的旋涡。比如可以利用各种成熟的云计算平台为团队减负，让团队做自己最擅长的事情。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">发挥团队的力量，真诚互助</span>\r\n</h3>\r\n<p>\r\n	我\r\n经常会告诉穷游的技术团队成员“永远优先做别人需要你协助的事情”，因为自己的事情停一停影响的是一个人，别人需要协助的事情如果停下来可能会影响很多\r\n人。帮助别人，快乐自己，当自己碰到困难时也在团队互助中受益。只有团队具备了很好的互助精神，才能最大化降低团队协助的成本，作为管理者才能从日常的管\r\n理事务中解脱出来，为团队做更重要的事情。此外，互助精神对新人的融入更为重要，让新伙伴第一天入职就能感受到团队的这种力量，没有人愿意拒绝一个真诚互\r\n助的团队。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">信任是最好的KPI</span>\r\n</h3>\r\n<p>\r\n	如果你用信\r\n任的心态去管理一个团队，就会产出让你信任的成果。技术Leader要想办法解决信任的问题，比如在沟通需求的时候经常会听到PM说“为什么\r\nFacebook能做我们就不能做”，这是一种极差体验的沟通方式，因为你选择了不信任的态度。信任是一切管理的基础，我一直认为技术团队是无法用KPI\r\n衡量的，与其挖空心思制定各种KPI约束团队，不如放手让他们更好地驱动自己。Leader只需要做一件事情，那就是信任并帮助他们。如果碰到无法让你信\r\n任的人怎么办？办法仍然是信任和帮助他。当他碰到困难或工期很紧张要求延期的时候，我会说“兄弟我来帮你一起搞定”，你会发现他会说“我先自己来，如果实\r\n在不行再找你”，结果往往他不需要你的帮助自己就搞定了一切，这就是信任带来的驱动力量。当然，喜欢偷懒和拖延的家伙，在你的“信任和帮助”下一定没有生\r\n存的空间。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">钱以外的自我驱动力</span>\r\n</h3>\r\n<p>\r\n	不可否认钱是最有效的\r\n驱动力，但未必是最好的驱动力，如果一个团队的各种管理和体验很差，涨薪只能暂时留住人，早晚还会走人，只靠钱解决问题往往会掩盖团队管理上的各种缺点，\r\n更像温水煮青蛙，团队迟早会崩盘。挖掘钱以外更有效的驱动力需要我们在管理上有更多的思考。这里可以借鉴运营一个UGC社区的思路。我们曾经讨论如何让用\r\n户为穷游的目的地贡献点评，制定了激励体系鼓励用户贡献点评，但发现效果很有限。换一个思路，用户每天在写游记的时候会提到很多目的地，我们在游记中挖掘\r\n出来这些内容变成目的地点评，这样每天都会有大量优质的点评内容产生。你不需要激励，因为用户是在为自己写游记，是在记录自己的东西而不是为穷游：我在为\r\n自己做事情，这就是驱动力。所以我们要想办法找到每个人为自己做事情的驱动力，比如我们团队中有一位元老级的工程师，能力很强但不喜欢加班，只有一种情况\r\n他会主动自愿加班，别人搞不定的交给他，这样他会觉得非常有面子。团队给足他面子，当面子成为一种习惯，就会发现他以后做任何事情都会和自己的驱动力“面\r\n子”死磕，驱动力决定了他不允许做有损面子的事情，自然就会驱动自己为这个团队更好地贡献自己的价值。当然不同类型的人，都有不同的驱动力，这就是管理中\r\n需要我们用心的地方，只要找到了他们的驱动力并满足了动力需求，自然每个人都能够成为团队同舟共济的一员。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">优秀的团队挑人才，优秀的人才挑团队</span>\r\n</h3>\r\n<p>\r\n	选\r\n对人，就成功了一半。如果你想打造一个优秀的技术团队，一定要把好面试关，因为好的人才会扎堆。要做好迎接优秀人才的准备，只有团队中都是优秀的人，那么\r\n优秀的人才才会留下来。招对人，用心打造团队的优越体验，挖掘每个人的驱动力满足他们的动力需求。做产品用户是上帝，做管理人才就是上帝，当你把人招进来\r\n第一天开始\r\n，你就要对他信任、帮助、尊重、包容，并把这种氛围贯彻到整个团队。也许你会觉得这样会宠坏团队，但真这么做了你会发现用心换来的将是团队无坚不摧的战斗\r\n力。当然一定要把好面试关，警惕让不靠谱人的钻了空子，破坏了你的团队。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-06-03/2820050-Management', '1', '2015-01-09 09:24:53');
INSERT INTO `yov_source` VALUES ('10018', '面对“问题员工”：用其长，容其短', '用其长 容其短', '&nbsp;&nbsp;&nbsp;&nbsp;任何一家企业都会存在所谓的“问题员工”，这种员工也许会给团队中的其他人带来一定的负面影响，影响企业的运转效率。到底哪种人称得上是“问题员工”？企业又该怎么管理？<br />', '<p>\r\n	任何一家企业，无论是规模庞大的500强企业，还是成长中的中小型企业，都会存在“问题员工”。“问题员工”的出现，不仅会降低其自身的工作效率，而且会给周围的人带来一些负面影响，并且有可能影响到整个企业的运转效率。因此，我们历来都非常重视“问题员工”的管理。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201405/28/53854f12cef74.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201405/28/53854f12cef74.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<b>“问题员工”可以分为以下几种类型：</b>\r\n</p>\r\n<p>\r\n	第\r\n一种是所谓的“功高盖主”的员工，他们通常业绩非常好，所以往往不太重视、甚至不遵守公司的规定；第二种是那些有活力、有创意、有想法、标新立异的员工，\r\n他们创造出来的成果对提高整个公司的工作效率都会有很大帮助，但正是由于这些个性，使得他们不怎么重视公司现行的一些规章制度，甚至可以说是不屑一顾；第\r\n三种是那些非常苛求的员工，他们爱挑毛病，在工作中表面看起来是追求完美，实际上往往会陷于一种吹毛求疵的境地，对同事、对合作部门的要求都非常高；第四\r\n种是那些喜欢推卸责任的员工，他们往往夸夸其谈、光说不干。\r\n</p>\r\n<p>\r\n	我们一直把人才作为最核心的价值，在招人、用人、育人、留人、成就人的各个环节\r\n中，都非常重视和尊重每一位员工的价值，这里面，既包括优秀员工，也包括“问题员工”。“问题员工”的管理，实质上是育人和留人环节中的员工管理。对于不\r\n同类型的“问题员工”，在进行管理时，我都遵循着一条共同的准则：“问题员工”不会自觉消失，必须采取有效的办法来解决，不武断地否定，认真发现其长处，\r\n适当容忍其短处，通过正面的引导，帮助他把短处转化成长处。\r\n</p>\r\n<p>\r\n	具体来说，对“问题员工”的管理，可从以下几方面来看。\r\n</p>\r\n<p>\r\n	<b>第一，企业必须要完善管理制度，并且对各种制度有一个坚决的、到位的执行。</b>\r\n</p>\r\n<p>\r\n	我\r\n们研究后发现，有相当数量的“问题员工”是由于制度不够规范或者不够严谨而产生的。比如有些人总会把个人消费的票据，拿来作为公务活动报销，却能得到报销\r\n款。这显然是由于财务监管制度不健全或者执行不严格而造成的。因此企业必须要反思各项管理制度是否完备和完善，管理的各个环节是否需要进行梳理，是否存在\r\n疏漏。\r\n</p>\r\n<p>\r\n	<b>第二，对“问题员工”要用其长，容其短。</b>\r\n</p>\r\n<p>\r\n	世界上没有十全十美的人，人的缺点往往可以通过一些适当的引导\r\n得以纠正变成优点。在管理时，要正确看待“问题员工”的表象，挖掘出他们的优势和强项，然后加以利用，当他们工作业绩表现好了以后，要给予他们恰当的奖\r\n励。对于他们的问题和缺点，首先给予一定的包容，在私下里与他们进行非常坦诚的、真诚的沟通，给他们一些有效的规劝和忠告；其次，督促和鞭策他们不断地进\r\n行自我反省、调整和改正。这其中，科学有效、奖惩分明的绩效管理体系会发挥极其重大的作用。总之，要给“问题员工”一些机会，不能一棒子打死，一概而论。\r\n</p>\r\n<p>\r\n	<b>第三，站在管理者的角度总体来说，没有不好的员工，只有管不好的员工。</b>\r\n</p>\r\n<p>\r\n	员工进入公司之后，如果出现问题却得不到好的管理和解决，那就应该是管理者的责任了。因此，管理者必须对“问题员工”引起相当的重视，沟通可以说是解决问题的一把利刃。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-05-28/2819986-Management', '1', '2015-01-09 09:28:07');
INSERT INTO `yov_source` VALUES ('10019', '艰巨的“历史工程”：构建开放的软件团队文化', '构建 软件 团队文化', '<strong></strong>&nbsp;&nbsp;&nbsp;&nbsp;伴随着软件开发敏捷化趋势的发展，“以人为本”的软件团队建设理念越来越得到广泛的重视，但在这方面的研究、探讨与实践则显得乏善可陈，现在是到了个体、团队、组织甚至是社会力量一起行动起来的时候了。<br />', '<p>\r\n	构建开放的软件团队文化绝不仅仅是搞几次技术交流和设计讨论那么简单，它是一项长期的系统工程。开放的软件团队意味着什么？个人与团队应该如何行动？作为团队的管理者以及团队成员都应该认真思考这些问题。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">一个程序员的文化观</span></strong>\r\n</h3>\r\n<p>\r\n	<strong>文化的自然属性</strong>\r\n</p>\r\n<p>\r\n	“文化”总给人一种高高在上的感觉，这多少是受到狭义文化定义的影响，即文化是人类所创造的语言、文学、艺术及一切意识形态在内的精神产品。在中国古籍中，“文”既指文字、文章、文采，又指礼乐制度、法律条文等；“化”是“教化”、“教行”的意思。\r\n</p>\r\n<p>\r\n	文\r\n化是可以培育、教化出来的吗？我们可以从文化的产生与传承略加分析。一种文化的产生必定源自人类内在与外在的需求，其传承少不了培育与教化的功劳，但也要\r\n遵循事物发展的客观规律。因此，我认为一个有生命力的文化必须是顺应自然的。今天，我们的很多传统文化面临着生存的危机或者被边缘化，主要原因就是那些原\r\n本支撑它们的内外需求已不复存在，这些文化必然会被历史所淘汰，只是个时间问题。\r\n</p>\r\n<p>\r\n	<strong>文化的封闭属性</strong>\r\n</p>\r\n<p>\r\n	构\r\n建开放的团队文化是一项艰巨的历史工程。很多人可能没有意识到“开放”与“文化”是一对矛盾体，因为文化从本质上有着封闭的属性。弱势的文化想尽各种方法\r\n避免被强大的文化所同化或吞并；强势的文化则希望尽可能地扩展以获得更大的利益。从这个角度讲，人与人之间的战争、组织之间的吞并都是文化现象，是人类文\r\n化的一部分。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">人——文化的综合体</span></strong>\r\n</h3>\r\n<p>\r\n	我们讨论文化一般都以群体组织为背景，其实每个自然人都是一个复杂的文化综合体，包含语言、艺术、科学、信仰甚至宗教等多种因素。这个文化综合体也没有超越前面讲的两个属性。\r\n</p>\r\n<p>\r\n	首先，我们绝大多数人都在相似的教育制度里接受着同质化的教化，但最终在文化上的表现却千差万别，这说明个体文化是一种自助餐式的文化：餐厅能够提供什么样的食物可供选择决定了我们可以吃到什么，但最终吃到肚子里去的却是我们自己选择的结果。\r\n</p>\r\n<p>\r\n	其\r\n次，每一个独立的个体都难以逃脱封闭的趋向性，只是程度不同罢了。这种趋向随着年龄的增长或者知识与经验的增多，得到不断的增强。一个典型的例子就是，人\r\n年纪越大其生活习惯越难以改变。我就曾经出于健康的原因试图劝说父母在某些生活细节上做出适当的调整，但最终都以失败而告终。最后，当我意识到这可能与文\r\n化封闭性有关时，也就不再做这种无用功了。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">什么是开放的文化</span></strong>\r\n</h3>\r\n<p>\r\n	开放的文化是一种文化表象，其实质与民主、自由、平等、容忍等人生理念与社会理念有关。谈到民主与自由就不得不提及胡适，这位中国新文化运动的领军人物。下面两段引文虽然是在讨论民主，实际为我们勾勒出了一幅以“开放”命名的画卷。\r\n</p>\r\n<blockquote style=\"margin-left:3em !important;font-style:normal !important;color:#777777;\">\r\n	引\r\n文1：“胡适所说的个人主义的精义，可以概括为‘独立自主，参与奋斗’八个字。民主的生活方式，就个人来说，是独立的、是有充分个人自由的；但就整体来\r\n说，是参与的，是有一个共同理想的。独立而不参与固然无法达成这个理想，参与而不独立，也会失掉个人的价值。在民主的生活方式中，中国人所最需要的是参与\r\n而不党同，独立而不避世的精神。”（《少不读鲁迅，老不读胡适》）<br />\r\n引文2：“民主的生活方式，在政治制度上的表现，好像是少数服从多数，其实它的最精彩的一点是多数不抹杀少数，不敢不尊重少数，更不敢压迫少数，毁灭少数。”（《胡适手稿》）\r\n</blockquote>\r\n<p>\r\n	胡\r\n适的声音今天听起来仍散发着无尽的光芒。在一个开放的组织中人人应该是平等的，至少在精神层面。我很难给开放的文化下一个简单的定义，但至少可以从两个方\r\n面来甄别“真开放”与“假开放”——自主性与双向性。在一个真正开放的组织中，信息的交流是多样、自由的。任何屈服于权力的开放都不能持久，也不能深入。\r\n在一个真正开放的组织中，信息的交流是双向的。一位站在讲台前滔滔不绝的演讲者与坐在台下虔诚的听众都不是开放文化的代表。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">开放文化的一个核心与三个方面</span></strong>\r\n</h3>\r\n<p>\r\n	两种或者多种文化间的开放是建立在共同利益基础上的。如果我们把团队看作是一种文化共同体，那么建立开放的团队文化的核心就是确立共同的利益。\r\n</p>\r\n<p>\r\n	对于任何一个组织，“人/过程/产品”都是三个紧密相关的组成要素。接下来，我们将探讨开放的文化与三者间的关系。\r\n</p>\r\n<p>\r\n	<strong>人的因素</strong>\r\n</p>\r\n<p>\r\n	一\r\n个文化在其形成及发展的初期是比较开放的，因为它要从外界吸收充足的营养。随着它的逐渐成熟，其封闭性就表现得越来越充分。对个人而言，也遵循这样的普遍\r\n规律。不同的是，人的成熟更多地受主观意念所左右。现实中很多博学的人，仍可以保持旺盛的求知欲，来支撑其个体文化的不断发展。\r\n</p>\r\n<p>\r\n	我们习惯于\r\n将一个人的性格打上“内向”或“外向”的标签，那么开放的团队文化是否要我们更加外向吗？如果真是这样，开放的团队文化将变得可望而不可及。一个渴望学习\r\n的人最容易做到开放——这里所说的开放并不只是针对人，也是针对一切有用的知识。因此，构建开放的团队文化最终转化为了建立学习型的组织。\r\n</p>\r\n<p>\r\n	虽然构建学习型组织仍然是一个具有挑战性的任务，但至少已不是一个陌生的话题，本文对此只做一点分析：持久学习的动力来自于一种高尚的理想。<strong>我们不能只满足于完成自己所能的事情，而要致力于完成自己所希望的事情。</strong>\r\n</p>\r\n<p>\r\n	<strong>过程因素</strong>\r\n</p>\r\n<p>\r\n	也许很多程序员会质问我为何要将过程硬扯进来，它与开放的团队文化何干？我可以理解程序员多少对各种软件开发过程抱有一些敌意，因为他们把很多问题都归结于过程的错。这多少与团队缺乏对过程统一的理解有关。过程本应成为程序员的伙伴，而不是绊脚石。\r\n</p>\r\n<p>\r\n	过程的建立与实施是有成本的，但同时也是有收益的。我们不仅要仔细规划团队在每一个过程上面的投入，也要评估相应的产出。这种评估并不容易，因为缺乏一种简单而一致的标准。\r\n</p>\r\n<p>\r\n	统一的过程是团队沟通的平台，是开放的催化剂，是建立开放团队文化的重要基石。\r\n</p>\r\n<p>\r\n	<strong>产品因素</strong>\r\n</p>\r\n<p>\r\n	建\r\n立一个完善的产品知识库是构建开放的软件团队文化的重要保障。试想，如果对产品知识的掌握上水平相差悬殊，团队成员便很难开展有效的沟通与合作。在我看\r\n来，没有哪个高技术工作在产品知识库上遇到像软件开发一样大的挑战。缺乏足够有效的技术文档是大多数软件开发团队所面临的实际情况。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">结束语</span></strong>\r\n</h3>\r\n<p>\r\n	建立利益共同体是开放团队文化的核心。激励团队建立学习的习惯、持续地改进过程、建立完善产品的知识库是具体的方法与工具。\r\n</p>\r\n<p>\r\n	尽管本文内容并不可以直接用来解决具体的问题，但希望能够对探究此问题的本质多少有所帮助。在采取行动前，理清概念、定义问题、分析本源总是大有裨益的。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-05-24/2819928-Team', '1', '2015-01-09 09:29:45');
INSERT INTO `yov_source` VALUES ('10020', 'Quarksoft的故事：有关成长型公司增长规模和知识工作的管理', '关成长型 公司 增长规模 知识工作 管理', '&nbsp;&nbsp;&nbsp;&nbsp;软件项目一直很难管理，直至今天，仍然只有为数不多的软件团队能够按照承诺的进度和接近计划的成本一致地交付高品质的产品。现代企业需要面对的两个关键挑战：管理增长的规模和管理知识工作。<br />', '<p>\r\n	知识工作需要新的管理策略和风格，这一事实从软件行业的历史来看是很明显的。软件项目一直很难管理，直至今天，仍然只有为数不多的软件团队，能够按\r\n照承诺的进度和接近计划的成本一致地交付高品质的产品。软件开发是涉及大规模知识管理的第一种技术，虽然软件工作一直是一个管理问题，但是过去它只涉及大\r\n多数公司的一小部分。现代企业需要面对的两个关键挑战：管理增长的规模和管理知识工作。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">为什么组织需要硬性规定</span>\r\n</h3>\r\n<p>\r\n	随\r\n着组织机构的成长，它们必须建立一些硬性规定来帮助运营业务。这些硬性规定通常有着层次化的结构，根据制定好的规则和过程进行运作。虽然硬性规定常常被视\r\n为麻烦的、有害的，但除了最小的公司之外，它们都有存在的必要。然而，必须正确地构建和管理，否则将产生延迟和低效。原因在于，就像人体的疤痕组织一样，\r\n硬性规定提供了保护，但同时也限制了速度和灵活性。\r\n</p>\r\n<p>\r\n	硬性规定的基本目的是要自动处理业务的运营细节。在正确运行时，它们可以节约高级经理的\r\n时间，使他们专注于业务的核心部分。例如，硬性规定可以例行处理一些任务，如运营自助餐厅，保持场地的干净和舒适，处理工资单、账单和开销，管理其他的业\r\n务日常细节等。在这些领域的硬性规定管理风格很少对业务的核心领域产生影响。但是，硬性规定在涉及更关键的活动时，可能会带来麻烦。下面的例子说明了这种\r\n事情是如何发生的。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">&nbsp;软件危机</span>\r\n</h3>\r\n<p>\r\n	公司的软件工作一直以来就是麻烦，但现在它太大，与业务的关系太深，因此无法忽略。软件部门一直延迟交付程序，公司的许多产品因为软件问题而落后于进度计划。这个部门麻烦深重，所以副总裁炒掉了软件部主任，要布兰登取而代之。他的任务是让软件工作摆脱失控状态。\r\n</p>\r\n<p>\r\n	布\r\n兰登视察了最大的3个开发团队，发现没有人有好的计划或进度表。虽然每个人都在努力工作，但工作混乱而失控。布兰登决定取消所有原有的进度计划，并要求每\r\n个软件团队制作一份详细的工作计划。他将复查并批准这些计划，并亲自做出所有将来的承诺。在副总裁批准了这个恢复计划之后，布兰登向他的经理发出了一道指\r\n示，告诉他们为所有的项目制定详细的计划，并在60天内和他一起复查。在他拒绝了前几份计划之后，他的手下知道了需要的是什么，也知道了如何让计划大幅改\r\n进。然后布兰登基于复查并批准的计划，发布了一组新的承诺，开发团队开始按进度计划交付产品了。\r\n</p>\r\n<p>\r\n	只要布兰登能够复查所有建议的承诺并亲自检\r\n查支持计划的品质，他的复查系统就工作得相当不错。但是，随着组织机构的成长，复查需要太多的时间，所以他发起了一个员工复查系统。目标是关注他在计划中\r\n发现的最常见的问题：那些常常忽略掉的活动。例如，项目的一些成本可能没有包含在预算之内，关键的需求可能被忽略，测试、维护和现场支持可能遗漏。\r\n</p>\r\n<p>\r\n	针\r\n对这个问题，他先让所有关键部门的代表来复查每份计划，然后再把计划送给他。这种方法有效，他不再必须亲自从头到尾复查每一份计划。但大约过了一年，市场\r\n和支持团队意识到，他们拥有了以前从未有过的影响力。他们开始拒绝批准，直到他们的特殊需求得到满足。市场部门在一些讨好用户的需求上讨价还价，服务部门\r\n抗议延迟缺陷修复的数目，测试部门则力争他们需要的资源。在这些问题变得严重之前，布兰登已经得到了晋升，复查系统变成了正常业务中的障碍。新的主任没有\r\n意识到问题和导致问题的原因，所以他从没想过放弃或改变该复查系统。\r\n</p>\r\n<p>\r\n	虽然布兰登的复查系统的最初目的值得称赞，但它已变成一个硬性规定，像\r\n许多这样的过程一样，它很快就被误用了。硬性规定者常常在他们狭窄的权力范围内拥有相当的权力，但他们的要求可能非常过分，甚至不合理。根本问题就在于，\r\n布兰登使用了一个硬性规定，作为强迫他的手下正确完成工作的机制。\r\n</p>\r\n<p>\r\n	让知识员工遵守确定的过程，这是一种代价高昂而又常常低效的方式。虽然这\r\n通常有效，但也让那些经常视野狭窄的员工拥有更多权力，凌驾于知识员工之上。这导致了延迟，限制了工程师创新的能力，让他们几乎不能很快地完成任何事情。\r\n同时，人们很快忘记了为什么当初要建立硬性规定，于是它就变成了低效率的仪式。也许最糟糕的结果就是，这样的硬性规定告诉知识员工，管理层不相信他们可以\r\n正确地完成他们的工作。虽然确保知识员工正确地完成工作是非常重要的，但硬性规定是一种代价高昂的手段。下面的例子展示了一个小而快速成长的公司如何应对\r\n它的成长问题。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">&nbsp;Quarksoft的故事</span>\r\n</h3>\r\n<p>\r\n	当\r\n奎塔 （Cesar Montes de Oca Vazquez）和瑞卡多（Ricardo Vidrio \r\nDelgadilllo）在墨西哥的蒙特雷科技（Tecnológico de \r\nMonterrey）大学开始他们的工程师生涯，做了约6年的软件工程师时，他们决定去美国的卡内基·梅隆大学大学（CMU）攻读软件工程硕士学位。在\r\nCMU，他们使用了SEI最新的软件工程方法TSP来完成他们的课程项目，并开始相信使用一个确定的、得到测量的知识工作过程是更好的软件开发方法，强过\r\n他们在墨西哥看到过的任何方法。\r\n</p>\r\n<p>\r\n	在从CMU毕业后，他们意识到他们拥有了独特的技能，可以帮助他们组建一家公司。通过利用TSP在墨西哥建\r\n立第一家软件公司，他们相信他们可以比其他公司做得更好，能够非常成功。在2000年，他们开始成为软件咨询师，然后在2001年5月，他们组建了\r\nQuarksoft。虽然当时他们还没有客户，但他们从11个员工开始，这些员工接受了TSP方法的培训。他们直到9月才找到第一个客户，但他们一起维持\r\n着这家公司，并让它缓慢成长。到了2004年，他们有了50名工程师，到了2006年，工程师人数达到了70。然后他们赢得了一些大合同，到了2009年\r\n年末，他们有了315名员工。\r\n</p>\r\n<p>\r\n	因为他们的员工使用的软件方法要求工程师在工作中收集并使用数据，所以该公司就能够建立一个精确、有效的管理\r\n系统。他们也让工程师团队自己制订自己的计划，以满足管理层的项目要求。在管理层复查并批准了团队的计划之后，工程师就有责任管理他们的承诺，有责任向管\r\n理层报告项目的状态，并在需要帮助处理风险或问题时找到管理层。\r\n</p>\r\n<p>\r\n	开发人员对他们自己的工作感到负有责任，行为就像他们是管理团队的一部分。\r\n因为他们制订自己的计划并确定自己的过程，所以他们有动力去遵守这些计划和过程。他们也很快学会了利用过程数据来评估他们的工作，测量项目的状态，并决定\r\n如何最好地实现业务目标和技术目标。为了帮助团队完成他们的工作，管理层建立了一个现场指导系统，指导项目启动和团队运作。结果是团队确实遵守了他们确定\r\n的过程和计划，所以几乎不需要一个硬性规定系统来强制实现标准的公司过程。\r\n</p>\r\n<p>\r\n	这种管理风格带来了一致的非凡团队表现，也为公司带来了快速增长\r\n的业务量。公司还获得了两个重要的墨西哥行业大奖。在2008年，Dell和American \r\nExpress都将Quarksoft评为该国最具创新的公司。在2009年，《CNN Expansion》杂志将它评为墨西哥十大最具创新公司之一。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">&nbsp;Quarksoft的管理系统</span>\r\n</h3>\r\n<p>\r\n	根\r\n据软件行业中大多数公司在成本和进度方面的糟糕表现来判断，软件工程是一门很难掌握的技术。然而，即便在这个复杂的领域，奎塔和瑞卡多也建立了一个盈利的\r\n公司，向客户提供高品质的产品和服务。这种非凡表现的首要原因就是奎塔和瑞卡多采用的公司管理风格。这种工作方式带来的业务上的好处可以从4个方面来描\r\n述：精确的数据、训练有素的团队、承诺负责制和品质。\r\n</p>\r\n<p>\r\n	<b>精确的数据</b>\r\n</p>\r\n<p>\r\n	要遵守TSP方法，工程团队和所有团队成员就\r\n要收集精确的数据，包括花的时间，生产的产品规模，以及引入和消除的缺陷。让工程师完整而准确地收集他们的工作数据是较大的挑战。即使拥有像他们一样的经\r\n验，Quarksoft的经理仍然称之为关键领域，需要不断注意和强调。但是，有了来自TSP团队的详细状态报告，经理就能够精确地、反应迅速地管理业\r\n务。工程师收集的数据涵盖他们所有的项目工作，他们每天都收集这些数据。有了这些精确的状态信息，团队就能够每周准确地报告成本和进度计划的进展。管理层\r\n于是就能够随时知道工作的进度，并能够立即响应项目的问题，或在需要变化时快速调整业务计划。\r\n</p>\r\n<p>\r\n	<b>训练有素的团队</b>\r\n</p>\r\n<p>\r\n	大\r\n多数执行官和高级经理都会同意团队很重要，但他们一般相信他们的手下已经在执行很好的团队协作实践。然而，Quarksoft遵循一个确定的过程来建立团\r\n队，指导并培训团队遵守他们的详细计划和运作过程。具体TSP过程是如何做的将在后续章节中介绍，其目标就是建立一个团结一致的项目团队，理解工作所处的\r\n业务背景，在工作方式上训练有素。这确保了所有工程师都理解他们的工作任务的原因，并感觉到有责任遵守他们确定的过程和计划。这也给他们授权，让他们成为\r\n创业者，像管理团队的成员一样做事。当他们对改进业务有想法，或者看到需要改变或修复的事情时，他们就可以自行改变，或将问题提交到相应的管理层。\r\n</p>\r\n<p>\r\n	通\r\n过鼓励团队参与和自管理，Quardsoft利用了员工的创造性。这让他们能够进行快速、创新的改进，并帮助他们培养未来的经理和领导者。这也在很大程度\r\n上消除了硬性规定的需要，而许多其他组织机构需要通过硬性规定来强制开发团队遵守业务纪律。然而，Quardsoft的管理层确实建立了一个硬性规定，用\r\n于检查过程数据的收集、管理和使用。就像财务数据一样，他们发现对于运营一个企业来说，及时、完整和精确的过程数据是很重要的，对于管理和改进盈利能力也\r\n很重要。\r\n</p>\r\n<p>\r\n	<b>承诺负责制</b>\r\n</p>\r\n<p>\r\n	也许Quardsoft的管理系统中最重要的元素就是它处理承诺的方式。在开始每一个项目\r\n时，执行官或经理负责项目的启动，与市场或客户代表一起，向工程团队解释公司在这项工作上的目标，以及客户为什么想要它。工程团队然后花几天时间制订一份\r\n工作计划，并向同一个管理小组介绍其计划。在这个决定性的启动会议上，工程团队请求批准计划，或针对任何需要更改的地方进行协商。\r\n</p>\r\n<p>\r\n	这个承诺\r\n过程称为TSP启动（TSP \r\nlaunch），它引导受过适当培训的团队制订完整而实际的计划。然后，有了合理的精确计划和全心投入的团队，成员们就有动力去做任何事情，以实现承诺。\r\n虽然所有的开发项目都会遇到让人吃惊的情况和问题，但如果这些问题能够立即意识到并加以关注，它们通常就能很快解决。因此，Quarksoft的TSP团\r\n队很少不能兑现他们的交付承诺。\r\n</p>\r\n<p>\r\n	因为Quarksoft的大部分业务都是固定费用的合同，所以让团队制订他们自己的计划似乎有些冒险。但\r\n是，根据大量历史项目表现的数据，管理层就有了一个良好的基础，来制订和管理对客户的承诺。像在许多其他行业一样，他们意识到与客户进行合同谈判时，主要\r\n考虑是竞争和业务价值。虽然工程成本很重要，但它应该主要用于估计项目的盈利能力和风险水平。当管理层决定了最佳价格和交付日期后，团队的挑战就是确保管\r\n理层为他们提供足够的资源，以满足进度计划的需要，同时让所有团队成员为共同利益而努力。\r\n</p>\r\n<p>\r\n	<b>品质</b>\r\n</p>\r\n<p>\r\n	Quarksoft\r\n管理层将工程品质放在了第一位。他们这样做是因为，他们发现最高品质的项目通常是利润最高的。由于保证了工作品质，返工成本在开发成本中降到了最小。但对\r\n于知识工作来说，一致的高品质工作只能通过受过适当培训并且积极主动的人来实现。Quarksoft的管理层也发现，要一致地实现他们的进度计划承诺，他\r\n们必须在项目需要时提供有适当技能的、受过培训的人力资源。而且，由于所有TSP团队使用共同的过程，收集并使用相同的过程测量指标，因此，团队成员在项\r\n目间调动也相对容易一些。\r\n</p>\r\n<p>\r\n	因为员工的主动性、技能和培训是控制公司利润的主要因素，所以Quarksoft的管理层投入了大量的时间和精\r\n力，激励、招募、培训和培养员工。为了管理这些领域并确保每个项目都有技能和能力合适的骨干，他们让研发副总裁负责招聘、培训和人员培养。培训与个人培养\r\n计划也是每个经理的重要职责之一。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">Quarksoft的执行官团队</span>\r\n</h3>\r\n<p>\r\n	当\r\n奎塔和瑞卡多创建Quarksoft时，奎塔的兄弟卡洛斯（Carlos Montes de Oca \r\nVazquez）接受了TSP培训，并加入一所大学，担任计算机科学教授。几年之后，Quarksoft有了相当的发展，所以奎塔和瑞卡多邀请卡洛斯加入\r\n公司，担任研发副总裁。于是他们组成了公司管理团队，包括首席执行官奎塔、首席运营官瑞卡多与研发副总裁卡洛斯。\r\n</p>\r\n<p>\r\n	因为他们都接受过TSP培\r\n训，所以他们决定按照知识工作团队的方式来管理公司办公室，每一个半月至两个月就复查并重新启动他们的管理计划。在这些重启计划的过程中，他们复查长期目\r\n标，并更新下一个计划周期的公司总体计划。他们也为下一计划周期制订详细的计划和目标，并指派执行官团队成员负责2～3个目标。在每周的状态会议上，他们\r\n复查目标的状态，对照计划来追踪表现，关注任何需要注意的问题。\r\n</p>\r\n<p>\r\n	因为他们在公司运营的所有方面都有精确的数据，所以Quardsoft的执行官团队尝试了多种方式来追踪、控制和指导业务。他们做事的方式反映在最近的财务管理、研发改进，以及人员评价和激励上。\r\n</p>\r\n<p>\r\n	<b>财务管理</b>\r\n</p>\r\n<p>\r\n	有\r\n了团队级的计划和报告，Quarksoft的执行官团队决定追踪每个工程项目的每月利润贡献。于是他们开发了EBITA。EBITA是一个广泛使用的公司\r\n指标，即税息及摊销前利润（Earnings Before Interest, Taxes, and Amortization）。 \r\n测量指标，来展示每个项目对公司利润的贡献。他们首先通过对照计划比较项目的进度和人工状况，以确定如何计算项目对EBITA的贡献，然后确定其他相关的\r\n直接或间接的开支，得到项目级的盈利能力全图。\r\n</p>\r\n<p>\r\n	通过每月追踪项目的EBITA，他们能够断定何时某些项目不如另一些项目盈利，也能知道原\r\n因。他们还发现，项目级的EBITA每月的变动范围在5%之内。虽然这样的精度水平比传统的按季度测量要好很多，但一个月间隔的EBITA报告不能够让他\r\n们及时地确定问题并避免问题。在许多项目中，晚一个月发现问题可能会导致巨大的额外开支。\r\n</p>\r\n<p>\r\n	他们当前的目标是改进项目级的EBITA追踪，变\r\n成一周一次。为了做到这一点，他们计划从团队每周的挣值（EarnedValue，EV）挣值（EV）是针对计划测量项目状态的一种标准方式。根据每个任\r\n务占全部计划项目工作的比例，每个任务都有一个值，当这个任务完全完成时，这个值就挣到了。这不适用于部分完成的任务。挣值是一个标准的TSP团队测量指\r\n标。 \r\n状态报告中导出项目的EBITA，并进行追踪。这是可能的，因为TSP团队使用每天的EV测量指标来管理他们自己的工作。他们每周向管理层报告EV的状\r\n态。这为执行官团队提供了数据，可以导出每周的EBITA项目指标，而且也指导团队快速地确定很小的当日进度延迟（这种延迟在开发项目中是很常见的），并\r\n进行恢复。有了这种级别的精确性，管理团队希望能够及时识别项目的EBITA问题并采取措施。\r\n</p>\r\n<p>\r\n	<b>研发改进</b>\r\n</p>\r\n<p>\r\n	在研发\r\n领域，卡洛斯首先考虑的是确保开发团队使用最新、最好的技术实践。这也是为什么他负责招聘、培训和个人培养的原因之一。他还有一个目标是让每个团队运作在\r\nCMMI第5级，即最高的CMMI级别。虽然TSP让Quarksoft实现了很高水平的项目表现，但TSP是对CMMI的团队级补充，而不是替代品。因\r\n此，CMMI包含了一些额外而有用的、组织机构级的过程改进活动。\r\n</p>\r\n<p>\r\n	卡洛斯的目标是填平这一缺口。他计划采用CMMI第5级的持续改进实践，帮助公司持续改进产品品质和项目可预测性。卡洛斯计划采用TSP的测量指标来记录缺陷的引入和去除、项目的开支表现，以及组件品质档案，目的是建立并监控团队级的改进目标。\r\n</p>\r\n<p>\r\n	<b>人员评价和激励</b>\r\n</p>\r\n<p>\r\n	在\r\n人员评价和激励方面，Quarksoft采用360度人员评价工具。在这种方式下，每个雇员接受他的平级同事、客户、下级和老板的评分。公司也有一个奖金\r\n系统，每个人从中获得一份资金，作为年薪的一部分。奖金是根据当前公司和项目的盈利能力来确定的。例如，每个团队都有一个利润目标，如果团队实现了这个目\r\n标，部分额外的利润就会作为奖金发给团队。将来，公司还会建立与团队的EBITA表现的联系，这样团队成员就会看到他们个人的表现如何影响公司的盈利能力\r\n和工作，从而让个人和团队的EBITA表现最大化。\r\n</p>\r\n<p>\r\n	<b>&nbsp;管理硬性规定</b>\r\n</p>\r\n<p>\r\n	随着组织机构的成长和成熟，与较小的、不成\r\n熟的竞争者相比，他们拥有许多优势。较大的组织机构有资源探索新的机会，也有更多的人员和更多的潜在创新思想。这些组织机构有更大的客户群体，也建立了一\r\n定的声誉，有些公司甚至在传统市场上具有压倒性优势。在所有这些优势下，人们可能认为这些较大的公司的表现总是会胜过较小的竞争者。然而历史表明，总的来\r\n说，较小公司的表现总是胜过较大的竞争对手，不论是在创造新的工作岗位方面，还是在开发创新产品方面。\r\n</p>\r\n<p>\r\n	虽然大公司低效率的潜在原因有很多，\r\n但管理硬性规定几乎肯定是其中最重要的一个原因。硬性规定的例行部分通常应该用传统的方式进行管理，如360度评分系统，或其他优先考虑用户服务和客户满\r\n意度的方式。然而，硬性规定涉及核心业务活动的方面应该被视为疤痕组织，其目的是为了防止以前的问题再次发生。就像布兰登的复查系统，这样的硬性规定可能\r\n在短期内是必需的，但只要可行，就应该用某种较轻的机制来代替。这样的过程强迫存在的时间越长，就越可能被误用，越会限制组织机构的速度和灵活性。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">&nbsp;小结与结论</span>\r\n</h3>\r\n<p>\r\n	本文讨论了管理成长中的组织机构。这里一共提出的7个关键观点：\r\n</p>\r\n<p>\r\n	1）随着组织机构的成长，它们必须建立硬性规定来帮助业务运营。\r\n</p>\r\n<p>\r\n	2）运营例行工作的硬性规定很少有问题，如自助餐厅、工资表，或场所维护等工作。\r\n</p>\r\n<p>\r\n	3）然而，如果硬性规定用于强制实现核心业务的标准过程，可能带来麻烦。\r\n</p>\r\n<p>\r\n	4）如果硬性规定用于防止过去灾难的重演，它们可以像人体的疤痕组织一样，降低速度并限制灵活性。\r\n</p>\r\n<p>\r\n	5）硬性规定的使用也表明，管理层不相信他们的知识员工能够正确地完成工作。\r\n</p>\r\n<p>\r\n	6）虽然有时候可能需要这样的硬性规定来解决一个重要问题，但应该很快用更合适的方式来取代它们，达到同样的效果。\r\n</p>\r\n<p>\r\n	7）本书介绍的TSP方法提供了数据，管理层利用这些数据可以有效地管理成长中的组织机构。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-05-20/2819841-Management', '1', '2015-01-09 09:31:31');
INSERT INTO `yov_source` VALUES ('10021', '悉心营造良好的技术文化', '营造 技术文化', '&nbsp;&nbsp;&nbsp;&nbsp;众所周知，良好的技术文化不仅有助于人才成长和提升团队内聚力，更是吸引和留住优秀人才的一大法宝。该如何营造良好的技术文化呢？豆瓣前端团队负责人认为有工程师的荣誉感、“净化空气”、提升团队内聚力是基础。<br />', '<p>\r\n	<span style=\"color:#000000;\">众所周知，良好的技术文化不仅有助于人才成长和提升团队内聚力，更是吸引和留住优秀人才的一大法宝。然而，该如何营造良好的技术文化呢？</span> \r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">工程师的荣誉感</span> \r\n</h3>\r\n<p>\r\n	存在主义认为，文化是对一群人存在方式的描述。一个技术团队能长期存在下去，一定会产生某种技术文化。也就是说，技术文化会自然产生，受人的因素影响而变化。随着团队规模的变化，团队的技术文化可能变好或变坏，可以通过以下一些表象来衡量。\r\n</p>\r\n<ul>\r\n	<li>\r\n		技术上的活跃度。\r\n	</li>\r\n	<li>\r\n		高质人才的密度。\r\n	</li>\r\n	<li>\r\n		工程师的满意度和荣誉感。\r\n	</li>\r\n</ul>\r\n<p>\r\n	良\r\n好的技术文化能给工程师某种荣誉感，自然满意度也不会低。这种荣誉感里带有某种优越感，比如会觉得其他公司的技术很“土”，理念落后、工具落后等。一种技\r\n术文化中会包含某种共同的规范、意识、价值观和做事原则等，新加入的人如果认同，便会因受其影响而很好地融入到团队中。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">“净化空气”很重要</span> \r\n</h3>\r\n<p>\r\n	技术文化好比空气，营造良好的技术文化就是改善空气质量。降低“污染物”排放是第一要务。而哪些是“污染物”呢？\r\n</p>\r\n<ul>\r\n	<li>\r\n		过重的管理行为。管理的目的是保证产品开发按计划有序进行，而过重的管理行为会适得其反。\r\n	</li>\r\n	<li>\r\n		不当的开发流程。这是一个槽点，草率进入开发环节，会致使开发进程不是一种有序的迭代，经常由于随意变更需求而做无用功。\r\n	</li>\r\n	<li>\r\n		急功近利的心态。为了攒业绩，不管质量、不愿意同他人协作，或单纯追求本部门业绩，不为合作方考虑。\r\n	</li>\r\n	<li>\r\n		不适合团队的人。不适合团队的人不一定是能力不行，主要是价值观跟团队技术文化中的价值观相悖。这些人的负面作用远大于他们的贡献，应该果断淘汰掉。\r\n	</li>\r\n</ul>\r\n<h3>\r\n	<b><span style=\"color:#e36c09;\">提升团队内聚力</span></b> \r\n</h3>\r\n<p>\r\n	对\r\n于快速发展中的团队，注重团队技术文化塑造是团队进一步发展的基础。它的基因往往是最初的几个人或十几个人决定的。这方面跟企业文化的形成没什么不同。但\r\n如果在初期没有将其中的精华提炼出来，那么随着团队新人增多，技术文化会很快被稀释，而且人越多越难向好的方面导向。在Facebook创业初期，创始人\r\nMark确定了几条很精练的工程师的行为准则，并贴在墙上。这些准则体现出了技术上务实、践行的风格，它吸引了一些同样有如此风格的优秀工程师。整个技术\r\n团队的内聚自然越来越强。\r\n</p>\r\n<p>\r\n	对于快速发展中的团队，注重团队技术文化塑造是团队进一步发展的基础。营造良好的技术文化，需要在以下几方面努力。\r\n</p>\r\n<ul>\r\n	<li>\r\n		树立行为准则。它虽然没有强制性，但在各环节之间协作、各角色之间协作中出现分歧时，它是很好的参照物。因此它要有这样的效力，而不只是写在纸上的标语。\r\n	</li>\r\n	<li>\r\n		注重技术积累。技术积累是技术文化的底蕴。认真对待每一次项目实践，不以解决问题为目的，而是在解决问题的同时，将经验记录和积累下来。\r\n	</li>\r\n	<li>\r\n		奖励贡献，包容错误。激励制度是不可或缺的。工程师对团队的贡献要有荣誉和物质上的双重奖励，激励才能有效。包容错误，才不会让工程师顾虑重重，因为只有突破陈规、大胆尝试，才能有所收获。\r\n	</li>\r\n	<li>\r\n		人人都要有工程技术思维。良好的技术文化的形成不只是技术团队内部的事情，它也受企业风气影响。不合理的开发流程、不适当的行政制度等，都会让所有试图改善技术文化的努力付之东流。\r\n	</li>\r\n</ul>\r\n<p>\r\n	营造良好的技术文化，就好比孩子性格的养成和心智的发展，它将决定这个孩子未来的命运。\r\n</p>\r\n<br />', 'index.html', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-05-13/2819747-Management', '1', '2015-01-09 09:33:05');
INSERT INTO `yov_source` VALUES ('10022', '机会是留给有准备的人', '机会 准备', '&nbsp;&nbsp;&nbsp;&nbsp;机会总是留给有准备的人。在被从技术岗位提拔到管理岗位之前，技术人员就要具备管理岗位所需要的基本素质和能力，将功课做在前面，提拔只是最后一步。作者结合自己十年的工作经验谈了自己的看法。<br />', '<p>\r\n	机会总是留给有准备的人。在被从技术岗位提拔到管理岗位之前，技术人员就要具备管理岗位所需要的基本素质和能力，将功课做在前面，提拔只是最后一步。然而，从技术岗位走向管理岗位需要具备哪些素质呢？我结合自己十年的工作经验谈谈自己的看法。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201405/08/536af9ad46764.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201405/08/536af9ad46764.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<strong><span style=\"color:#e36c09;\">做好本职工作是第一步</span></strong>\r\n</p>\r\n<p>\r\n	技术人员能管理好自己，出色完成本职工作是第一步。在领导交给你任务时，要主动制定工作计划，定期向领导汇报工作进展，出了问题及时 沟通，且要勇于承担责任，同时确保工作顺利进行。如果能让领导对你的工作完全信任和放心，那么你在自我管理上就已经准备好了。\r\n</p>\r\n<p>\r\n	<strong><span style=\"color:#e36c09;\">打好群众基础</span></strong>\r\n</p>\r\n<p>\r\n	在管好自己的前提下，还要积极帮助周围的同事。在其他同事陷入困境时，即使那件事情与你无关，也要尝试主动伸手援助，这样能帮你赢得同事的信任和尊敬，慢慢在同事中树立的威信。\r\n</p>\r\n<p>\r\n	<strong><span style=\"color:#e36c09;\">提升思考问题的高度</span></strong>\r\n</p>\r\n<p>\r\n	这是大多数技术人员最难跨越的一步。技术人员要多学习、多思考，逐渐提升自己思考问题的高度和认识事物的广度。\r\n</p>\r\n<p>\r\n	<strong><span style=\"color:#e36c09;\">学习管理知识</span></strong>\r\n</p>\r\n<p>\r\n	未\r\n来你将领导一个团队，你的成功将建立在团队成员成功的基础上，因此要考虑如何领导整个团队取得成功。而“管理”与解决技术问题完全不同，技 \r\n术知识的对与错能很明显地判断出来，而人与人之间千差万别，如何安排每个人的工作，如何调动他们的积极性，如何处理人员间的冲突，却比较复杂，且不像技术\r\n 问题那么显而易见，需要细心体会、提前学习。\r\n</p>\r\n<p>\r\n	<strong><span style=\"color:#e36c09;\">培养管理能力</span></strong>\r\n</p>\r\n<p>\r\n	技术人员有时也需要和他人合作完成一个比较复杂的项目，这就是培养管理能力的机会，你要能够很好地与团队成员沟通，主动工作，充分融入团体，与团队成员友好相处，互相帮助。如果每名成员都很尊重你，愿意与你合作，那么未来你成为管理者也就顺理成章了。\r\n</p>\r\n<p>\r\n	<strong><span style=\"color:#e36c09;\">沉住气</span></strong>\r\n</p>\r\n<p>\r\n	如果你既能做好本职工作，又能帮助同事，还能理解领导的思路帮领导分忧，也能带领一个小团队完成团队项目，那么接下来要做的就是耐心等待机会的到来。有时不是领导不想提拔你，而是没有机会，因此千万要耐得住性子、沉得住气。\r\n</p>\r\n<p>\r\n	成功的人永远只是少数。只有1%的人，会在阅读完一篇文章后付诸实践，希望你能成为这1%里的一员，早日完成华丽转身，成为优秀的管理人员。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-05-08/2819681-Management', '1', '2015-01-09 09:33:55');
INSERT INTO `yov_source` VALUES ('10023', '成为合格管理者的几个关键词', '管理者 关键词', '&nbsp;&nbsp;&nbsp;&nbsp;职业通路是狭窄的，“金字塔”结构很好地描绘了每个人在职场将要走过的路。芸芸技术专家总有人会面对这个华丽而痛苦的蜕变。能将技术和管理两者有效融会贯通的人才是真正的人才，才是优秀企业激烈争夺的职场精英。<br />', '<p>\r\n	职业通路是狭窄的，“金字塔”结构很好地描绘了每个人在职场将要走过的路。在职位与薪酬待遇紧密挂钩的当今职场，芸芸技术专家总有一天会面对这个华\r\n丽而痛苦的蜕变。能将技术和管理两者有效融会贯通的人才是真正的人才，才是优秀企业激烈争夺的职场精英。本文总结了我多年工作的经验和体会。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201405/05/5366f0d6083fa.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201405/05/5366f0d6083fa.jpg\" border=\"0\" /></a>\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">大局观</span></strong>\r\n</h3>\r\n<p>\r\n	当\r\n一名优秀的狙击手成为将军时，首先要克服的问题就是自己射击技术太好，总想亲自上阵。卓越的技术能力成就了今时今日的我们，但在管理岗位上，已经不能再一\r\n味地沉迷于对技术的不断追逐。要更清楚地认识到自己的任务已经不再是单纯的技术工作，团队管理的职能已将我们提升到更重要的位置，因此从团队整体出发考虑\r\n整个集体的成败得失是管理者应具备的基本素质之一。\r\n</p>\r\n<p>\r\n	当然，作为IT从业人员，技术工作将伴随我们的整个职业生涯，我们仍然可以是一名技术专\r\n家，拥有扎实的技术背景，这有助于更好地与队员沟通，更好地理解队员遇到的困难和取得的成就。而卓越的管理能力可以使团队团结一致，为共同的目标不懈努\r\n力，取得最后的胜利。因此，在拥有大局观的同时，技术能力和管理能力两者相辅相成、缺一不可。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">融合的艺术</span></strong>\r\n</h3>\r\n<p>\r\n	IT组织往往是复杂的，通常由各领域的技术专家、开发者、第三方顾问、供应商的实施人员等组成。作为一名管理者，一定要懂得融合的艺术—既能管控和协调各方资源，避免资源浪费，又能有效地组织大家共同前进，提供一个能让每个人充分发挥各自作用的环境。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">沟通与演讲</span></strong>\r\n</h3>\r\n<p>\r\n	沟\r\n通和演讲可能是大多数技术出身的管理者的最痛处。然而，没有良好的沟通和演讲能力，很难成为一个好的管理者。我们不再是在小办公隔断里带着耳机编码一天的\r\n工程师，也不再是机房里负责维护设备的系统管理人员。管理岗位需要与人交流，了解工作进展、鼓励队员、讲解公司管理要求等，无一不需要良好的沟通能力。与\r\n此同时，向上级汇报工作，展示工作成果，与客户或供应商互动，又毫无例外地需要卓越的演讲能力。\r\n</p>\r\n<p>\r\n	事实上，提高沟通与演讲能力，无非要关注两方面：提高理解别人的能力和增加别人理解认同自己的可能性。这就要不断丰富自己的知识面，与各个层面的人进行交流，多在各种会议中进行演讲，一定能顺利通过这道门槛。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">诚信</span>\r\n</h3>\r\n<p>\r\n	回\r\n想我们当年多么痛恨管理层的“谎言”和从未兑现的“承诺”，因此在走上管理岗位后一定要铭记这点。不要承诺做不到的事情，承诺了就要兑现，给别人期望然后\r\n再熄灭它，比没有期望的打击来得更大。没有诚信的管理者所管理的团队是没有战斗力的，自己都做不到的事情，如何期待队员们做到呢？\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">总结</span></strong>\r\n</h3>\r\n<p>\r\n	管理是多个学科和多种能力的结合体。因此，从技术岗位走向管理岗位是一个循序渐进的过程，并非一蹴而就。只有在工作中不断学习和积累，不断完善自己，才能成为一名真正合格的管理者。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-05-05/2819612-Management', '1', '2015-01-09 09:38:04');
INSERT INTO `yov_source` VALUES ('10024', '有效控制项目进度的几点技巧', '控制 项目进度 技巧', '&nbsp;&nbsp;&nbsp;&nbsp;本文作者结合自己多年的项目管理实践，总结出有效控制项目进度的几点技巧。并从软件开发项目周期的3个阶段：获取需求和定义产品、开发和测试、部署和运维进行详细阐释。<br />', '<p>\r\n	软件开发的项目周期大体分为3个阶段：获取需求和定义产品、开发和测试、部署和运维。\r\n</p>\r\n<p>\r\n	在获取需求和定义产品阶段，需要防止的不是进度太慢而是过快、过草率。特别是对于创业公司的产品经理来说，很可能因为看到开发人员无事可做而感到压力，所以尽快完成产品定义，而没有充分了解市场和竞争对手信息，没有与合作伙伴充分沟通，没有做深入的思考。\r\n</p>\r\n<p>\r\n	这\r\n些因仓促而隐藏的问题，发现得早则导致开发阶段大量返工，发现得晚则导致产品上线后不受欢迎。常听一些人说现在互联网开发，讲究快速迭代和敏捷，边做边\r\n想，返工也正常。这是一个误解。快速迭代指的是将不同版本之间的周期缩短，小步快跑，而不是在一个版本的周期内来回折腾。\r\n</p>\r\n<p>\r\n	在开发和测试阶段，项目管理重在跟踪进度和保持沟通—用集成和演示跟踪进度，基于Bug沟通问题。\r\n</p>\r\n<p>\r\n	要\r\n做到各个模块外部接口相对清晰稳定，并尽早完成各个模块间的集成，最晚不超过开发周期的1/4时间。第一次集成之后，就应该开始每日集成和每周演示。每日\r\n集成使得测试团队每天能同步测试最新的代码，帮助开发团队尽早发现问题并及时了解技术细节上的进度；每周演示使产品经理、项目经理和管理层能从用户的角度\r\n感受产品，使他们对产品有信心。集成和演示是项目管理的心跳，合理利用它们，有助于及时把握项目的健康程度。\r\n</p>\r\n<p>\r\n	无论开发流程多敏捷，工程师能\r\n力多强，记录和跟踪Bug都是必不可少的。开发团队和测试团队的沟通都应该基于Bug，才能言之有物。开发工程师每次提交代码都应该记录是针对哪个Bug\r\n的，每日工作简报都应该写今天关/开了哪些Bug。要在每日晨会（站着开，一般15分钟内）时说好，今天打算解决哪些Bug，其中有哪些点不清楚，需要和\r\n谁沟通。\r\n</p>\r\n<p>\r\n	在后期部署和维护阶段，要快速响应。考验的是团队成员的责任心和抗压能力。系统运维工程师要深夜工作，因为部署可能要在流量低的时\r\n候进行；项目经理要保持能随时沟通，做出快速而准确的决定，鼓励团队并做出表率；一旦出现高危害Bug，开发团队要在24小时内准备好补丁。Amazon\r\n的做法比较有趣：在产品刚上线一段时间内，开发工程师要保持24小时开机。如果自己负责的模块中出现高危害Bug，那么很可能会在深夜被系统运维工程师叫\r\n醒。这样不仅能保证快速响应，还能让工程师意识到：前期代码不好好写，后期就别指望能好好睡觉了。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-04-28/2819526-Project-Managment', '1', '2015-01-09 09:39:37');
INSERT INTO `yov_source` VALUES ('10025', '如何有效地控制项目进度——重视细节', '控制 项目进度 细节', '&nbsp;&nbsp;&nbsp;&nbsp;项目管理的目的是能够按照预定的成本、进度和质量要求顺利地对人员、产品、过程和项目进行分析和管理。在项目管理中，有些细节需要引起项目经理的重视。<br />', '<p>\r\n	项目管理的目的是能够按照预定的成本、进度和质量要求顺利地对人员、产品、过程和项目进行分析和管理。在项目管理中，有些细节需要引起项目经理的重视。\r\n</p>\r\n<p>\r\n	<strong>根据经验规划</strong>\r\n</p>\r\n<p>\r\n	即先做少量的规划，再根据实践过程中得到的信息来做进一步的规划，这样可提高项目的可行性。试图预测未来的规划很难奏效，除非你是个预言家，否则应该尽量在项目中根据经验做规划和日程安排。\r\n</p>\r\n<p>\r\n	<strong>安排项目日程</strong>\r\n</p>\r\n<p>\r\n	首先，要按可交付物安排日程，而不是按功能；其次，要以迭代的方式安排日程；再次，要使用难度较低的工具安排项目日程。过度追求完美的项目时间表可能意味着在实际项目中浪费更多的时间。\r\n</p>\r\n<p>\r\n	<strong>足够的时间规划</strong>\r\n</p>\r\n<p>\r\n	日程安排是由整个项目团队共同制定的，因此，每个人都要对日程有信心。不过，天有不测风云，总会发生点儿意外，所以我们要做足够的时间规划，而且要使用波浪式规划，这样才可以随着环境的变化灵活地更新日程安排。\r\n</p>\r\n<p>\r\n	<strong>管理会议</strong>\r\n</p>\r\n<p>\r\n	在\r\n组织项目时，项目经理要尽量避免浪费时间的会议。要让团队将注意力集中在项目上，这是最简单、最有效的方式。在帮助团队朝着合理的交付截止日期前进时，要\r\n保证团队不受外界干扰和影响。如果会议对于任何人都毫无价值，那就取消掉；同时准许团队成员不参与无法贡献和收获价值的会议。也许有些团队成员会不高兴，\r\n认为你觉得他们不够重要从而不能参加会议。要跟他们解释清楚，你不让他们参会是因为他们太重要了。\r\n</p>\r\n<p>\r\n	<strong>速度图</strong>\r\n</p>\r\n<p>\r\n	如\r\n果只能绘制一个图表，那就选择速度图。速度图集三种度量方式为一身：需求、已完成工作和时间。虽然无法从中看到自己希望了解的缺陷率或成本，却能从该图中\r\n对项目的整体进度有所掌握。使用速度图可以使你在一张图中同时度量多个趋势：整体需求数量和已完成工作，其中包括所有的测试、文档以及项目需要等其他内\r\n容。这是最有用的图表，是项目经理的好朋友。但要注意，速度图只是获取数据的工具，不是目的。\r\n</p>\r\n<p>\r\n	<strong>测试</strong>\r\n</p>\r\n<p>\r\n	从\r\n项目开始就要坚持“减少技术债务”的原则，让测试与开发同步进行。测试会将项目的风险展现在众人面前，大家越早看到这些风险越好。在采纳顺序式生命周期的\r\n项目中，要让测试人员参与到需求分析阶段，询问他们关于产品需求的反馈；在采用迭代式生命周期的项目中，要请测试人员帮助评估原型；使用增量式生命周期的\r\n项目，只要有可供测试的部分，就可以让测试人员尽早开始测试功能；在实施敏捷的项目中，要确保测试人员与开发人员一起工作，以开展技术层面的测试。同时，\r\n还要让测试人员与产品负责人一起，编写面向客户层面的测试。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-04-28/2819521-Project-Control', '1', '2015-01-09 09:40:40');
INSERT INTO `yov_source` VALUES ('10026', '天猫核心系统负责人：项目延期原因及应对之道', '项目延期 原因 应对之道', '&nbsp;&nbsp;&nbsp;&nbsp;每个项目经理都希望能有效地控制项目进度。但看似简单的事情，实际操作起来却常常不尽如人意。即使在成熟的大公司里，有着完善的项目管理流程，配备一流的团队，项目延期事件还是频频发生。这里分析主要的三个原因。<br />', '<p>\r\n	每个项目经理都希望能有效地控制项目进度。但这件看似简单的事情，实际操作起来却常常不尽如人意。即使在成熟的大公司里，有着完善的项目管理流程，配备着一流的团队，项目延期事件还是频频发生。这里分析主要的三个原因。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201404/25/5359d84f0e620.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201404/25/5359d84f0e620_middle.jpg?_=599\" alt=\"\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<strong>常见的原因之计划不清</strong>\r\n</p>\r\n<p>\r\n	很\r\n多项目经理，计划做得很漂亮，却总是计划赶不上变化。原因 \r\n在于，有些时候，按工作量预估的发布日期却得不到领导的同意，领导有时会说我们现在就是和时间赛跑，这个项目必须在某某时间发布。这将致使计划推倒重来，\r\n一切都要赶进度。而对于其他团队成员来说，这份计划没有同他们商量，无异于强压任务。项目还没开始，抱怨声就不绝于耳。因此，项目工具选得好、任务划分细\r\n 致清楚只是做好计划的基础，更重要的是项目计划要得领导和团队成员的认同，并愿意为之全力以赴。\r\n</p>\r\n<p>\r\n	总之，想做好项目计划，要做好以下三点。\r\n</p>\r\n<ul>\r\n	<li>\r\n		项目计划前，先和产品经理、上级领导沟通好，确定这个项目的轻重缓急。\r\n	</li>\r\n	<li>\r\n		团队成员要达成一致意见，项目经理不可独断专行。\r\n	</li>\r\n	<li>\r\n		项目计划要细化到天、功能点要责任到人、确定里程碑点。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<strong>常见的原因之需求问题</strong>\r\n</p>\r\n<p>\r\n	需\r\n求中的功能点要在PRD（产品需求文档）中罗列清楚，业务流程要写得完整清晰，交互细节要体现在视觉稿中。要组织项目组所有成员参加PRD评审，评审时要\r\n 针对具体的问题，给出明确的处理意见。暂时不能确认的问题，问题跟进人要在限定时间内给出反馈，项目经理可以制定问题跟进表格。\r\n</p>\r\n<p>\r\n	项目进行\r\n中 \r\n的需求变更，尽量在前期提出。在项目管理的过程中，当前期的需求和计划都确定后，项目经理不能只顾着跟进开发和测试的进度，也要阶段性地和需求方多沟通，\r\n让他们及时反馈意见。不要等到临发布时，产品经理跑过来说“我要的不是这样的，这里要改一下”。永远不要把问题留到最后一分钟，要超前一步，留有余地。下\r\n 面是一个真实的案例。\r\n</p>\r\n<p>\r\n	案例情景：该项目的整个周期为2个月，有3轮功能测试。当第3轮功能测试结束时，也就是即将进入预发布阶段时，产品经理才给出用户反馈并要求按用户的反馈修改。改动的地方涉及到页面的样式、文案、SQL语句和校验逻辑等，总共可能有20多个文件要被改动。\r\n</p>\r\n<p>\r\n	项目经理建议只改页面的样式和文案，其他部分先不要改，等下次升级维护时再改，否则可能会影响发布。而在多次交涉无果的情况下，开发人员只能硬着头皮修改，测试人员只能再重新测一轮。虽然大家努力地按需求方的要求做了，但项目延期已不可避免了。\r\n</p>\r\n<p>\r\n	<strong>常见的原因之沟通不畅</strong>\r\n</p>\r\n<p>\r\n	为某项目临时组建的团队往往来自不同部门，团队成员之间不熟悉，此时，要为团队建立一个沟通通道，确保沟通顺畅。常用方式为：\r\n</p>\r\n<ul>\r\n	<li>\r\n		建立一个内部网络空间，所有文档资源统一存放，供团队成员共享；\r\n	</li>\r\n	<li>\r\n		利用即时聊天工具，建立一个项目群，每天通报项目进度；\r\n	</li>\r\n	<li>\r\n		建立项目邮件组，所有变更达成一致后，发送邮件确认；\r\n	</li>\r\n	<li>\r\n		每天要开15分钟晨会，每周一次周会，每周发送项目周报；\r\n	</li>\r\n	<li>\r\n		跨团队项目，最好申请独立的项目室，所有项目组成员坐在一起工作，降低沟通成本。\r\n	</li>\r\n</ul>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-04-25/2819493-Project-Delay', '1', '2015-01-09 09:42:05');
INSERT INTO `yov_source` VALUES ('10027', '如何实现团队的自组织管理', '团队 自组织 管理', '&nbsp;&nbsp;&nbsp;&nbsp;实现团队的自组织管理，有助于团队形成合力，极大地提升团队整体的工作效率。本文结合敏捷实践经历，阐释了何为自组织管理、为什么进行自组织管理、如何进行自组织管理等内容，同时给出了团队实施自组织管理的效果。<br />', '<p>\r\n	在《射雕英雄传》里，以全真七子的武功是打不过东邪黄药师的，但当他们摆出了“天罡北斗阵”时，却能和黄药师打成平手。这就是团队合作形成合力的威力。\r\n</p>\r\n<p>\r\n	自组织管理是原阿里ITU内贸团队采取的一种敏捷实践，该实践旨在帮助团队成员加强团队合作，形成团队的合力，从而提高团队整体的工作效率。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">何为自组织管理</span></strong>\r\n</h3>\r\n<p>\r\n	我们提倡的自组织管理是指团队中的每一位成员都是团队的Owner，都为团队的目标负责，在团队事务上没有一位绝对的管理者，每位团队成员都可以作为团队事务的管理者，组织团队中的所有成员一起完成团队事务。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">为什么进行自组织管理</span></strong>\r\n</h3>\r\n<p>\r\n	传统管理指的是在一个团队中由一个人负责团队的管理，而其他成员不参与团队事务的管理，管理者发布命令，团队成员执行命令。这样的管理存在诸多弊端。\r\n</p>\r\n<p>\r\n	传统管理对于团队事务很难做到面面俱到。要创建一个优秀的团队，需要管理的团队事务非常多，例如项目管理、组织团队建设活动和团队分享活动等。如果仅由一位管理者来负责管理很难全部完成。即使全部完成了，由于没有充足的时间进行过程管理，其结果也会打折扣。\r\n</p>\r\n<p>\r\n	传统管理执行力不够。在传统管理中，主管是指挥者，发布指令，团队成员是指令的执行者。但团队成员是人而不是机器，他们都有自己的想法，有时对于自己不认可的事情，即使内心不愿意，迫于主管的权利也只能执行，而这样做事的话往往执行力不足，经常需要主管的督促。\r\n</p>\r\n<p>\r\n	传统管理很难充分发挥团队合力。团队的合力在于每位成员都在积极主动地为团队目标付出自己的一份力。团队中经常有一些较积极的成员会提出一些好的建议和想 \r\n法，比如希望一起做某个工具，来提高工作效率，他们希望主管认可其想法，并能组织大家完成这个想法。但在传统管理中，或者因为主管认为这个想法没有价值， \r\n又或者因为管理者没有时间来组织这件事情，导致这些想法最终没有落地，于是利于团队工作的想法就会越来越少，最后只有管理者一个人来思考如何提高团队的工 \r\n作效率等事情。\r\n</p>\r\n<p>\r\n	为了消除传统管理带来的弊端，我们团队尝试进行自组织管理实践。让团队中的每一位成员都参与到团队事务管理中，让某些方面表现出过人之处的成员，管理其擅长并感兴趣的团队事务。\r\n</p>\r\n<p>\r\n	比如让喜欢旅游和娱乐活动的成员负责团队建设活动；让擅长写单元测试的成员组织大家一起提高单元测试覆盖率和质量；让擅长项目管理的同事负责项目管理；让对项目管理有兴趣有想法的同事负责组织大家开发开源项目；让喜欢写作和分享的同事负责打造团队分享的氛围。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">如何进行自组织管理</span></strong>\r\n</h3>\r\n<p>\r\n	目前，我们团队还没有实现高度的自组织管理，主要由主管向团队所有成员分配团队事务，然后团队成员组织大家一起完成这项团队事务。而组织的形式采取任务发布和认领的方式。\r\n</p>\r\n<p>\r\n	<strong>任务的发布和认领</strong>\r\n</p>\r\n<p>\r\n	组织者把团队事务分解成若干子任务，并制作成一张任务认领表放在confluence上让所有感兴趣的成员去认领。表1是一个典型的任务认领表，有些任务需要注明任务的详细信息。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201404/09/5344c1e0d8c59.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201404/09/5344c1e0d8c59.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	领取的时候必须写上计划完成时间。实践表明，领取任务的同学自己写上计划完成时间会有一种无形的督促力，能够提高任务的完成度。\r\n</p>\r\n<p>\r\n	另外，分解出来的子任务需要的时间越短越容易被领取。我们通常划分出来的一项子任务只需要1天左右的时间就能完成，完成了以后可以继续领取其他子任务。如果有些子任务没有人认领，组织者一般会去认领这些子任务，或者主动询问其他没有认领的同事有无兴趣认领这项任务。\r\n</p>\r\n<p>\r\n	<strong>促进任务的完成</strong>\r\n</p>\r\n<p>\r\n	组织者不仅负责任务的分配，更应该2促进任务的完成。比如组织提高单元测试的同事会针对比较难写的单元测试Case写一些分享文档，帮助大家攻克难写的单元 \r\n测试。如果在做某项子任务的过程中出现了问题，组织者要主动帮助他们解决问题。还需要对于所有的认领者给予适当的激励。比如，每个模块完成时在团队群里发 \r\n一条表扬的通知，或者请按时完成任务的同事喝饮料，以激励和提醒其他同事按时完成认领的任务。\r\n</p>\r\n<p>\r\n	<strong>鼓励每位成员都组织一项感兴趣的公共事务</strong>\r\n</p>\r\n<p>\r\n	如果只有一位团队成员组织公共事务，那么领取任务的积极性可能不会很高。而如果团队中的每位成员都组织一项公共事务的话，积极性就会高很多。\r\n</p>\r\n<p>\r\n	因为人都有互惠心理，当你支持其他同事组织的团队事务时，别人就会主动支持你组织的团队事务，这样无形当中就形成了一种积极合作的氛围，从而推动所有公共事务的进展。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">主管在自组织管理中的作用</span></strong>\r\n</h3>\r\n<p>\r\n	主管在自组织管理中充当着支持者、协调者和指导者的角色。一支传统管理团队向自组织管理团队转型，需要主管的大力支持和帮助。\r\n</p>\r\n<p>\r\n	<strong>支持组织者的工作</strong>\r\n</p>\r\n<p>\r\n	主管不仅需要口头上支持组织者的工作，比如在周会上鼓励团队每位成员去认领任务，更要在行动上支持组织者的工作，比如首先认领组织者划分的子任务。\r\n</p>\r\n<p>\r\n	<strong>赞同并支持团队成员实现自己的想法</strong>\r\n</p>\r\n<p>\r\n	主管管理的目的应该是帮助团队顺利完成工作，并且帮助团队成员快速成长。因此，当主管听到团队中一些积极的同事提出好的想法时，只要这个想法符合团队目标，应该尽量帮助他完善这个想法并支持他去做。\r\n</p>\r\n<p>\r\n	而对于不合理的建议，也应该帮助团队成员进行分析和思考，帮助他思考出这个建议不合理的原因，并使他的思考更加成熟和正确，以期望下一次能提出更好的建议。而不是没有仔细思考这个想法就拒绝了。如果贸然拒绝的次数多了，团队中积极的想法就会越来越少。\r\n</p>\r\n<p>\r\n	<strong>鼓励团队合作</strong>\r\n</p>\r\n<p>\r\n	肯定了团队成员的想法后，很多成员都会想自己去把这件事情做成，这时主管应该鼓励他采用团队合作的方式。让他分享这件事情，看看团队中是否有同学有兴趣一起做。这样不仅能快速地使这个想法落地，而且提高了团队的合作能力。\r\n</p>\r\n<p>\r\n	<strong>勇于承担责任</strong>\r\n</p>\r\n<p>\r\n	从传统管理向自组织管理转型的过渡期可能会出现一些问题，因为很多团队成员可能由于缺乏管理经验，造成项目延期或故障。这时主管应该主动承担责任，通过这种 \r\n方式信任和保护团队成员，使团队成员积极努力地把自己负责的管理职能做好。否则，一旦有问题，团队成员可能就会猜疑，甚至抱怨这种管理方式是否合理。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">如何打造自组织团队</span></strong>\r\n</h3>\r\n<p>\r\n	进行这样的自组织管理，不仅需要管理者的大力支持，更需要每位团队成员的配合和支持，所以培养团队合作氛围和团队管理能力尤其重要。\r\n</p>\r\n<p>\r\n	<strong>培养团队合作氛围</strong>\r\n</p>\r\n<p>\r\n	因为我们进行自组织管理的团队事务都倾向于通过团队合作来完成，不提倡单兵作战，所以自组织团队必须有很好的团队合作氛围。\r\n</p>\r\n<p>\r\n	在招聘时，我们倾向于招聘喜欢团队合作的成员加入团队。在工作中，通过一起解决问题来提高团队合作氛围。比如，如果晚上将发布软件的某个版本，而团队中的某 \r\n个成员开发的模块有点问题，团队成员会一起加班来分析并解决问题。在工作之外，团队会经常做一些非零和博弈活动来培养团队氛围。比如一起吃午餐、打桌球、 \r\n打牌和唱歌等。\r\n</p>\r\n<p>\r\n	<strong>锻炼团队成员的管理能力</strong>\r\n</p>\r\n<p>\r\n	因为自组织团队需要每位成员都参与到团队事务管理中，所以需要培养团队内的每位成员都有一定的管理经验。对于缺乏管理经验的成员，可以先让他们做一些简单的管理事务，如团队分享管理和团队活动管理等。\r\n</p>\r\n<h3>\r\n	<strong><span style=\"color:#e36c09;\">自组织管理的效果</span></strong>\r\n</h3>\r\n<p>\r\n	在自组织管理中，团队中的每位成员既是管理者，又是执行者。每位成员管理着自己擅长并感兴趣的事情，这样事情通常都能很好地完成。而且团队中的每位成员都能站在管理者的角度来思考问题，增加了团队成员之间彼此的理解，工作效率自然有所提高。\r\n</p>\r\n<p>\r\n	我们团队通过自组织管理完成了诸多团队事务，例如开发了一个Eclipse Code \r\nReview插件Tala，完成了单元测试行覆盖率70％、整个系统的功能导航图等。\r\n</p>\r\n<p>\r\n	自组织管理的最大特点是弱管理，鼓励团队成员自我管理，主动思考，多担当。团队成员具有强烈的自我驱动、自我完善、自我管理的意识，不仅能主动支持团队的公共事务，并且还能主动发现团队和业务中的问题，对这些问题提出改进建议，努力解决这些问题。\r\n</p>\r\n我在工作之余翻译国外的并发文献时，也运用了这种自组织管理方式来组织翻译活动。我在论坛发帖，目前已征集到十几位爱好者，翻译完成几十篇并发编程的译文，对翻译完的译文进行了互相校对。这样的形式比我一个人翻译要高效很多。<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-04-09/2819213-Team-Management', '1', '2015-01-09 09:44:20');
INSERT INTO `yov_source` VALUES ('10028', '给技术人上的管理课：激励与授权', '管理课 激励 授权', '&nbsp;&nbsp;&nbsp;&nbsp;只有工作本身带来痛苦且团队努力克服痛苦并成长，才会产生真正的激励效果。管理人应想办法优化权力结构，保留和扩大擅长的业务所需的权力，对于不甚擅长、潜在作用不大或难以驾驭的权力，则要采取措施授出或让渡。<br />', '<p>\r\n	让技术人掌握管理的要义，其实无外乎从技术人的视角来理解管理。在本系列文章的第一讲中，我们主要阐述的是管理行为本身：管理人，才是真正的管理。\r\n而管理无论具体过程如何，从结果上讲，就是要控制被管理人来完成管理人的目标。而目标本身的制定，必须得到充分的信息。在少量信息的情况下以短期计划形式\r\n步步为营地向前推进，管理人逐渐积累起长期计划所必要的信息量，最终控制团队实现之，这就是管理成功落地的最常见模式——尽管听上去不是那么激动人心。\r\n</p>\r\n<p>\r\n	但\r\n管理行为本身要成功，对于管理人来说，要做到内外兼修。我们曾谈论过管理人自身的内在修养问题——要有足够的野心和视界，能够在想象力的方面穷尽所掌握资\r\n源的整合结果，同时又要明白怎样才能把一分钱资源掰成许多份来使用。在意志力的较量中，始终把握良好的平衡感，最大程度地利用他人意志，并从小规模试错中\r\n获取和积累有用的正反两方面信息。在遇到巨大压力的时候，能挺身而出，将平时积攒的本钱拿出来，承担集中的责任。做到了这些以后，便可以将管理的影响力大\r\n大地延伸，扩展到自己所不能掌握的细节，以及自己素不相识的团队成员身上。\r\n</p>\r\n<p>\r\n	下面我们将主要集中在管理人的外向方面，讨论如何将管理实施到人。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">最好的激励工具</span>\r\n</h3>\r\n<p>\r\n	一\r\n说到激励这件事，就会有各种奇怪的理论冒出来。考察这些理论的本质，无外乎一个思路：人为设定一个绩效目标，绑定一个回报目标，然后采用各种各样的办法，\r\n让人为了达成回报目标而努力完成绩效。这种思路的危险之处，或者说可笑之处在于两点：第一，绩效目标只会越来越高，越来越让人感觉无法以合理的代价完成，\r\n而回报目标却永远只会停留在由社会平均回报所限制的框架内，甚至随着社会竞争的加剧还会下降；第二，绩效目标未必合理，回报目标也未必合理，尤其是两者的\r\n对应方式往往会更不合理。因为规则无论如何制定，总会有空子可钻，而绩效的评判成本往往超出了管理人能够计算甚至能够知晓的范围。用回报来激励人，无论是\r\n用物质激励，还是用所谓的精神激励，都只有一时之效。拿到了物质回报的，很快就会感觉不足；享受了精神回报的，也很快就会厌倦。\r\n</p>\r\n<p>\r\n	那么，什么\r\n才是最好的激励工具？是什么让人忘我工作并忠心耿耿？这个问题我和管理伙伴研究了很多年，最后得出的结论，令我们大吃一惊。我们的结论基于500人以上的\r\n长期观察，样本来自各种性质的企业—如果你要人想干活，就要让他们感觉到干活的痛苦。这么一来，不适合干活的人就会很快退出。而真正适合干活的人，则逐渐\r\n地学会苦中作乐，并找出种种提高效率的办法来缩短痛苦的时间，甚至想方设法地在需要干的活越来越多、越来越复杂的时候，调整工作方式和工作心态来保持痛苦\r\n水平的维持。经过相当长的时间以后，再回过头来看这些人，就会发现他们不仅在业务水平上达到了相当高超的程度，并且真正地体会到了从事这一行业的意义。相\r\n反，没有经历过这种痛苦的人，往往停留在一个肤浅的水平上深入不下去。\r\n</p>\r\n<p>\r\n	现在很多企业，看到Facebook和Google等为员工提供一流\r\n的生活设施，比如免费午餐、高级饮料水果、文娱活动室甚至按摩师，就想学他们的这种搞法，结果发现不管用。其实，与其说是这些办公条件激励了员工，不如说\r\n是他们极其严格的工作要求和淘汰制度，才是真正激励员工的力量所在。更不用说互联网公司，每到产品或活动上线之时，所有人上至老总，下至一线都如临大敌，\r\n无数双布满血丝的眼睛盯着每个微小的特性细节，反复推敲每一个测试用例和已知缺陷，生怕上线以后引发问责。越是成功的公司，越是成功的产品，他们能够感受\r\n到的痛苦就越大，而且是越来越大。\r\n</p>\r\n<p>\r\n	但正是在这种共同面对的痛苦面前，团队成员才凝就了集体存在感。经历过巨大的共同痛苦的团队，即使失败\r\n了，也有着不言而喻的战友情谊，这是用金钱和浅薄的精神洗脑绝对换不来的。又反观之，克服了巨大痛苦而取得成就的，这本身带来的精神愉悦，和冲击更大痛苦\r\n取得更大成就的欲望，则更是别无他法可以办到的。说白了，这就是雇佣兵和保家卫国的民兵之间存在的动力差距，从源头上就是根本不同的，完全不在于武器弹药\r\n的差别。如果技术管理人想要一支战斗力超强的队伍，就一定不要粉饰太平，反而要让团队里面的每一个人都分担工作的痛苦。管理人心中要知道施加这痛苦的意\r\n义，但不必明白告知，只有那些能够以行动坚持下来，并且自己能够找寻到工作的意义、方向和技巧的人才是真正的团队一员。态度不妨和蔼，但原则不可让步。打\r\n造一支召之即来、来之能战的队伍一定是要花时间和精力的，甚至本身就是世界上最痛苦的事情之一。但这支队伍如果能够建成，会让管理人有受用不尽的财富，而\r\n且再也不用去想什么不靠谱的回报目标，只靠工作本身就可以激励团队前进了。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">管理即服务</span>\r\n</h3>\r\n<p>\r\n	技\r\n术人向管理人转变的关键，在于服务角色的建立。能否坐视技术问题的发生，视而不见，这可以说是评判技术人转变是否功德圆满的标准。其根本原因在于，管理人\r\n一定要狠下心来，让团队而不是自己来解决技术问题，无论管理人有多少经验，有多么擅长技术—包括管理人看得见的和看不见的。最蹩脚的管理人，会不断地用自\r\n己半吊子的技术工作来干扰全职技术人的正常工作。但管理人应该不断地学习技术，即使是一直在从事纯粹管理工作的管理人，也应该努力地学习技术。目的不在于\r\n要全职做技术工作，而在于搞懂自己的管理目标应该如何用技术来实现，在技术人需要支持和帮助时，能够及时地了解应该从哪里取得相应的资源，而不致于盲目乱\r\n撞。\r\n</p>\r\n<p>\r\n	管理人不从事具体技术工作，其所有工作是为那些从事具体技术工作的技术人提供服务。管理即服务（Management as a \r\nService，MaaS）这个术语不经常被提到，但其实却说出了管理人的核心工作内容。技术人要从事技术工作，需要很多条件。从必需的硬件、软件，到学\r\n习工作技能的培训和资料，再到养家糊口的薪资，这些都是管理人需要周到考虑的地方。有很多企业，竟然用盗版软件让技术人员开展工作，这就是管理人应该感觉\r\n脸红之处。技术人员使用这样的软件来工作，就会有工作成果白白丢失的风险，还有被起诉的法律风险。还有一些企业，在需要某项技术时，开出异常的高薪来挖\r\n角，但挖来以后由于经营不善或技术方向的转变，又想方设法地钻劳动法的空子把技术人员用低廉的代价解聘。这也是非常典型的管理欠缺的表现，在这些企业工作\r\n的技术人，是悲哀的。因为总体来说，技术人普遍对于管理人的职责包含些什么的知识比较不敏感。甚至有人会工作了五六年没有加过薪水，也想不起来去问一句，\r\n直到家人问起才意识到有点儿不对，结果一问才知道原来是HR系统故障，导致每次都把他漏掉了。\r\n</p>\r\n<p>\r\n	因此，一直在从事管理工作的管理人，不要以为\r\n所有人都和自己一样，对于非技术的领域那么熟悉。从技术人转型的管理人，更是要多学习非技术领域的种种，不要身份变了，行为还不变。须知，如果管理人也在\r\n做技术，技术人也在做技术，那么技术人开展工作所必需的非技术条件，就无人关心了。\r\n</p>\r\n<p>\r\n	我有时候会看到有些创业公司，或是一些领导只懂技术不管\r\n后勤的大公司，他们员工的生活真可以用可怜来形容—成天就是吃一些高热量低营养的食物，也很少出门没什么结识异性的机会，娱乐就是同组人聚在一起打游戏。\r\n到了升职加薪的当口，领导总是准备不足，结果名额被业绩还要稍逊一筹的团队拿走大半。凡此种种，都是管理人应该引以为戒的，管理人应该时时反省自己在服务\r\n方面有什么做的不到位之处。这样，反过来，管理人才能理直气壮地要求技术人把自己该做的事做好，不应该在此处让管理人操心。\r\n</p>\r\n<p>\r\n	这和上面说的痛\r\n苦激励理论并不矛盾，管理人应该让被管理者感受到工作的痛苦，而不应该让他们感受到工作之外的痛苦。比如，工作条件恶劣的痛苦、升职涨薪空间压缩的痛苦、\r\n健康受损的痛苦等。管理人应该把服务做到位，也可以适当地让团队感受到一些资源不足的饥饿感，或是目标偏高的恐惧感，但这和服务不到位、不靠谱给团队造成\r\n的破坏是完全的两回事。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">授权与让权</span>\r\n</h3>\r\n<p>\r\n	从授权\r\n的角度来看，管理和被管理，实质上是一种相互授权。比如对测试经理和他所带领的测试工程师来说，测试经理其实是把测试执行的权力授予了测试工程师，而测试\r\n工程师则是把测试计划和评审的权力，还有自己开展工作的非技术方面的管理权力都授予了测试经理。当然，更多的人对于这种实质并没有清楚的自觉，只是因为劳\r\n动合同上这么规定，也就这么做了。但自觉地意识到这一点，无疑会有很大的益处。\r\n</p>\r\n<p>\r\n	掌握权力，主要有两个目的：第一，可以在权力范围内，拥有相\r\n当的自由度；第二，可以发挥自己的权力，从事自己擅长的工作，使得整体的成果最大化。每个在职场中的人，都应该思考自己开展工作需要什么样的权力，尽可能\r\n地去争取这些权力，并用争来的权力产生更大的成果作为证明，去争取更大的权力。虽然争取到一个企业的最高权力，甚至进入最高权力圈都并不容易，但争取到很\r\n大的业务决定权力，还是管理人可以期望的。\r\n</p>\r\n<p>\r\n	意识到授权关系的益处还远不止这些，一个更加有为的管理人，应该想办法去优化权力结构。要想方设\r\n法地保留和扩大自己擅长的业务所需的权力，对于那些不甚擅长，潜在的其他作用也不大，或是自己难以驾驭的权力，则要采取措施授出或让渡。这里要注意的是后\r\n者，一般人会认为，授权，即将授予所辖下属，是唯一的权利转移形式，其实不然。上级授予的权力，如果不利反害，就要想办法退让，或是建议让渡给平级。每个\r\n人在进入企业时，被初始给予的权力都是有预先设定的，但只有那些能够正确地意识到整体权力结构，并准确地将自己在其中定位的人，才会进退自如。\r\n</p>\r\n<p>\r\n	或\r\n者你要问了，谁会把抓来的权力让掉呢？谁会不求上进反行退让呢？这就是一般的人总会很快地遇到升职瓶颈的根本原因：权力是用来达到目的的，不能对达到目的\r\n有所助益的权力，实在只是累赘。倘一个人根本不善于做评审，非要抓住这个权力不放，结果评审结果屡屡出现严重偏差，能不影响前途吗？反观成大事者，都是围\r\n绕着自己擅长的领域构建和积累权力结构，哪怕这个领域原本根本不受重视、不受待见，结果却做出了漂亮成绩，打造了关键事件，一下子进入了权力核心。\r\n</p>\r\n<p>\r\n	由\r\n此我们又要说出很多管理人平生未闻的重大秘密：真正厉害的管理人，不仅要会管理下属，也要会管理上级、管理平级。它的奥妙就在于权力结构的建设，随着整个\r\n企业的发展，甚至整个行业的发展，时时地对自己的权力定位做出相应的调整，让上上下下与自己有关的人，都能够很好地与之共存、共事、共进退。这就是为什么\r\n有些人做了一辈子还是个底层技术工人，有些人升到了部门主管就再也止步不前，有些人却能够在看似山重水复疑无路的死局中，打开柳暗花明又一村的新出路。原\r\n因不是别的，就是事在人为，而人一旦被盘活了，则无所不达。再换句话说，一个真正想把事情做好的人，必然能够打动所有助其成事之人，然后事情就真的做成\r\n了。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">小结</span>\r\n</h3>\r\n<p>\r\n	这一讲是这个系列专题的高潮，也是总结。虽然它的题目很老套，但内容却是绝大多数的管理学教材中都看不到的全新材料。一般的管理学教材，都是管理人写给管理人看的，而这个专题，则是从技术人变成的管理人写给技术人看的。\r\n</p>\r\n<p>\r\n	这\r\n里重复一句已经重复了多次的话：从技术人转变成管理人，最关键的是要把着眼点，或者说工作对象，从“物”转换成“人”，一切管理都是从这里起步的。本讲\r\n中，我们从管理人自身的内在修养的话题，切换到了管理人的外部作为。我们一开始就毫不避讳地谈到了痛苦激励的理论，指出只有工作本身会给团队带来痛苦，并\r\n且团队要努力克服这痛苦并成长，才会产生真正的激励效果。同时，相应地，管理人应该切实担负起服务的角色，方能使团队能够不在承受工作痛苦的同时，又要忍\r\n受不合理的工作之外的痛苦。这两者不仅不矛盾，甚至可以说是相辅相成的。\r\n</p>\r\n<p>\r\n	最后，我们谈到一个更高阶的话题，就是无论管理人身处哪个权力阶\r\n层，都要评估自己的能力和所长，主动优化权力结构，最大程度地发挥自己擅长的权力，带来最大的管理效益。每个人都有巨大的潜力，只要能够争取到自己需要的\r\n权力，又能不被有害无益的权力所伤害，就一定能脱颖而出。这种能力使得管理人能够将管理效用发挥到整个企业而不限于自己的小团队，掌握了这样的能力，管理\r\n人就一定能够影响一大批人，共同实现自己的人生理想，同时为这个世界做出自己的贡献。尤其是技术人转变而来的管理人，如能注意发挥这一点，也将是技术行业\r\n的希望和脊梁。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-04-02/2819100-Management-Course', '1', '2015-01-09 09:45:29');
INSERT INTO `yov_source` VALUES ('10029', '管理飞扬跋扈的技术部', '管理 技术部', '&nbsp;&nbsp;&nbsp;&nbsp;有的管理人员认为最头疼的就是技术部的管理。因为技术工作看起来棘手，管理人员不能轻易了解技术工作的内涵，技术人员也觉得很难和管理人员沟通。要管理好技术人员，就一定要懂技术，这是其他管理方法都无法替代的。<br />', '<p>\r\n	在互联网项目当中，相信每一个项目经理或者制作人，最头疼的就是技术部的管理。因为技术工作看起来是那么的棘手，一般人难以理解，而且技术人员大多\r\n数都似乎情商不高。管理人员既不能轻易了解技术工作的内涵，技术人员也觉得很难和管理人员沟通。特别是技术工作，难以在不同人之间交接，很多技术人员都声\r\n称无法继续别人做过的项目。这让管理者觉得技术人员特别喜欢耍大牌，而且他们要偷懒也非常容易。但正如军事中的定理，对付坦克最好的武器就是坦克，对付航\r\n母最好的武器也是航母，这条理论是通用的。要管理好技术人员，就一定要懂技术。这是任何一种其他号称完美的管理方法都无法替代的。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#E36C09;\">开发是一切——何时写文档</span>\r\n</h3>\r\n<p>\r\n	对\r\n于技术管理来说，很多公司会非常注重文档。虽然开发的结果是代码，但对于管理来说，代码往往难以阅读，也很少有人擅长接手别人的系统。为了让代码不至于被\r\n丢弃，公司管理人员就祭起文档这个法宝。我认为文档是很重要的，但也发现这些文档中很典型地存在几个问题：文档和代码不同步；文档的可读性差，需要的文档\r\n没写，不需要的文档写了一大堆；文档和代码脱节，文档很多，开发出来的成果很少。\r\n</p>\r\n<p>\r\n	我们应该何时写什么文档，这是需要有严格定义，并且有检查过程的，而不是任由大家自然发展就可以完善的。代码的编写需要按不同类型，定义好在各个阶段中所需要完成的部分。\r\n</p>\r\n<p>\r\n	<b>设计类文档</b>——\r\n这类文档往往在项目、模块启动的时候，大家都会想到要去写，作为讨论和最后决议的成果，显然是很自然的。然而在项目进入开发之后，碰到实际问题时，往往就\r\n不能完全按照设计的初衷去做了，所以通常设计文档就在这个时候和代码脱离了联系。但有一点是绝对可以做的，就是在重构的时候，按照现有状况，重新增加重构\r\n前的系统状况说明，然后再添加上重构后的设计。这样就把重构的设计和文档的更新结合到一起了。\r\n</p>\r\n<p>\r\n	<b>API（应用编程接口）文档</b>——现代软件都希望能提高重用的程度，因此很多程序员都会自己构造自己的业务API，以便在之后的开发中使用。而这种业务API，也是很多分工合作的基础。这种代码的说明，会直接影响日常的开发，因此非常有必要保证和代码的高度一致性。\r\n</p>\r\n<p>\r\n	<b>使用文档</b>——\r\n一般来说，一个软件的使用文档必须包含以下几个：《产品版本说明》、《产品安装和部署文档》、《产品使用教程以及例程》、《产品FAQ文档》。这里面的\r\n《产品版本说明》应该在每次发版的时候，作为发布流程的一个固有环节来设计。《产品使用教程以及例程》是我认为所有文档中，最值得花大力气去写好的。《产\r\n品安装和部署文档》内容越少越好，应该让安装部署尽量智能化、自动化。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">了解什么是软件架构</span>\r\n</h3>\r\n<p>\r\n	了解软件架构的范畴，才能有针对性地去把握软件开发中的风险，从而管理好软件开发的过程。简单来说，软件架构就是应对需求所产生的“一系列决定”。软件会根据这些决定来开发。根据软件需要应对的需求，软件架构一般包含以下几个部分。\r\n</p>\r\n<p>\r\n	<b>逻辑架构&nbsp;</b>主\r\n要是为了明确“功能性需求”而做的设计，针对需求以及需求变化作为架构目标所做出的关于代码之间的划分、耦合、关联的决定。采用合理的逻辑架构，将会大大\r\n降低需求变更对开发的延迟作用。逻辑架构最直接指导代码中互相耦合的情况，仔细设计好耦合的规则，会让后续开发事半功倍。\r\n</p>\r\n<p>\r\n	<b>运行时架构&nbsp;</b>运行时架构是为了满足运行期的质量需求，所做出的关于对象行文、进程结构、通信协议、数据结构等方面的决定。运行架构一旦确定，等于大部分的“实现”代码都确定了，设计有足够扩展性和可用性的运行架构，可以为后续工作节省时间，也降低了系统在运行期对开发工作的干扰。\r\n</p>\r\n<p>\r\n	<b>开发架构&nbsp;</b>为了满足开发时的需求所做的决定，主要是软件根据分工开发、测试验证流程等需求划分的软件层次和区域以及各种接口设计，也包含使用的软件包、组件库、开发工具，以及编译构建的方法。一个好的开发架构，可以让沟通成本降低，开发速度提高。\r\n</p>\r\n<p>\r\n	<b>部署架构&nbsp;</b>现\r\n代软件系统，基本上都包括了客户端和服务端程序，如何快速、高效、稳定地部署和发布这些程序，如网络机房的分布、服务器硬件的搭配、监控和维护工具软件的\r\n安装、开发测试网络和运营网络的设置。可以获得安全性的配置，良好的部署能力，能推动软件进行更频繁、更全面的测试，从而提高软件质量和开发效率。\r\n</p>\r\n<p>\r\n	<b>数据架构&nbsp;</b>数\r\n据是软件项目的核心财富，关于数据的结构，数据的存放、备份、传输会直接影响到运行性能、业务功能、部署、安全等需求。在面向对象的开发模式下，数据到对\r\n象的ORM架构也是很重要的设计。一个完整的数据架构包括了数据流图、数据字典、ORM结构（如果需要的话）、数据索引和备份机制等几个方面。\r\n</p>\r\n<h3>\r\n	<b><span style=\"color:#e36c09;\">何时以及如何评审</span></b>\r\n</h3>\r\n<p>\r\n	相信大部分公司都有评审这个环节，评审可以包括方案评审、代码评审、项目专项议题的评审，比如对存留Bug的处理评审等。而这些评审，常常会变成一个挑毛病的会议。要解决评审给产品带来的负面影响，同时发挥这个活动的优点，我们需要关注以下几个方面。\r\n</p>\r\n<p>\r\n	<b>评审由谁发起&nbsp;</b>相\r\n对比较好的是，由负责此项目的“领导”来召集人员评审，并且一定要有负责开发的人员参加评审。参与评审的受邀请人员可能会与方案提交者就一些问题有分歧，\r\n但提交者有最终决定权。要把权力给有能力承担它的人。这样做可以让“防止风险”的一部分人和“注重效率”的开发人员形成平等的意见交换。\r\n</p>\r\n<p>\r\n	<b>什么时候做评审&nbsp;</b>应该在每个迭代、每个较大的版本开工前，或者仅仅是某个认为比较重要的决定做出前，都来一次简短的评审。如果开始时只是做一个DEMO，那么需要评审的东西也比较少，而随着不断的开发，评审也能遍历所有的开发。\r\n</p>\r\n<p>\r\n	<b>做评审的方法&nbsp;</b>真\r\n正对项目有帮助的，是了解项目的需求，分析面临的难点，思考方案为何这样做，提出自己的解决方案，给项目开发者以建议和启发。多说“我建议这样解决这个问\r\n题”，而不要仅仅去说“这样做可能有问题，应该添补这样的功能”。以建设性的心态和思路去做评审，而不是以找问题的思路去做，这就是两种做法的最大区别。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">分层开发，尽快运行</span>\r\n</h3>\r\n<p>\r\n	为\r\n了降低软件耦合给开发带来的负面影响，正确的做法是要高度重视软件开发方法，从代码风格、软件架构、设计模式、开发模式方面来提高水平。其中一个最简单有\r\n效的做法，就是分层。在经典的架构模式中，分层模式几乎是所有模式的基本模式：把代码按照你所需的范围划分层次，然后规定层次之间的耦合接口，层次之间只\r\n可单向依赖，而且尽量减少跨层耦合。划分层次的范围，由你的开发团队水平和项目的复杂程度决定。\r\n</p>\r\n<h3>\r\n	<b><span style=\"color:#e36c09;\">非功能需求决定成败</span></b>\r\n</h3>\r\n<p>\r\n	世\r\n界上类似的项目非常多，但成功的占少数，失败的占多数，这种现象的背后有一个重要的原因，就是非功能需求。非功能需求具体包括：软件开发效率的相关需求，\r\n比如代码结构、代码风格、内容开发工具、自动构建部署工具；软件的质量稳定性的需求，如测试方面的需求，产品结构对于缺陷的防范，代码质量；软件的运行承\r\n载力需求，包括可用性、容灾性、可维护性、承载力、运行性能和成本需求；软件的信息搜集方面的需求，如故障上报、数据统计和挖掘。\r\n</p>\r\n<p>\r\n	如何才能做好这些非功能需求呢？\r\n</p>\r\n<p>\r\n	首先是在项目成本规划时，分配足够多的资源，比如人力和时间，去做好这个事情；其次是要尽量合理地规划和设计这些非功能需求，既不能贪多求全，也不能无所作为。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">追求代码质量</span>\r\n</h3>\r\n<p>\r\n	代码质量不高带来的危害包括人员流动后没法接手、Bug频繁出现、效率问题难以定位、开发速度慢等。\r\n</p>\r\n<p>\r\n	什\r\n么样的代码才叫高质量的代码？代码质量存在一个唯一标准，就是可阅读性。可读性好的代码，结构通常更简单清晰，Bug也少；更多人愿意去阅读的代码，也会\r\n有更多的机会去改正Bug以及其他的缺陷。可读性好，也意味着你能更简单地去找到改进性能的方法，减少修改代码带来的风险。\r\n</p>\r\n<p>\r\n	提高代码质量的手段，最简单的两条，一是执行代码规范，二是进行代码评审。除了规范制定和评审外，组织学习代码质量的知识，提倡并奖励高质量代码的人员，也是提高代码质量的有效手段。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#E36C09;\"><b>搭好测试这个安全网</b></span>\r\n</h3>\r\n<p>\r\n	单\r\n元测试是最原始的工程概念之一。单元测试对于互联网应用来说，一般会有一个困难，就是需要大量的“脚手架”，比如为了测试数据库操作，必须要有一段代码\r\n“重置”数据库的状态；为了测试网络打包解包，则需要用一个程序向某个网络端口发数据。而准备这些测试工具代码的时间往往会比较长，需要有足够的耐心去\r\n做，但一旦做好了，往往能让开发风险大大降低。\r\n</p>\r\n<p>\r\n	对于单元测试，我认为最少应该覆盖所有正确的路径，以及重点防御的错误路径。覆盖了这些重点关注的地方之后，放手重构代码就很方便了。\r\n</p>\r\n<p>\r\n	单\r\n元测试应该是属于代码的一部分，和源代码一起存放。自动构建时也应该进行检查输出结果。提交代码时都会自动运行单元测试，当“版本树”需要合并“分支”\r\n时，单元测试尤为重要，而最重要的是在分支上建立的单元测试。这些测试会大大加强系统的稳定性，因为检验了“合并”功能产生的代码—这些代码是最容易出错\r\n的。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">自己掌控开发方向</span>\r\n</h3>\r\n<p>\r\n	开发工作往往被需求变化“牵着鼻子走”，需求往往会有很多来源：产品策划的想法、老板的意见、用户的反馈、数据统计的结论等。提出的各种需求，往往会对开发团队造成很大压力。这些问题都需要我们对需求做出有效的管理。然而我们应该如何去搜集、记录、过滤、实现这些需求呢？\r\n</p>\r\n<p>\r\n	我们需要很好地搜集记录需求。有的团队会设立两面故事墙，任何方面的需求，都可以减缩成一个故事，写到一张便签纸上，贴到故事墙上，专人处理，而不会石沉大海。\r\n</p>\r\n<p>\r\n	有的公司会试图把这个事情用电子化流程来做，但电子化流程有个显著的缺点，就是为了更多地自动化处理，会加入大量的字段，对于故事这种还未谨慎定义过的东西，要认真填写太多的资料，无疑会给使用者造成额外的负担。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">告别救火队员</span>\r\n</h3>\r\n<p>\r\n	在\r\n产品进入运营期间，最牛的程序员似乎总是在充当救火员，各种各样的突发事件、棘手问题中，我们的“高手”往往疲于奔命，永远都在做一些补救的措施。有经验\r\n的人员一直没空做开发，因此大量的代码由那些水平较差的人来完成，反过来埋下了更多的问题。然而，如果不是忙着亡羊补牢，我们的资深程序员就可以把更多的\r\n精力放在开发上，这些有经验的程序员所生产的代码，又会进一步降低出故障的概率，这才是走向良性循环的方法。\r\n</p>\r\n<p>\r\n	为了减少运营期间的压力，在系\r\n统设计时，就要特别注意关于可维护性的非功能需求。运营事故当中，因为部署错误所导致的占很大一部分，因此降低部署错误需要做到：全代码包发布，每个发布\r\n版本要包含所有的可执行文件；所有的服务器上部署的配置文件和数据文件都必须做到完全一致，降低更新文件的复杂度。本机IP地址应该用代码从网卡上直接读\r\n取，但应该提供可以配置的选择，预备多个IP的服务器使用；只使用命令行方式来启动不同功能，如选择配置文件路径、输入不同功能进程或服务器的配置；程序\r\n支持关闭、重载配置这两个信号。在处理这两个信号时，都不应该让使用者感觉突然“掉线”；开发用于安全关闭程序、重载配置的脚本或功能；开发用户自动重启\r\n所部署进程的脚本，以及配置开机自动启动所部署的进程；每个进程都不应该强行锁定某资源，必须要能做到一份安装复制多进程并行运行等。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">每天发版</span>\r\n</h3>\r\n<p>\r\n	如果你想知道项目每一天的开发进度，你就必须要做到每天发版，测试每天的工作进度，如果要顺利地每天发版，就必须建立一个持续集成的系统。一般来说持续集成系统会有以下的先后步骤：单元测试—自动构建—自动部署—集成测试—自动发布。\r\n</p>\r\n<p>\r\n	单元测试关键是要能坚持覆盖所有新加入的代码；自动构建是由构建脚本、构建服务器、持续集成系统几部分组成。\r\n</p>\r\n<p>\r\n	对于美术、产品或者别的非技术人员，添加的数据往往也需要有自动部署的工具，而且因为通常他们产生的文件比较大，每次的全体打包然后覆盖，可能会非常没效率。虽然事情要做得完美不是很容易，但绝对是物有所值。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">版本列车</span>\r\n</h3>\r\n<p>\r\n	我们时常只是对技术工作有版本管理的过程，而对于其他环节，常常停留在最原始的状态。我们需要在整个项目开发的每个环节，都进行合理的项目管理。在多个项目的经验积累之后，提出了全过程的项目管理的概念：版本列车。\r\n</p>\r\n<p>\r\n	版\r\n本列车的含义是按照项目的工作流程，为每个有产出的环节都定义一个版本“车厢”，然后按照工作流程的先后依赖顺序，形成一个完整的“版本列车”。第一个工\r\n作环节负责版本号，然后在这个版本号之下填充版本内容。当工作完成，此版本的工作内容则带着版本号进入下一个“车厢”，依此类推。\r\n</p>\r\n<p>\r\n	这样做的好处是，每个环节的每份产出都可以明确地知道其进度位置，安排在什么时候做。对于需要提前准备市场推广或者别的工作部门，有一个非常明确的长期计划。对于进度管理来说，各个部门也能知道整个项目的当前状态。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#e36c09;\">论功行赏（绩效评估）</span>\r\n</h3>\r\n<p>\r\n	不\r\n管是对被评的人，还是对评价别人的来说，绩效评估都非常难做。因为很多工作并非能很准确地列举出一二三来，工作任务也可能有大量临时变更。太过主观会让人\r\n觉得草率；非要去依据可量化的数据，又过于死板和片面。但没有一个公司敢不做考核，所以说绩效评估是“明知山有虎，偏向虎山行”。\r\n</p>\r\n<p>\r\n	绩效考核\r\n应该重点关注的是做了什么事，而不是做得怎么样。这个让很多按“结果”管理的老板很不接受。绩效考核应该是推动别人去做某件事的工具。对于已经明确的方法\r\n或者子目标，通过这种细化的方式去指导下属工作。因为是需要事后算账的，而且是量化的，所以下属会对这个事情很认真，同时那些不好量化的事情，管理者也很\r\n难执行绩效考核。所以“去做某些事”，是绩效考核最好的目标。\r\n</p>\r\n<p>\r\n	通过考核结果提供正式的工作方法意见。绩效考核本身有个反馈的过程，这个反馈的过程应该提供给下属针对每个具体事情的建议。这种具体地，单独地，一对一地指导，会提高团队的稳定性，而且也让团队成员获得“受关注”的感觉，这种感觉是形成高效团队的重要工具。\r\n</p>\r\n<p>\r\n	考\r\n核不能代替目标，不能阻碍目标，而应该是一个沟通工具。目标达成情况是考核的客观指标，但不应该作为主要绩效考核指标。最简单的绩效考核指标就是收入或者\r\n利润率。但这种简单指标除了在动机上提高下属的工作热情外，并没有从方法和经验上帮助团队成员。有效的考核应该是引导下属按照更有经验的方法去实现目标。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-04-01/2819082-Technology-Team-Management', '1', '2015-01-09 09:46:26');
INSERT INTO `yov_source` VALUES ('10030', '给技术人上的管理课：平衡和集中', '管理课 平衡 集中', '&nbsp;&nbsp;&nbsp;&nbsp;大中型团队管理是技术人转型的巨大挑战，这个阶段的管理工作，仍然可以归为技术范畴，依靠的大抵是管理人的筋肉力量。是否会管理，要看能否管好超出自己筋肉力量规模的团队。此中的关键，在于把握平衡和集中的艺术。<br />', '<p>\r\n	大中型团队管理是技术人转型的巨大挑战，因为对小规模的团队基本上能够做到每个人都认识和了解，工作如何细分和跟踪亦可以做到全面掌控。这个阶段的\r\n管理工作，仍然可以归为技术范畴，依靠的大抵是管理人的筋肉力量。而真正看一个人会不会管理，要看他能否管好超出自己筋肉力量规模的团队。只有你连下面有\r\n多少人都不知确数，连事情不知道由谁如何完成，也能达成自己设定的目标，这才是管理真正发挥了功效。此中的关键，在于把握平衡和集中的艺术。\r\n</p>\r\n<h3>\r\n	<b><span style=\"color:#e36c09;\">志向与智慧的平衡</span></b>\r\n</h3>\r\n<p>\r\n	凡\r\n做管理之人，首先自己要有个主张，有个志愿。手下管两个人的，要有做立十人之功的雄心。手下管一百个人的，就足可有将整个行业改弦易辙的壮志。技术型的企\r\n业，大事情由小团队做出来的，数不胜数。以190亿美元天价出售的WhatsApp，其团队不过区区35人。再反观很多号称数千人的公司，却要仰仗关系和\r\n公关挣一点不那么干净的辛苦钱，还要成天压榨流动性很大的员工。考察其管理层，得出的最大问题就是他们没有志向，没有目标。看似整天在管这管那，但没有管\r\n到点子上。\r\n</p>\r\n<p>\r\n	这不是说管理人要盲目自信，好大喜功。管理人必须有志的同时，还要有智。这个智，是要比人远一步、深一层的洞见。例如，团队成员\r\n只觉得靠自己的力量，不可能完成需要短板技术的产品研发。此时，管理人就要能够看到从内部培养这块短板的机会，或是引入外援的可能；领导觉得根据以往的经\r\n验，完成某某任务需要一年，因而无法达到标书的要求，管理人就要能够看到，提高非关键模块的风险系数，即可以将研发时间减少20%；别人都在做PC软件，\r\n管理人就要看到做移动App才是下一拨热点；而在移动App如日中天之时，管理人就要看到移动安全市场并在技术和法务上重兵布局……\r\n</p>\r\n<p>\r\n	核心的\r\n问题在于资源，资源出了问题，再好的团队也不能成事。管理人要把握的第一个平衡，就是达成目标所需要的资源，和计划动用的资源的平衡。尤其要注意，资源不\r\n足不是资源问题的唯一表现形式。有太多的问题不是出在资源不足，而是出在资源过剩。资源一旦超过了达成目标所需要的程度，就要立刻调整目标。否则必然由于\r\n人性的贪婪和惰性，让团队的斗志被消磨，甚至发展成为争夺资源的内斗，给竞争对手造成可乘之机。真正好的团队，都是有适度的资源饥饿感，但又总能以奋斗的\r\n方式开源节流，充分享受资源到位的成就感。反过来，管理人则要想方设法，争取一定量的过剩资源，在团队面临过大压力时缓释，提高团队的韧性和耐力。\r\n</p>\r\n<h3>\r\n	<span style=\"color:#E36C09;\">理性与激情的平衡</span>\r\n</h3>\r\n<p>\r\n	在\r\n本刊1月期《给技术人上的管理课：控制和计划》一文中说过，物理资源在一定条件下可以相互转化，但人心则不行。钱花得再多，都只能换取人的表面合作，但这\r\n远远不够作为团队的基础。况且人心变化莫测，今天是这样的心情，明天就可能完全不同了。而管理的效用即体现在此，它要使得人的意志朝向对目标有利的方向偏\r\n移。\r\n</p>\r\n<p>\r\n	团队的管理人，多数乃是在平日慢慢地由各个成员的意志交互造成的结果。这种意志力潜移默化的渗透压，超越年龄和职权，直达人的内心深处。一旦团队遇到任何问题，或需要做出影响全体的决定时，所有人的目光会不自觉地投向那几个人，这就是管理人无形却又无价的荣誉徽章。\r\n</p>\r\n<p>\r\n	取\r\n得这枚荣誉徽章的过程，是艰难的。这其中的奥秘，我们将在后续的文章中继续讲述。但一旦取得，管理人的意志对于团队的影响力是有近乎无限的放大系数的。这\r\n种影响力还会放大到这个团队之外，甚至超出管理人本人的专业和功绩的范围，让无数的陌生人对管理人本人产生信任和依赖的情感。\r\n</p>\r\n<p>\r\n	但管理人必须\r\n时时牢记，这种信任和依赖乃是借来的钱款，必须好好经营，给予信任和依赖者以足够的回报，不然会破产得很快。而这一点，恰恰是很多管理人的软肋。尤其是从\r\n技术人转型而来的，比较容易得意忘形，以为自己成了救世主，结果管理生涯只能是昙花一现。管理人是否优秀，不仅要看他能否拿到荣誉徽章，更要看他能否保持\r\n荣誉徽章。要做到这一点，管理人就要反思，能够赢得荣誉徽章的意志来源。一个人真能够做到面面俱到，不犯错误吗？这样的想法是最危险的。往往管理人会以激\r\n情为理由，来无视别人看似平庸实则合理的意志，并且在碰巧得志的情况下陷入恶性循环，最终重重地摔下来。\r\n</p>\r\n<p>\r\n	而对真正有为的管理人来说，意志的\r\n酝酿是需要时间的。他们绝不早早地宣布想法，而是花大量的时间来体会他人的意志，从中找出合理的部分和看似不合理之处。而对于那些看似不合理之处，他们也\r\n需要时间来试验，甚至反复地试验，找到它们不合理的根源所在。他们相信黑格尔说的那句绝大多数人都闻所未闻的话，那就是“合理方可存在”。尤其是技术工作\r\n中存在的刚性，更是让该领域的管理人不能不高度重视理性的最后检验作用。你说更改如此这般的配置，服务器就不会在20万并发下面失去响应吗？但如果服务器\r\n真的失去了响应，是否就反过来说明配置不该那样更改呢？其实可能与此无关，或是隐含了某些特定条件。服务器不会因为你有高昂的激情，就能够承担更高的并发\r\n了，而只能是满足了理性的条件才能实现这样的目标。因此，管理人意志中的激情绝不应该是盲目的激情，而只能是基于对理性工作的更深刻认识而达到了更高程度\r\n的的理性，这就是激情和理性应该达到的平衡状态。简单地说，管理人在表达激情时，如果给人的感觉是“说得倒是天花乱坠，但感觉不甚靠谱”，这就麻烦了；给\r\n人的正确感觉应该是“如此司空见惯之事，我为什么没有早点想到呢？”\r\n</p>\r\n<p>\r\n	平衡感的把握是一种平日的功夫，不妨称为管理人的修炼。平衡的要义是要\r\n使得资源保持合理的水平，并流向合理的去处。管理人要精于数字的计算，但更重要的则是培养估算和直觉。最要紧的不是做平均，而是估算合适的权值。必须能够\r\n看到别人看不到的投入放大路径，这样才能够发挥好团队的效益。这种能力，并非一朝一夕之功，而是经年累月反复试验才能获得的经验。而且技术行业的变化从来\r\n是不打招呼的，行业变了，管理思路不变，就要落后挨打。因此，管理人欲在技术行业里求生存，没有别的办法，只能艰苦地从实践中学习。哪怕一开始不懂也不要\r\n紧，平日里有的是时间去试错，或者说要从太多宿命般的错误中杀出一条正确的血路来，这不仅需要有快速的反应，还要有顽强的意志和不错的运气。\r\n</p>\r\n<h3>\r\n	<b><span style=\"color:#e36c09;\">集中与责任</span></b>\r\n</h3>\r\n<p>\r\n	然\r\n而生活并不按照理想的方式来发生，突发事件和异常压力总会不期而至。平日的修炼，在关键的时刻就要经受考验。平衡的原则依然适用，但此时管理人必须以更主\r\n动的姿态介入，因为留来计算的时间窗口变得非常紧迫了。如果说平衡是以静制动，那么集中就是以动制动了。它的具体形式，就是管理人主要的决策计算依据的来\r\n源，从团队中的他人意志和中长期的试验数据，变成了历史事件经验和短期的试验数据。管理人的个人意志发挥的作用，在团队重要决定中的比例明显增加，这也是\r\n所谓集中的原始意义。\r\n</p>\r\n<p>\r\n	但他人意志和较长时间的试验数据，对于决策正确性的影响，永远是极其关键的。管理人一旦听不进别人的话，或是拍脑袋做\r\n决定，就几乎一定会犯错。因此，任何时候都不能取消这两个计算依据，只是说在资源不允许的条件下，不得已才要用历史事件经验来一定程度上替代他人意志，才\r\n要缩短试验的时长和频度。所以管理人绝对不能是急性子。哪怕火烧了眉毛，也要理性地用一点时间来收集尽可能多的外部信息，搞清楚火从哪里来，有哪几种可以\r\n逃生的选择，在逃生之前需要避免哪些低级错误，等等。\r\n</p>\r\n<p>\r\n	我们经常会在重大的产品上线之际，发现有几个始料未及的缺陷，而这时所有的高管和媒体\r\n的目光都集中在此。此刻，能否保持一颗冷静的心，弄清楚问题的来源，然后果断地给出下一步动作的指示和作出合理的解释，是非常考验人的。在众说纷纭中，要\r\n判断出关键的信息所在，极其需要管理水平，但其实倒也不难：关键在于要听取相关负责人等的意见，而不要道听途说。而在下一步动作的指示中，当以造成最小破\r\n坏者为准，这个度的把握却只可意会。比如，在Web产品新版本上线以后，发现部分用户无法登录。此时，究竟是上一个热修复，还是回滚到旧版本？这就需要首\r\n先找到与登录相关的前后端工程师，排查是哪一部分逻辑出了问题。如果时间并不允许，那就要判断回滚是否会带来更大的影响。比如，在数据库中加了一些字段，\r\n而大量用户已经往这些字段里填充了数据，回滚会造成用户的数据丢失。在这样的情况下，与其回滚可能就不如给那些一时不能登录的部分用户发邮件做解释，争取\r\n时间来除错更好些。\r\n</p>\r\n<p>\r\n	集中永远是特殊时期不得已而为之的办事方式，原因就在于它的风险太大，免不了团队要因为信息不足而犯错。管理人的个人意\r\n志，永远都要植根于团队里尽可能多的信息土壤中，才能持续地在正确的方向上成长。即使大方向不错，在执行时需要的细节信息也必须落实到位，才会看到团队在\r\n向目标靠近。绝对不会有哪个团队，仅凭管理人的个人意志就能领导的。管理，是个人才能和精力在团队维度上的延伸，但这一点从来都不是自然地发生的，而只能\r\n是反复的意志碰撞和融合，反复试验择优汰劣的结果，区别无非在于团队融合和试验结果改进的效率罢了。\r\n</p>\r\n<p>\r\n	正因为集中是冒大风险的事，所以管理人\r\n不能不挺身而出，承担与这风险相应的责任。大中型团队的管理人，不能免于经常面对集中决策的场合。这就需要在平日下更大的功夫来进行平衡感的自我训练，广\r\n开渠道，才能在关键时刻收集到尽可能多的必要信息和资源。而最高层的管理人，则需要有超强的生存能力，敢担任何生死存亡的责任。较之中层管理人，最高层的\r\n管理人就要想得更多更远：团队今天能活下去了，明天应该做些什么来活得更好？团队的资源不够了，要到哪里去融来新鲜的血液？团队内部出现了裂痕，应该因势\r\n利导地分拆，还是要强调表面上的和谐？管理人在平日能够多想想集中的场合，在需要集中的时候，就能够更从容些。正所谓居安思危，有备无患。掌握了足够多的\r\n信息，自然也就能避免管理时的好高骛远，或者妄自菲薄。\r\n</p>\r\n<h3>\r\n	<b><span style=\"color:#e36c09;\">小结</span></b>\r\n</h3>\r\n<p>\r\n	在\r\n本文中，我们深入地考察了管理中的若干重要方面，以帮助管理人走向成熟，获得管理大中型团队的能力。管理人首先要有超出自己所掌握团队人数单兵作战之和的\r\n目标，才谈得上管理的效益，即发挥出团队的潜力，做到个人不能实现的事。管理人要想方设法为团队目标弄到足额甚至更多的资源，但同时也要及时地调整目标，\r\n使得团队保持一个健康的饥饿感。\r\n</p>\r\n<p>\r\n	管理人要在平日像信息海绵一样，吸取一切必要的信息，并将其转化为解决团队问题，引导团队决定的意志力。这\r\n种意志力会带给管理人以极大的魅力，将管理人个人意志的影响力延伸到管理人所不直接掌控的人和事。管理人要充满激情，积极地发现和尝试别人看不到、想不到\r\n的可能，然而要防止激情变成个人意志的膨胀，甚至以个人意志取代理性判断。\r\n</p>\r\n<p>\r\n	归根到底，平衡是成熟管理人需要掌握的核心技能，这项长期的自我\r\n训练，甚至要强化为管理人的本能。冷静思考，向正确的相关人等收集信息，这是管理人甚至在极端场合都要尽力而为的工作，同时又不能因此而规避承担相应风险\r\n的责任。在不得已时，可以部分地采用历史经验的信息，或只做较短较少的试验，但绝对不可拍脑袋做决定。无论结果如何，只要管理人勇于承担责任，团队就不会\r\n受到毁灭性的伤害，即使解散了，人心都还是有数的，东山再起只是时间的问题。在无常的人心和世事中取得平衡感，在风雨飘摇中承担责任并发挥集中的效率，这\r\n是管理人荣誉的来源，也是立身之本。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-03-26/2818983-Management-Course', '1', '2015-01-09 09:47:48');
INSERT INTO `yov_source` VALUES ('10031', '给技术人上的管理课：控制和计划', '管理课 控制 计划', '&nbsp;&nbsp;&nbsp;&nbsp;与技术工作根本不同的是，管理不是要亲自照顾一切细节，而是要委托这些细节给被管理者，由他们自己来发挥才能。控制他人，将自己的意志传达到位，然后彻底地放手，从指挥和命令的地位调整为服务和支持的地位……<br />', '<p>\r\n	在开始讲任何的细节之前，我想先谈谈为什么要写这样的系列文章。众所周知，从事专业工作的人士，无论挂着什么样的头衔，就其日常工作的根本性质而\r\n言，基本上可以分为两大类，不妨就称为技术人和管理人吧。不用说，他们分别从事着的当然就是技术工作和管理工作。有关这两者的区别，说法很多。但说到底，\r\n它们之间的根本区别在于技术工作的对象是物，而管理工作的对象是人。技术工作的成功标志，是利用物性达成目标；而管理工作的成功标志，则是发挥出人的潜\r\n力。一方面，由于技术人不懂管理以及管理人不懂技术，是大量实际问题的根本来源，甚至也是企业和项目失败的主要原因，因此为彼此开设专门讲座来普及一下，\r\n是件挺有意义的事。另一方面，无论是技术人还是管理人，看看站在不同视角阐发的观点，也是件挺有意思的事。万一哪天自己的角色有了变化，也好先有点 \r\n儿准备。那么，就先从给技术人上的管理课开始讲起。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201401/29/52e89608d70ea.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201401/29/52e89608d70ea.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<b><span style=\"color:#c09100;\">管理的最大秘密</span></b>\r\n</p>\r\n<p>\r\n	很\r\n多名字里面带有“管理”的工作实际上是技术工作，例如服务器管理、资产管理等。还有很多人生生地把真正的管理工作，例如项目管理、运营管理等做成了技术工\r\n作。虽然说技术工作没有什么不好，但把管理工作做成技术工作，意味着把作为管理对象的人看作是只有一系列属性差异，却并无人性和生气的物了。大概没有什么\r\n人情愿被这样对待，因此以这样的方式从事管理工作的人大抵会以失败而告终。而技术人在日常工作中，也免不了时不时地要做些管理工作，要尤其避免这种把人看\r\n作是物的倾向。<span style=\"color:#7f7f7f;\"><b>管理，永远意味着管理活生生的人。</b></span>离开了这一点，就谈不上什么管理，无论是否将其冠以管理之名。\r\n</p>\r\n<p>\r\n	千\r\n军可以夺帅也，匹夫不可夺志也。管理无常的人心，比起给个输入就能大致知道有怎样输出的软硬件系统，可控性差了何止千万倍。这也是很多刚上任的，甚至已经\r\n从事了很多年管理工作的朋友们始终感觉搞不清答案的一个问题：到底怎么样才能在人心这样不可知的条件下，有效地实施管理？换个更通俗的说法，为什么有些人\r\n可以做到在一大群人中令行禁止，人们着了魔一般听其指挥而动，缔造出软件帝国和传世之作，而偏偏自己想组织几个人干点从技术角度看很简单的活，都搞不定\r\n呢？\r\n</p>\r\n<p>\r\n	前面说过，管理的成功，体现在发挥出人的潜力。这就使得我们思考：在怎么样的条件下，人能够发挥出自己的潜力？如果说没有管理他人的经\r\n验，那就反过来想想自己好了。在下面几种情景下，你一般都能够较好地发挥自己的潜力：异地的老板突然说明天要大驾光临，要求你安排好接待和工作汇报；上面\r\n下达通知，一个月内网站访 \r\n问量若突破日均10万PV，你可以拿到五倍的季度奖；一场对你来说很重要的演讲即将开始，你突然发现装着PPT的U盘丢在出租车上，只能裸讲。\r\n</p>\r\n<p>\r\n	以上这些情景有两个共同特点：第一，迫于压力、耽于奖金或碍于面子，你有了强烈的意愿想达到某种目的；第二，你有机会发挥出自己的自由意志，或者说主观能动性，来组织接待、优化网站，或是即兴发挥。\r\n</p>\r\n<p>\r\n	反推回去，想一些非常简单的成功说服他人按自己的意志行动，并且取得了甚至比预期更好效果的例子，是不是无一例外地也具有这两个特点：对方出于某种原因，有了达成你想要目的的强烈意愿，但他们在行动时却是通过发挥自己的主观能动性完成的。\r\n</p>\r\n<p>\r\n	再推而广之，观察运行比较成功的组织，即能够发挥出组织中的个体潜力的，也无非就是每个个体都或多或少地带有组织目的，并能够较好地发挥主观能动性的结果。\r\n</p>\r\n<p>\r\n	但这么说来，似乎有哪里不太对劲。在一般人的印象中，管理似乎带有相当的强制性。既然是要管理某人，要达到的是管理者的目的，要体现的是管理者的意志，为何前面说的，好像达到了的是被管理者的目的，体现了的是被管理者的意志呢？\r\n</p>\r\n<p>\r\n	这\r\n并不难理解，因为每个人都是一个有着自我意志的平等个体。为着自己的目的而采取行动，而在行动过程中发挥的也必然是自己的主观能动性。如果想要脱离这个前\r\n提来实施管理，百分之百地达不到目的，即使被管理者被迫采取了一些行动，也只是做做样子罢了。这个看似简单的道理，其实却包含了管理的最大秘密：<b><span>管理的终极目标就是不要管理</span>。</b>\r\n</p>\r\n<p>\r\n	涉\r\n及到较强专业性的技术管理是不是例外？完全不是。在最优秀的技术驱动型的组织里，管理者几乎都是把100%的时间用于服务、支持甚至取悦被管理者，让他们\r\n为着自己的想法，尽情地发挥自己的天才。无价的技术产品几乎都是在这样的氛围中诞生的，这包括C语言、UNIX、Gmail等等，这就是很好的证明。\r\n</p>\r\n<p>\r\n	<b><span style=\"color:#c09100;\">控制之禅</span></b>\r\n</p>\r\n<p>\r\n	虽\r\n然我们已经了解了管理的最大秘密，其实根本上是要靠被管理者的自觉，而不是管理者的主观意志。可是，这样的效果不是天然存在的，甚至也不是一朝一夕能达成\r\n的。因为人的想法不可能完全一致，所以想指望他人能够自然而然地读懂自己想要什么，不太可能。那怎么办呢？这就需要把自己想要的，传达给对方。\r\n</p>\r\n<p>\r\n	此即所谓的控制，虽然可以换个较为委婉的说法，但我还是更愿意用这个术语。换句话说，管理中的控制就是要把目的沟通清楚、传达到位，而并不是要控制人的思想和行动，因为后者是无论如何办不到的。\r\n</p>\r\n<p>\r\n	在技术一线长年工作的人，往往在上手管理时，感觉莫大的困难。这里面的问题就在于把握不好控制这个环节，具体来说，就是经常会把沟通和传达的内容，从目的变成了手段。\r\n</p>\r\n<p>\r\n	例\r\n如，很多人喜欢通过直接阅读全部源代码的方式，对于写代码的程序员实施控制。这样做究竟好不好，值得商榷。但有一些客观规律，却是很难违反。首先，一个人\r\n写的代码，另一个人理解起来存在不小障碍；其次，一个人每天能够生产和理解的代码的总量是有个上限的；再次，同样一个功能，实现它的代码可能存在多种思\r\n路，而优劣的判断标准不仅失之主观，更是极其复杂的。更重要的是，实现要求的功能，这是目的，而写怎么样的代码来实现该功能，这是手段。很多技术人做管理\r\n的方式，就是简直是替人把工作做掉了。而这么一来，非但被管理者不能因此而领会到底工作之目的何在，而且下一回还是无所适从。你可以把饭喂到别人嘴里，但\r\n 是想让人不要饿死的话，最好还是让他感觉饥饿了自己学会怎么吃饭。\r\n</p>\r\n<p>\r\n	这就是为什么有时候，非技术出身又来管理技术人的，反而比科班出身的，\r\n效 \r\n果还要更好些。因为他们不懂到底为了达到目的，可以采取什么手段，这反倒迫使他们把精力集中在把到底要达成什么目的讲得更清楚、更到位些。被管理者反而对\r\n 于采取的手段有了自由空间，把主观能动性发挥了出来。\r\n</p>\r\n<p>\r\n	非技术出身的人来做管理也有问题，但问题不一样了。它变成了由于对于技术不够理解，\r\n而不能够很好地定义目的，甚至定义出很可笑的目的来。程序员这个群体里，用于调侃经理不懂技术而闹出的笑话，那是够多的了。所以管理技术人和技术工作的，\r\n如 果原先技术不过关的，还是有必要补一补技术课，不过这些是后话。\r\n</p>\r\n<p>\r\n	因此，控制这件事，看起来好像很容易，其实却很难操作。不过，有一条原则却是无论如何都成立的，那就是管理者自己要明确到底目的何在。如果是连自己都不清楚的工作，想把别人置于控制之下，那就几乎完全不可能了。\r\n</p>\r\n<p>\r\n	只\r\n自己明确了目的还远远不够，传达到位才是实施控制的关键。如果站得太高或业务不熟，很容易造成传达的偏差和背离，但如果管得事无巨细，结果亦适得其反。那\r\n究竟最到位的控制应该是怎样的呢？一个可行的建议，也是几乎百试百灵的建议是：在目的和手段的交界处，落下控制的闸门。比如，如果目的是实现某个功能，而\r\n手段是写代码，那么控制的最好尺度就是把所要的功能描述得全面、准确，而把写代码的充分自由交给接受这个任务的程序员；如果目的是大规模改进系统的性能，\r\n而手段是修改配置和服务器参数以及添加资源，那么控制的最好尺度就是把性能改进的指标以及是否达标的评判标准，以及采购预算描述得全面、准确，而把具体的\r\n技术和采购任务交给对应的运维和采购部门工作人员去考虑和斟酌。当然，在必要的场合下，也不是绝对不能深入细节，特别是在需要示范和教育的阶段，但如果对\r\n于管理有着长期打算，就一定要在某个时间点完全地放手让别人来做事。这就又得出了一个所谓的控制之禅：<span style=\"color:#7f7f7f;\"><b>你什么都想控制吗？那就想方设法把你的目的传达到位，然后彻底地放手吧。</b></span>\r\n</p>\r\n<p>\r\n	<b><span style=\"color:#c09100;\">计划悖论</span></b>\r\n</p>\r\n<p>\r\n	把\r\n目的传达到位，其实对于一个有长期打算的组织来说，也就差不多够了。因为这样的管理必然会在某个时间达成效果，原因就是人一旦有了目的，那么发挥出主观能\r\n动性的力量是非常可怕的，可以说这是宇宙间最大、最持久，也是唯一可靠的力量。然而，绝大多数的实际情况中，管理者面临的挑战不仅有要做什么的问题，还有\r\n 什么时候要做完的问题。后一个问题，就不能仅靠控制，还要靠计划。\r\n</p>\r\n<p>\r\n	计划是一种对于管理结果的预期，无论它以时间、成本、效益还是怎样的形式出现，都是一样的。因为要达到预期的各种资源，都可以在一定条件下相互转换。\r\n</p>\r\n<p>\r\n	几乎每次作为咨询师参加技术公司的计划会议的时候，我都忍不住想笑。因为计划会议还没有结束，我就知道计划的所有内容都百分之百地不可能按照会议上讨论的那样发生了。\r\n</p>\r\n<p>\r\n	为什么呢？因为我听到了这样的有关计划的对话。\r\n</p>\r\n<ul>\r\n	<li>\r\n		功能A需要多久做完？开发需要两周，测试需要一周，那就三周以后上线吧。\r\n	</li>\r\n	<li>\r\n		这个统计怎么那么慢？是用Ruby做的，换C++吧，效率可以快一倍。\r\n	</li>\r\n	<li>\r\n		一共有六个模块，现在用了三周做了两个，那就是说还要六周？是的，老板！\r\n	</li>\r\n</ul>\r\n<p>\r\n	在\r\n第一段对话中，有两个做开发的程序员的日历显示，他们分别要请三天和四天的事假，而开发团队一共只有五个程序员，但在会议上这件事被完全忽略了。在第二段\r\n对话中，统计算法显然存在极大的问题，本来应该线性增长的时间复杂度，成了近乎二次方的，换成汇编语言也不会对效率的改进有明显影响。在第三段对话中，六\r\n 个模块中，已经完成的两个是最小的，余下的四个加起来，工作量几乎是已完成的十倍。\r\n</p>\r\n<p>\r\n	这些例子给我们以教训：制定管理计划是非常困难的事，因为它需要关于未来的充分信息，以及关于目的的充足知识。但计划还会带来一个非常要命的管理问题，那就是：<span style=\"color:#7f7f7f;\"><b>一旦计划未能兑现，并且没有一个对此的合理解释，从此以后就不会再有人把计划当回事。</b></span>\r\n</p>\r\n<p>\r\n	但短期的计划往往非常跟不上变化。信息瞬息万变，今天一个好好的人，明天就可能会卧病在床。对于开展工作所需要的知识，更是只可能随着时间的推移才掌握得越来越多，等到全部掌握的时候，无论成败，结果已经很明显，也用不着再计划什么了。\r\n</p>\r\n<p>\r\n	因此，真正有意义的计划，只有相对长期的计划。计划必须能够容忍对于未来的未知，以及必要知识的缺失。而要克服未知和无知，投入时间和资源是必要的，计划的周期越长，就越有可能在结果最终铆定之前，积累起预见所必须的信息和知识。\r\n</p>\r\n<p>\r\n	可\r\n是人们有强烈的倾向想要制定短期的计划，比如30天减肥，21天学会编程，等等。这其实是人类的惰性所致，想要付出微小的代价换取巨大的成果。但这样的计\r\n划一来是很难实现，二来意义也很小——30天减了肥的人往往又胖了回去，21天学会了一点编程皮毛的人往往没过多久就又忘记得一干二净。企业里面计划会议\r\n多如牛毛，但真正坚持下来做成伟大事业的产品或项目却寥寥无几。经过多年的观察，我发现了一个特别有意思的现象，不妨称之为计划悖论：<span style=\"color:#7f7f7f;\"><b>先有了计划再上马的事业，大抵无疾而终；先有了很多积累最终计划才开始成形的事业，反而很有希望做大。</b></span>\r\n</p>\r\n<p>\r\n	这个悖论有一个古老的版本：在鸡蛋孵出小鸡之前，不要去数你能赚多少钱。未来会有怎样的变数，你要从事的水有多深，都不是一开始能知道的，计划做得再漂亮也是枉然，只会让人觉得你不靠谱。\r\n</p>\r\n<p>\r\n	<b><span style=\"color:#c09100;\">小结</span></b>\r\n</p>\r\n<p>\r\n	大\r\n家可能注意到了一点，这堂课里充满了很多矛盾，这正是技术和管理工作的根本区别所衍生的。技术人对于确定性的工作内容会感觉习惯，甚至驾轻就熟、得心应\r\n手。计算机只会按照指令行事，就算是运行异常，也可以一步步地排查出原因。但人性就太不一样了，它充满了矛盾，并且很难有什么确定性的规律，可以让他人像\r\n机器一样服从管理。事实上，管理的魅力也正在于，不是让他人唯命是从，而是发挥人的主观能动性，激发出自身的潜力，解决管理者甚至都没有想到过的各种问 \r\n题，并创造性地带来巨大的附加价值。\r\n</p>\r\n<p>\r\n	因此，和技术工作根本不同的是，管理不是要亲自照顾一切细节，而是要委托这些细节给被管理者，由他们自己来发挥才能。控制他人，将自己的意志传达到位，然后彻底地放手，从指挥和命令的地位调整为服务和支持的地位，这就是最高明的管理者们唯一应该做的。\r\n</p>\r\n<p>\r\n	计\r\n划是一把双刃剑，不要先有计划再做事，因为这个时候还不知道未来会发生什么。先积累一些经验，吃一些亏，朝向着目的推进一些，然后再一点点地形成一些长期\r\n的计划，这是做大事的节奏。如果计划未能实现，就要在结果出现之前想办法弥补，至少要做必要的解释来调整计划，否则团队的信心会受到挫折，对于管理者的信\r\n任也会下降，而这对于管理工作来说是非常不利的。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-01-26/2818276-Managment-Control-Plan', '1', '2015-01-09 09:49:13');
INSERT INTO `yov_source` VALUES ('10032', '是你的程序员辛苦还是他们太懒？', '程序员 辛苦 懒', '&nbsp;&nbsp;&nbsp;&nbsp;相比体力劳动，程序员等这种脑力劳动的工作强度并不容易评估，因为创造性的技术员工往往看起来似乎没有那么的辛苦。一位自由开发者分享了身边的技术团队遭遇，认为管理层判断员工努力与否应取决于结果、工作软件。<br />', '<p>\r\n	当做体力劳动时，很容易评估工作强度，因为能看到肢体的动作，甚至包括汗水。你也可以通过他们的工作成果来衡量：比如砖墙一直在被砌高，地下挖的坑\r\n越来越大等。认识和奖励辛勤工作是人的本性。当这一切遇到了脑力劳动时就有所改变，因为创造性的技术员工往往看起来似乎没有那么的辛苦。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201401/24/52e20a0dddce3.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201401/24/52e20a0dddce3_middle.jpg?_=50808\" alt=\"\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	早\r\n在2004年，当时我是有线电视公司计费和配置系统大型团队中的一名初级开发人员，大系统由多个相对独立的子系统构成，每个子系统又有不同的小团队负责。\r\n其中模拟电视和数字电视两个团队就相对独立。模拟团队决定将系统建立在微软Biztalk的早期版本上，他们工作异常辛苦，经常能看到他们深夜和周末加班\r\n加点的身影，围绕在桌前探讨产品问题、解决之道，工作真的非常辛劳。\r\n</p>\r\n<p>\r\n	而在数字团队身上则不一样，代码大多数由一位名叫Dave的成员搞定。\r\n我当时只是负责初级维护工作，一开始我很难看懂那些代码，有同事抱怨Dave做事太复杂，但是Dave将我招致麾下并建议我读几本面向对象编程的书，他教\r\n我设计模型、SOLID原则以及单元测试。这样没多久我就开始觉得代码变得有意义了，而且随着我越发地努力学习编程，开始欣赏他很棒的设计。这样的结果就\r\n是表面上看起来我们似乎一点不辛苦，我下午五点半就下班回家、周末也不加班、我们不会围着桌子探讨。在外人看来一定认为比起模拟团队，分给我们的是很容易\r\n的工作。而事实是，工作要求很相似，我们只是有更好的设计和更完善的软件、更好的配套基础设施，尤其是我们的单元设计。\r\n</p>\r\n<p>\r\n	之后经理准备根据大家表现给出绩效加薪奖励，当轮到我跟老板聊的时候，得到的却是他不认可我们工作辛苦的回答，和那些贡献夜晚和周末的团队比，我们团队似乎并不关心公司。\r\n</p>\r\n<p>\r\n	其\r\n实有线电视公司可被看成一个实验室，你可以直接观察比较优秀和糟糕的软件设计和团队行为。我认为一个辛苦工作的表象往往是一个失败的迹象。在高压环境下其\r\n实不利于软件开发者工作，长时间工作也不一定有好的效果。有时解决难题最好的办法是停下来不去想它，走出去散步或者好好睡一觉，让潜意识去解决问题。\r\n</p>\r\n<p>\r\n	管理层判断员工努力与否应取决于结果、工作软件，而不仅从工作表象来得结论。而且最好不要限制开发人员一定坐班，远程工作有时更有效率。你可以用员工的工作结果衡量判定，而不是盯着他们坐在自己桌前每天8小时或者围在一起“热火朝天”讨论所谓“有用建议”。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2014-01-24/2818260-programmers-working-hard-or-lazy', '1', '2015-01-09 09:50:22');
INSERT INTO `yov_source` VALUES ('10033', '关于技术团队管理的胡言乱语', '技术团队 管理', '&nbsp;&nbsp;&nbsp;&nbsp;随着一波一波的组织兴起，一阵一阵的环境变化，团队管理领域的新名词也如长江后浪推前浪般层出不穷。在2013年的舞台上，全端工程师、自组织团队、新兵训练营等名词闪闪发光。本文中将对这些名词进行分析和解读。<br />', '<p>\r\n	临近年底，接到《程序员》杂志的邀请，希望我能写一篇与团队管理有关的年终盘点文章，盘点2013年业界与团队管理相关的大事。试想，揪出各个公司\r\n在2013年的各种“大事”，指点江山，激扬文字，那种众人皆醉我独醒的感觉是相当的妙不可言。可细细一想，2013年可以归纳为团队管理大事的事件倒是\r\n不少，例如Yahoo!美女CEO宣布取消在家办公制度，最近又按照绩效评估结果排名开始裁员；最近知乎上好事者提出的“你问什么离开xx公司”系列，各\r\n种回答纷至沓来，为2013的团队管理大事记提供了不少素材。可惜，不在局中之人，就算怀着最善意的心思去揣摩，也难以一窥其中究竟，所以对作者来说豪气\r\n万分地指点江山，倒极有可能落得个牛头不对马嘴的下场。思忖至此，不觉赧然。正欲一口回绝之际，忽又想起，虽然没法过一把“粪土今年万户侯”的瘾，在这蛇\r\n尾巴的当口，和大家分享一下2013年在国内团队管理方面的各种新名词，也是件颇有意思的事情。当然，本人身处互联网行业，做的主要是技术团队管理的事\r\n情，眼界所限，也只能以我的个人体验作为整篇文章的基础了。\r\n</p>\r\n<p>\r\n	<b><span style=\"color:#c09100;\">2013你方唱罢我登台的名词们</span></b>\r\n</p>\r\n<p>\r\n	说\r\n起团队管理，我想但凡超过一个人的团队，都会面临这个问题。团队规模小，个体能力强，依靠个人能力就能维持住团队；而如果团队规模较大，一般就需要投入更\r\n多的精力来建立良好的团队协作体系，依靠文化和制度建立团队的执行力。从微软到Google再到Facebook，概莫能外。当然，规模与团队管理的方式\r\n并不能简单地划等号，巨大如Google这样的公司，仍然在良好的工程师文化的基础之上，保持了相对宽松和灵活的团队管理体系。\r\n</p>\r\n<p>\r\n	团队管理并\r\n非是什么神秘和高端的事情，采用什么样的团队管理方式，既与组织的目标和文化根基相关（说白了就是公司的创始人和早期员工），也和当下的环境（包括行业环\r\n境与公司内部环境）相关。随着一波一波的组织兴起，一阵一阵的环境变化，团队管理领域的新名词也如长江后浪推前浪般层出不穷。在2013年的舞台上，<b>全端工程师、自组织团队、新兵训练营</b>等名词闪闪发光。\r\n</p>\r\n<p>\r\n	有\r\n句老话说：“太阳底下没有新鲜事。”这话放在团队管理领域显然极为适合。纵观技术团队的氛围，从软件领域史前时代单兵作战的黑客群体，到重量级软件工程束\r\n缚下的“开发资源”，再到轻量级软件工程对个体能力的重视，团队管理的方式明显在“注重个体”与“注重流程”之间走了一个轮回。显然，采用什么样的团队管\r\n理方式无非是“现阶段能够最大化收益的做法”与“团队成员期望”之间的博弈结果。幸好，这种博弈不必是零和博弈，而可以是一种协作博弈。敏捷方法把软件开\r\n发看作团队的“合作博弈”，尝试在软件开发效率、客户满意度和工程师的满意度之间找到新的平衡。过去若干年敏捷思潮在软件领域迅速地攻城掠地，一方面固然\r\n是由于这种方式能够提升效率，满足了客户和公司业务发展的需要；另一方面也是因为敏捷方法较好地平衡了团队与开发个体的需要。\r\n</p>\r\n<p>\r\n	不管怎么说，\r\n软件行业发展到了现在，软件从最初的个体手工制作进入需要某种规模的协作时代，软件从业人员快速增长，软件开发工具正在逐渐降低开发的门槛，各种软件开发\r\n方法与实践层出不穷，这些都使得软件行业中的团队管理方式愈发丰富。在当下，恐怕我们已很难用某种特定的模式或者架构来描述软件领域的技术团队管理趋势，\r\n反而活跃在2013年技术团队管理舞台上的新名词，或许能够给我们打开一扇窗，让我们能够透过这些名词窥视到技术团队管理领域的大潮。\r\n</p>\r\n<p>\r\n	<b><span style=\"color:#c09100;\">2013年终名词盘点</span></b>\r\n</p>\r\n<p>\r\n	<b>全端工程师（Full Stack Engineer）</b>\r\n</p>\r\n<p>\r\n	2013\r\n年最让人印象深刻的技术团队管理方面的名词，非“全端工程师”莫属。“全端工程师”是指那些具有多端开发能力的工程师（例如前端、后端、移动开发端，甚至\r\n还有运维端），这类工程师可以一个人搞定一个项目，或者至少可以一个人搞定一个功能所有的设计和开发工作。从“前端工程师”（听说有些企业甚至还有\r\n“JavaScript工程师”和“HTML工程师”的分工）、“后端工程师”等日渐细化的职位描述变成高端大气的“全端工程师”，其中的变化可不是简单\r\n的名词替换。\r\n</p>\r\n<p>\r\n	和真实的社会一样，程序员的世界也处于不断的进化中。社会分工往往是社会进步的标志，因此，当程序员分裂成架构师、设计师、开\r\n发工程师时，我们并不觉得惊讶；当开发工程师细化成后端工程师、前端工程师之后，我们同样可以把它看作是程序员社会的进步与发展。可“全端工程师”是怎么\r\n回事？难道社会分工的发展在程序员的世界中不再适用了？而且“全端工程师”的称号特别让人容易回想起软件领域的史前时代，那时候的黑客们可是真正的全端工\r\n程师（当然，我猜他们不一定喜欢工程师这个一点都不酷的称号），软件硬件、编程电路无所不能。\r\n</p>\r\n<p>\r\n	在当下的软件环境中，“全端工程师”这个概念\r\n到底意味着什么呢？在我看来，“全端工程师”的概念与生产工具的发展以及开发需要更加“快速”直接相关。开发语言与开发工具的发展，加上技术开发平台的标\r\n准化程度越来越高，可直接使用的框架和组件越来越完善，和几年前相比，如今的工程师可以更容易地掌握多端开发技能。另一方面，越来越受重视的“快速”开发\r\n和部署则在进一步寻找开发过程中可优化的部分。显然，如果一个工程师能够从前端到后端完成一个功能或者产品，那么开发人员之间、开发人员与相关协作者之间\r\n的沟通成本无疑会变得更小，开发的响应速度也会变得更快。一个拥有足够多“全端工程师”的组织，显然可以以更快的速度和更低的成本开发产品；而一个拥有全\r\n端开发能力的“全端工程师”显然也具有更好的适应性和改变世界的能力。《与机器赛跑》这本书把经济周期归结为生产力的提升，认为生产力的提升是造成就业结\r\n构变化的主要原因，那些跟不上生产力变化的个体将会被社会无情地淘汰。虽然我并不同意这本书关于经济周期原因的判断，但关于未来，我想说：“一招鲜，吃遍\r\n天”早已行不通了。未来的工程师不再需要用前端或者后端的名称定义自己，变革只会把保守的人甩下车。技术的作用在于满足用户已经表现出来或还未表现出来的\r\n需求。对工程师来说，发挥价值的地方仍在于与产品的强联系。积极发挥技术的力量，影响产品，影响设计，探索各种可能性，用技术帮助自己所在的组织改变世界\r\n才是迈向未来之道。\r\n</p>\r\n<p>\r\n	<span style=\"color:#000000;\"><b>自组织团队（Self-organizing Team）</b></span>\r\n</p>\r\n<p>\r\n	“自组织团队”这个词2013年也大有市场。这个名词本身并不新鲜，但今年，我多次在各种场合听到演讲者提到这个名词，要么是介绍自身自组织团队的经验，要么是信誓旦旦要成为自组织团队。那么，这个自组织团队，究竟是什么名堂？\r\n</p>\r\n<p>\r\n	其\r\n实，自组织应该可以被看作是宇宙的常态：原子自组织成了分子，细胞自组织成了生命。如果将企业比作生命体，从生命的发展过程来看，我们现在所习惯的这种完\r\n全自上而下的控制方式才是怪异且不自然的。当然，社会组织（公司）不是生命体，但越来越多的研究表明，组织更接近类似生命体的复杂系统，而不是对特定输入\r\n具有可预测输出的简单决定性系统。\r\n</p>\r\n<p>\r\n	对一个团队而言，自组织意味着什么？在一个组织中，任何一个参与者都不具有完整的信息，也无法完全理解整\r\n个系统。因此，参与者必须集思广益。但如果参与者不能够成为真正的决策者，他们即使能够将所有信息集中起来并得到合理的解决方案，也无法采取任何行动。另\r\n外，从心理的角度考虑，如果没有合理的激发机制让参与者有意愿集中自己的信息并解决问题的话，那么组织也无法快速响应遇到的问题。一个自组织的团队需要良\r\n好的沟通和决策机制，以及良好的激发和激励机制。\r\n</p>\r\n<p>\r\n	当然，凡事不可极端。设想企业是一个完全由个体自发组织起来的团队，它能够正常工作吗？我\r\n想很难。毕竟，组织的目标与个人的目标不大可能完全一致。从这个意义上说，组织中必须存在一定程度的控制，这样才有可能让整个组织朝着组织的目标顺利前\r\n进。然而，过度的控制往往又是扼杀创新的主要原因，卢茨在《绩效致死》这本书中，用生动的案例描述了通用汽车这家曾经是美国骄傲的公司是如何在超强的控制\r\n下变得死气沉沉，一片萧条。那么，我们要决定的，就是在自组织和控制之间选择怎样的平衡。而作为一个管理者，借用《管理3.0》一书的描述，管理者就像花\r\n园中的园丁：偶尔照料成熟期的系统，让它们自己解决自己的问题；频繁维护年轻的系统，让它们按照组织的意愿生长；对趋于死亡的系统，发现它们并把它们清除\r\n出去。\r\n</p>\r\n<p>\r\n	<b>新兵训练营（Basecamp）</b>\r\n</p>\r\n<p>\r\n	2013年，新兵训练营“突如一夜春风来”，瞬间在不少公司站稳了脚。\r\n各公司开始建立自己的新兵训练营，训练营的名字也各有千秋，从忠厚朴实的“新兵训练营”到高端大气的“特种兵训练营”，不一而足。其实，这些软件公司早就\r\n意识到了生力军的重要性，而且也早已有各种形式的新员工培训帮助新员工快速融入自己的组织。虽然新员工培训这颗羊头下，各企业卖的狗肉各不相同——有的企\r\n业把新兵训练营做成了技术培训营，有的企业则把新兵训练营变成了“洗脑营”。但毫无疑问，这些组织并非不明白新员工的重要性，也并非没有帮助新员工熟悉工\r\n作环境的机制，为什么2013年的舞台上，新兵训练营会受到格外的重视呢？\r\n</p>\r\n<p>\r\n	新兵训练营这个名字早已有之，在国内软件行业被广泛接受应该与\r\nFacebook的实践有关。扎克伯格2012年宣布IPO时对外发表的公开信中提到了Facebook的Bootcamp，并说“业内有许多人负责管理\r\n工程师团队，并不愿亲自动手编写代码；然而，我们寻找的实践型人才都希望也能够经受新兵训练营的检验”。Facebook的新兵训练营以严格著称，它不仅\r\n是一个培养和训练人的地方，同时也是生产真正符合组织文化的员工的工厂。毫无疑问，Facebook的新兵训练营有不少值得借鉴的地方，无论是它的组织方\r\n式，它的强制性，以及它的导师机制，都是值得称道的。不过，在期望新兵训练营发挥文化方面的作用时，各位可得多留点心。\r\n</p>\r\n<p>\r\n	我相信，每个管理者\r\n都希望自己的组织是一个有“文化”的组织，并且愿意花费相当多的精力在自己的组织中“打造”企业文化。这样看来，Facebook的新兵训练营确实是个值\r\n得效仿的方式——文化，从新员工抓起。可是，设立一个新兵训练营，设计一套课程，派培训师上去喊喊口号就能够让团队的新成员变成“符合组织文化”的个体？\r\n显然没有这么简单。文化并不是虚无缥缈的口号，组织的工作方式、工具、流程、奖励机制等才是实打实的企业文化的体现。一个为经理安排单独办公室，并根据级\r\n别设置办公室大小的公司，就算找来全世界最好的培训师，恐怕也没办法说服新员工相信“平等尊重”是公司的文化。因此，想要效仿新兵训练营，首先得理解\r\nFacebook的新兵训练营只不过是它的文化体系中的一个组成部分，并非是文化的生产者。与其花大代价去折腾新兵训练营，不如老老实实把自己团队内的文\r\n化根基建设好。说白了，新兵训练营值得借鉴的是它的理念和实践，而不是期望它成为组织内的洗脑机器。\r\n</p>\r\n<p>\r\n	<span style=\"color:#c09100;\"><b>写在最后的话</b></span>\r\n</p>\r\n<p>\r\n	2013年即将过去，软件行业又将翻过新一页。在这个唯一不变的就是变化的时代，我尝试从记忆中把今年耳闻最多的三个名词揪出来，算是管中窥豹，和各位读者分享对技术团队管理的理解。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2013-12-24/2817907-Team-Managment', '1', '2015-01-09 09:51:57');
INSERT INTO `yov_source` VALUES ('10034', '技术团队新官上任之高层篇', '技术团队 上任 高层篇', '&nbsp;&nbsp;&nbsp;&nbsp;Google CEO曾说：“信息技术发挥的潜力尚不足百分之一。” 无论是技术创业，还是被突然委任掌舵新公司成为技术和管理兼顾的一把手，高层技术管理职位对于很多人来说其实并不遥远。<br />', '<p>\r\n	什么是高层管理人员？这是应该首先明确的问题。和技术团队的基层和中层管理人员不同，“高层技术管理人员”其实是个伪概念。我的意思是，\r\n没有什么严格意义上的“高层技术管理人员”、“高层销售管理人员”等。高层管理人员，就是指将个人的利益与自己所在集体的利益同一化的那部分人员。如果把\r\n讨论范围限于企业，那就是指将个人的利益与自己所在企业的利益同一化的那部分人员。\r\n</p>\r\n<p>\r\n	换言之，企业有利，高层才会好；企业面临压力，高层就睡不着觉。这个标准可以极有效地鉴别一个人是否属于高层管理人员：如果企业亏损得一塌糊涂，而此人高薪照拿，也没有自发的自责之心，那么他至多是一个中层。\r\n所谓的“高层技术管理人员”，首先是一个企业的高层管理人员，对企业的命运负责。其次，才是要考虑如何从做人、用人和做事三方面来领导企业的技术方向，牢\r\n牢地按照对企业发展最有利的方式，从企业的技术需求出发来构筑现实基础并规划未来蓝图。\r\n</p>\r\n<p>\r\n	<strong>知天理，接地气：高层管理人员的行动指南</strong>\r\n</p>\r\n<p>\r\n	成为一名高层管理人员是一件充满了机缘巧合的事情，有些人是因为参与了创业，有些人是因为家族企业的选择，有些人是因为原先企业结构的重组而作为某项业务的\r\n负责人被推上了“风口浪尖”。无论如何，“成为”一名高层管理人员意味着一种从无到有的转变，所面临的压力和挑战与原来相比，发生了质的变化。有相当一部\r\n分高层管理人员在成为这个角色之前，没有或者仅有很少中层管理的经验，有一些甚至连基层管理的经验也没有。\r\n</p>\r\n<p>\r\n	在如今的商业背景下，很多原先在国有企业或是外资企业的一线员工会选择辞职创业的路线，还有一些人会直接从学校或科研岗位走上创业的起跑线。这就是说，他们会立刻位于从毫无管理经验到必须完成高层管理工作的要求之下。\r\n</p>\r\n<p>\r\n	但这是不是真的很要紧呢？其实这是可以做到的，而且有大量的事实表明，很多中层向高层的转变尚不及基层甚至一线员工直接向高层的转变来得顺利和迅速。这其中\r\n的秘密，其实就在于技术的权重不断地提高，掌握关键技术往往是创业中的必要因素。而“可以做一名高层”和“可以做好一名高层”之间的差距之大，实在是比中\r\n层或基层之间的差距要大上几万甚至几十万倍。\r\n</p>\r\n<p>\r\n	高层的思想和行动直接决定了企业的前途命运，想想世界上最优秀的跨国公司的CEO和CTO，与虽然不愁生存但始终不能突破发展瓶颈的大中型企业，还有全世界数千万半死不活的小公司的CEO和CTO之间差距有多大。如果可能的话，你愿意做到多么优\r\n秀？这是每个高层，哪怕目前只是一个非常不起眼的公司的高层，应该具备的一种自尊，并由此对自己的发问。\r\n</p>\r\n<p>\r\n	前面说过，企业的发展直接取决于高层的思想和行动。而思想则决定了行动，具体来说，思想会决定行动上的精力分配。在一个人的精力有限的前提下，高层管理人员的精力分配就成为十分重要的事\r\n情。简单地说，高层管理人员有没有把精力放到该做的事情上面，这对于企业的生存和发展很是要紧。\r\n</p>\r\n<p>\r\n	而高层管理人员是不是把精力放到该做的事情上面，这在很大程度上取决于其思想上有没有认识到什么是该做的事情。而如何认识到什么是该做的事情，这比乍看之下要难得多。\r\n</p>\r\n<p>\r\n	俗\r\n话说，当家才知柴米贵。高层管理人员会被完完全全地暴露在外部的压力之下，要处理客户上帝的种种要求，要适应有关部门的监管规范，要考虑利润的分配和对未\r\n来的投资……凡此种种，这是每月到期去领工资的人不可能充分领教的，因此也不可能有切身体会。而在这样的千头万绪之中，始终牢牢地把思想和行动铆定在该做\r\n的事情上，这确实不是一般的本事。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201311/15/5285cb9b5effe.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201311/15/5285cb9b5effe.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	因此，高层管理人员绝对需要的是大量的思考时间。战略执行和日常交付，是中层管理和基层管理的天职。而决定什么时候要做什么，这才是高层管理人员应该反复思考的事情。这里面包括了两层意思：1. 时机，什么时候开始做，什么时候做完；2. \r\n目标，无论采用什么样的手段，要达成怎么样的效果。\r\n</p>\r\n<p>\r\n	高层管理人员事实上的核心任务就在于此，也就是要反复地向下传达这种思想，企业全体人员\r\n都要围绕着在特定的时机，完成特定的目标来做每天的工作。例如，高层可能会提出：要在Q4完成5.0版本的开发和内部测试，在下一财年的Q1完成5.0版\r\n本的Beta测试并正式上线，Q2完成5.5版本的详细设计。或更简单一些：2014年5月30日之前完成将进销存系统和结算系统与国内主要的10家物流\r\n订单系统的对接。而去实现这样的目标，则应该是高层以外的所有人协力完成的。\r\n</p>\r\n<p>\r\n	制定战略只是一句话，但这句话说出来以后如果完不成，并且没有一个交代，高层管理就必然会失控。而一旦高层管理失控，企业几乎就会失去方向，陷于混乱，发展会停滞，甚至生存也会面临问题。因此，制定战略表面上看是一种高层自行完成的工作，其实包括了两个重要的方面。\r\n</p>\r\n<p>\r\n	1.\r\n对于客观世界的洞察，对于技术的深刻理解和良好直觉，以及考察现有的经验教训作为参考，这是管控技术的高层管理人员需要时刻关注和积累的。凭想象提出战\r\n略，必然不能服人。高层的意志影响重大，因而特别需要合理，而在有些战略表面看上去不合理，而实际上却是合理的，这时就更需要把道理讲清楚。\r\n</p>\r\n<p>\r\n	2. 与本企业的现实相结合，任何一个重大战略的制定，都不能离开与本企业人员深入交换意见——不仅是基层管理人员和中层管理人员的意见，还要考虑到一线人员的意见。群众路线是非常灵验的法宝，这是将理想化的战略优化成可执行战略的重要步骤。\r\n</p>\r\n<p>\r\n	这\r\n里面的一个不能忽视的要点在于，经过了群众路线以后，每名企业员工就不仅仅只是会喊口号，而是能够理解战略对于他们自己有什么意义，从而就能够承受重大战\r\n略必然会带来的一些痛苦和牺牲。这两个方面，我总结了六个字：知天理，接地气。高层管理人员要学会务虚与务实的结合，以务虚明方向，以务实得成果，这就是\r\n企业管理的核心秘密。\r\n</p>\r\n<p>\r\n	<strong>寻找技术合伙人</strong>\r\n</p>\r\n<p>\r\n	高层管理人员引入任何人才都需要慎之又慎，因为别的\r\n管理人员会从这里看到你的偏好，并在他们自己招聘时效仿。不久以后，公司就会充满了这样的人。没有管理经验的人，一朝成了高层，很容易被有管理经验的中层\r\n和基层看穿行为模式，这样就会很糟糕。成功的企业需要各种各样的人才，技术团队也不例外，这是我在<a href=\"http://www.csdn.net/article/2013-09-22/2817003\" target=\"_blank\">《程序员》2013年10月期</a>《<a href=\"http://www.csdn.net/article/2013-10-16/2817181\" target=\"_blank\">技术团队新官上任之中层篇</a>》里反复强调的。那么，高层管理人员在亲自引入技术人才时，需要注意什么问题呢？\r\n</p>\r\n<p>\r\n	高层管理人员应该尽可能地把组建技术团队的任务交给中层管理人员去完成，因为这大体上属于战略执行的工作。但高层管理人员也应该亲自引入关键性的技术人才，即使引入以后并不立即授予管理职权，也必然是要以技术合伙人的标准来考察的。\r\n</p>\r\n<p>\r\n	所\r\n谓合伙人，就是至少在某一方面要以平等地位相处之人。行政上，技术合伙人可能只是一个基层经理或是首席工程师，但他们却是整个企业在技术上扛大梁的人。例\r\n如，微软的“杰出工程师”和“技术院士”职位就是这样的合伙人，他们的存在相当于企业的技术灵魂，受到所有人的尊敬甚至崇拜。\r\n</p>\r\n<p>\r\n	引入技术合伙\r\n人，是企业技术储备和打造企业技术文化中的非常重要的组成部分，也是高层管理人员的重要技术职责。技术合伙人，需要有能够满足企业当下和未来之需的技术功\r\n底和潜力，需要有能为表率的厚德载物和积极进取的正能量。有此两条的前提下，唯一需要的就是对于企业战略目标的认同了。\r\n</p>\r\n<p>\r\n	技术合伙人是一种长期的关系，出成果不在一朝一夕，行大事亦可不拘小节。所要避免的，一是急功近利，把合伙人当一般的执行人员使用，这样不仅造成人才流失和资源浪费，而且落下不好的口碑；二是将庸才当天才，纵容过度，造成企业内部人心动荡，与主流价值观偏离。\r\n</p>\r\n<p>\r\n	我常常将找合伙人比作找对象。其实有过企业管理经验的人都会有体会：找合伙人比找对象要难多了，但这个过程是相似的，要有好感期、热恋期、消退期和稳定期的变化。没有拍桌子吵过架的合伙人关系，就是不成熟的，只能说是相敬如宾，却不能说是肝胆相照。\r\n</p>\r\n<p>\r\n	<strong>以技术振兴企业</strong>\r\n</p>\r\n<p>\r\n	企业有很多种类型，也有不同的发展时期。不同类型的企业，在各个发展时期，对技术有着不同的需求。高层管理人员的技术战略，应该提前做好准备，为企业的发展注入动力。\r\n</p>\r\n<p>\r\n	从零开始创业的企业，在初创时期，注意力要放在核心产品的研发上，保证产品能够尽早达到“够用”状态，然后投放市场开始不断迭代。技术战略中应该突出时机的重要性，此时技术的先进性，远非需要关注的重点。\r\n</p>\r\n<p>\r\n	而任何会增加投放市场的难度，以及增加客户获得产品的难度的事情都要坚决延迟。在接触到客户之前，任何对于产品的判断都是臆想，客户使用产品的方式可能和设\r\n计预判相差十万八千里。因此，在投放市场之前要关注的是产品的整体质量，而不是个别特性，因为客户是否认可这些特性还很难讲。可是，任何客户都会对整体质\r\n量低下的产品说不。\r\n</p>\r\n<p>\r\n	而如果企业是在已有既有客户的前提下，开始研发新产品，情况就不一样了。有些企业已经积累了数百万甚至更多的用户，想针对这些用户推出新产品，为此设立新公司。\r\n</p>\r\n<p>\r\n	这\r\n样的企业首要的一点就是要摆脱旧思维，不要以为玩你家游戏的客户会自然而然地接受你的即时通信产品，只因为这是你家出产的——人家凭什么不用微信呢？放下\r\n包袱，从小学生做起，这才是应该有的心态。此时的技术研发，应该和任何一个新入局的团队一样，研究竞争对手有哪些好处，在自己的产品中发扬；又有哪些痛\r\n点，在自己的产品中避免。这样的企业已经有了明显的优势：相对充裕的研发资金，相对完备的人才梯队。\r\n</p>\r\n<p>\r\n	但就是有很多企业错误地以为此前的用户\r\n也是个优势。错！用户接受你的产品不是因为你好，而是因为你的产品好。世界500强公司在自己不擅长的领域贸然高调出牌，然后惨淡收场的例子，难道还需要\r\n多举吗？反过来，世界500强公司亦如此，你以为自己的企业又如何？仔细掂量掂量吧！\r\n</p>\r\n<p>\r\n	任何时候都不应该忽视对企业的基础技术研究的投资，以\r\n及有潜力的技术人才的储备。如果企业的发展过程中没有犯根本的错误，那么企业迟早会积累起大量的业务运行数据，以及复杂的业务运行逻辑，从而不久就会出现\r\n对于高级的计算和存储技术的需求。而要满足这样的需求，可以肯定的是从市场上是买不到现成的解决方案的，即使企业选择将这部分业务外包，在本企业内也需要\r\n高级的技术人才来承担技术沟通的工作。\r\n</p>\r\n<p>\r\n	这些工作在企业还在求生存时，是很容易被忽视的。然而这就好像是一个小孩子，在幼年时缺失了某些营养的话，长大以后再花钱也补不出理想的效果。高层管理人员即使不是技术出身，也一定要培养对于技术的理性认识，要有独立的技术判断，而不能一股脑儿地把技术\r\n命脉交给一个花钱买来的外部力量去负责。\r\n</p>\r\n<p>\r\n	另一方面，即使高层管理人员是技术出身，也不能因此就坚持用技术来解决一切问题，有些问题从根本上\r\n说需要极尖端、极昂贵的企业无力自行研发的技术，或是已经有很成熟的解决方案而无须自己再花精力从头研发的技术。这样的情况下，高层管理人员也要正确地做\r\n出判断，不然很容易由于在一两个问题上拔不出来而将初创未定的企业带入万劫不复的泥潭。\r\n</p>\r\n<p>\r\n	在企业已经有了稳定的现金流，有了生存的基础以后，下一步做什么？是固步自封，直到多年后有一天忽然意识到与新生力量在技术上的差距，然后被一举攻破元气大伤，还是始终锐意进取，居安思危，利用既有的资金和人才优势建立技术门槛，使企业在竞争狂潮中立于不败之地？\r\n</p>\r\n<p>\r\n	这个问题，对于高层管理人员来说，可谓是生死攸关。有多少高层管理人员，在草根创业时期生机勃勃，求新求变，成就了一番事业。然后却陷入声色犬马，听不进中\r\n肯之言，一意孤行地走技术倒退之路，最终惨遭淘汰，令人唏嘘。企业的高层管理团队，一定要保持清醒的头脑，及时地更新团队成员，保证让头脑清醒、斗志昂扬\r\n的人据守高层管理的职位。\r\n</p>\r\n<p>\r\n	读者诸君须知，如今的技术发展，真可谓是一日千里。换句话说，万万不可空转一日。昨天还是社交网络、Web \r\n2.0，今天就是云计算、大数据，明天又有量子计算、生物芯片在招手。高层管理人员作为普通人类，不可能皆为圣贤。但高层管理人员却可以利用已拥有的资源\r\n和影响力，影响企业的所有技术人员共同奋斗，来学习和掌握未知的科技，生产未来的产品，满足现在的客户甚至全人类都难以想象的产品。\r\n</p>\r\n<p>\r\n	君不见，航天技术、空间技术、生物技术都正处在极为关键的突破期，二十年以后，这个世界会变成什么样？值得期待的是，信息技术是目前一切主流技术的基础，也是\r\n产品研发的关键。无论现在你的企业是在做一个给普通人日常生活使用的移动App，还是给航空发动机的核心控制部件进行逻辑设计，都有很广阔的发展前景。关键在于作为高层管理的你，有着海阔天空的想象、锐意创新的观念、不轻言败的耐力，还有识用能人的慧眼！\r\n</p>\r\n<p>\r\n	<strong>总结</strong>\r\n</p>\r\n<p>\r\n	我\r\n们分三期介绍了新上任的不同位阶的技术管理人员应该在思想和行动上做出的调整，以及在日常工作中应该关注的问题。其实管理并不神秘，回归到本源，还是一个\r\n如何能够调动团队之力，完成统一目标的工作。有些目标真的很大，需要很多人的共同努力才能达成。技术管理人员任重而道远，借用一句老话来结束这个专题：道\r\n路是曲折的，前途是光明的。加油吧！\r\n</p>\r\n<p>\r\n	Google \r\nCEO曾说：“信息技术发挥的潜力尚不足百分之一。”在这样的形势下，无论是技术创业，还是被突然委任掌舵新公司成为技术和管理兼顾的一把手，高层技术管\r\n理职位对于很多人来说其实并不遥远。相信读者诸君无论是已到达了高层管理的位置，还是抱着进入高层的理想，都会从本文中有所受益。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2013-11-15/2817522', '1', '2015-01-09 09:57:22');
INSERT INTO `yov_source` VALUES ('10035', '技术团队新官上任之中层篇', '技术团队 上任 中层篇', '&nbsp;&nbsp;&nbsp;&nbsp;对任何企业来说，中层管理人员都是极为关键的，因为中层是执行力的来源。可以说，一家企业有没有希望，只要看一下中层是精明强干，还是松松垮垮就全明白了。其中有哪些必须了解和掌握的知识和道理呢？<br />', '恭喜升职为中层技术管理人员！在不同的企业里，中层技术管理人员的具体职位名称有所不同。在微软、IBM这样的大型企业里，中层大致对应着部门经理或产品\r\n线负责人这样的职位。而在互联网企业如BAT，技术总监、高级或资深研究员实际担负着中层管理的职能。无论如何，中层技术管理人员的共同\r\n特点是：管理团队的规模在100人以内、有负责技术团队的资源流向和人事流动的决定权，但与企业仍保持双向自由选择的雇佣关系；对企业的核心战略有技术话\r\n语权和影响力，但并无决策权。中层和基层技术管理人员的最本质区别在于，中层负责战略执行，而基层负责日常交付。用通俗的话说，中层要考虑怎么把老板的想\r\n法用技术手段在一定时间内变成现实，具体每天的活可以交给基层队伍去完成，而由中层负责检查和指正。遇到基层搞不定的或者需要协调的问题，中层要出面解\r\n决。另外，中层管理人员还要负责技术团队的建设和培养。<strong><br />\r\n<br />\r\n中层技术管理人员的思想定位</strong><br />\r\n<br />\r\n新\r\n官上任的中层技术管理人员首先要弄清楚的一个问题，就是向谁负责。这个问题弄不清楚，工作就无法开展。企业的情况千差万别，但有一点是任何中层技术管理人\r\n员都需要首先明确的：要对直接业务上级负责。中层可能本身又分成若干级别，无论如何，下级负责人不要越位替业务上级谋政，每个中层都要具备强烈的服从意\r\n识。这包括几个方面：首先，上级交给的战略规划，自己应该负责去想办法用掌握的技术资源加以落实，不要先对战略规划本身采取整体怀疑的态度；其次，在战略\r\n执行实务上，如果上级有明确的指导意见，自己应该考虑在这一部分已确定的前提下，如何通过安排其他部分来完成战略规划；再次，在自己的意见与上级的意见相\r\n左时，首先考虑自己如何调整。除此之外，任何答案都是错误的。<strong></strong><br />\r\n<br />\r\n“对公司负责”，错！董事会才对整个企业负责，如果他们决定走一条错误的道路毁掉整个企业，那也是他们自己的损失。但在此之前中层技术管理人员只要一天不离职，就应该坚决地带领自己的技术团队在这条路上稳稳地走下去，当然如果发现情况不对，应该向直接业务上级汇报。<br />\r\n<br />\r\n有人会说，这种说法充满奴性啊，现在不是都讲团队自治、讲技术创新吗？你这样的观点和意识太陈旧。<br />\r\n<br />\r\n其实并非如此。团队自治是很好的，但治什么呢？这需要存在强烈的共同目标才能执行到位。要形成这样的团队，就不能没有充分理解企业的战略目标，并知道要达到\r\n这样的目标应该在一段时间内做什么，在下一段时间内又要做什么的人。中层技术管理人员接受的技术任务，绝不是那种凭一段时间的热情就能够完成的。这样的技\r\n术任务往往是“10个月内完成公司网站的建设”，“半年内上线产品的Android \r\n4.2适配版本”，涉及到数十万行代码、超过100人月、跨越整个产品生命周期的事。而靠团队自身是难以产生统一行动的驱动力，来把技术任务逐一分解并一\r\n一落实的，更不要说涉及到跨功能部门沟通了，所以自治模式严重受限于团队和任务的规模。<br />\r\n<br />\r\n说到技术创新，我反而要说：服从约束更加有利于技\r\n术创新。中层技术管理人员是被赋予了相当程度的创新自由的，但这些创新要用对地方。如果上级说，预算只有20万元，但某人却一定要50万元才能完成任务执\r\n行，因为要采购专业软件并招聘相关操作人员在他来看是必要条件。但是，另一个人却认为采用一些开源替代方案，并聘请一些有经验的人士在有限时间内对现有人\r\n员进行技术培训和指导，就可以在预算内完成执行的话，你认为哪个人更有创新思维呢？必须要承认，所有的中层技术管理人员都在戴着镣铐跳舞，而且新任者必然\r\n戴着更重的镣铐。但如果你想减轻这镣铐，就先运用创新思维证明你可以跳出更好看的舞吧，然后你再说如果自己戴着轻一点的镣铐可以跳出更多花样的时候，就会\r\n有人信了。<br />\r\n<br />\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201310/15/525cb09579611.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201310/15/525cb09579611.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<strong>技术团队的建设和培养</strong>\r\n</p>\r\n<p>\r\n	技\r\n术战略的执行靠的自然是技术人才。技术团队的建设和培养是要靠中层技术管理人员来完成的，任何成功的中层技术管理人员必然有自己的技术班子。但如何扯起这\r\n么一个班子，是很见水平的。前面说过，中层技术管理需要负责战略执行，而要执行战略不比做一两个具体交付任务，其复杂和未知程度要远远高出许多。\r\n</p>\r\n<p>\r\n	在\r\n未来时态下建设和培养技术团队。这是中层技术管理人员对于自己负责业务的理解深度决定的。例如，如果负责一个手游产品，而游戏的题材并非局限于只能在手机\r\n上玩，要从一开始组织团队时就考虑游戏转型的可能，有意识地积累一些在PC游戏端和页游方面有一定经验的人手，并在游戏策划和技术实现时尽可能不要把一切\r\n都绑定在手机平\r\n台这个假设上。这样，一旦产品真的要转到别的平台上去，技术团队就不会感觉非做伤筋动骨的调整才能服务于全新的战略了。在工作一成不变时，加强相关领域的\r\n学习，往往会在战略突然发生剧烈调整时收到极高的回报。合格的中层技术管理人员，永远会在思考这样的问题：我未来可能会要执行什么技术战略，我现在的团队\r\n能够应对吗？如果不能，我还差哪些方面？差的这些方面，是必须引入新人，还是要现有人员学习和培训？这样，在团队建设的每一时刻，都是有逻辑的，至少不会\r\n失控。而在引入团队新成员时，也自然而然地会把人的潜力、人的学习意愿纳入考量，而不仅是现在拥有的技术和经验作为唯一的考察因素。\r\n</p>\r\n<p>\r\n	要为技\r\n术团队大胆引入多种人才。很多技术团队面临的大问题，不是成员太不会干活了，而是太会干活了——他们是如此地会干活，以至于连要干什么都搞不清了。技术团\r\n队里面，一定要有润滑剂这样的角色，他们的任务不是直接产出工作量，而是让所有人都能够明白自己每天工作的意义所在，以及各项工作应该分配的比重，甚至工\r\n作之外还有什么可以适当调节一下身心的乐趣。这样的工作并不一定非要专职的人来做，但在引入新人时，不妨可以从性格和业余爱好等诸多方面综合考虑一下，尽\r\n可能地让技术团队里配置多种多样的人，而不是所有人都一副面孔。这样做的目的，是为了提高技术团队的韧性，在受到压力时，不至于由于某个方面的刚性因子过\r\n大而让整个团队一起垮碎。\r\n</p>\r\n<p>\r\n	要敢于与其他技术团队互通有无，不要让团队跟自己的姓。有不少中层技术管理人员舍不得自己培养出来的团队，尤其是\r\n核心人员，走到哪里都带着。抛开离职时带走人员的职业道德问题不谈，这样做有很多弊端。首先，这样的做法剥夺了别人拥有独立发展空间的权利，为什么别人要\r\n永远在你手下做你的二把手？我就对此有深刻的体会，我从某公司离职去了下一家，然后过了半年以后又和我原先的一个下属吃饭。在谈到我们过去一起做的业务\r\n时，我发现他的进步简直大得让我吃惊：这个原先几乎事事要问我意见的人，在我离开放手让他独立经营的半年之间，已经有了极好的独立性，不仅能战斗而且能指\r\n挥了。从此以后，我就下定决心，自己培养出来的技术团队，就在原地服务，一个人都不带走。其次，有些人只要由于业务调整要把自己培养的人调走，或是要把自\r\n己不熟悉的人调入，就各种不开心，觉得不公平。中层技术管理人员应该超越这种小家子气，要反过来看这个问题：自己培养的人去了别的地方，等于是要播撒自己\r\n的管理理念。而别的团队，甚至是在内部竞争中位于对抗地位的团队如果派人到自己团队里面来，这也正是一个学习的机会。\r\n</p>\r\n<p>\r\n	有一次，在我带的手机\r\n测试部门里，就被安排接收了几个做手机客服的同事。结果，我发起了几次内部培训，让他们给我们讲手机客户都投诉什么，用我们团队成员的话说，“这比在实验\r\n室里关门做一年实验都要生动、具体”。反过来，我们给他们讲手机各个部件的测试原理和方法，他们和过去的同事交流时，也发现把这些内容融入客户支持材料比\r\n背几套问答模板要有用多了。结果，过了四个月他们收到要调回原部门的意向时，竟然都表示不愿意走了。于是，我趁机组织了一个“手机测试和客服部门沟通例\r\n会”，自此我们团队的测试效率明显提高，而客服团队收到投诉率明显降低。一年不到的时间里，我们两个团队都成了公司的明星团队。\r\n</p>\r\n<p>\r\n	<strong>中层技术管理人员的自我修养</strong>\r\n</p>\r\n<p>\r\n	中层管理阶段是每个技术管理人员都要好好把握的。原因有三。\r\n</p>\r\n<p>\r\n	首\r\n先，中层管理是个极其关键的跳板，从管理科学的角度来看，直接管理的人数一般不宜超过7人，就算管理能力超强算10人，中层管理所带领的团队一般都大大超\r\n过这个数字。所以，从管理分类的角度来看，中层管理是接触和学习间接管理的重要阶段。而掌握了间接管理的要素，实质上从管理的日常实务来看就没有什么新鲜\r\n的东西了——管20个人要这样管，管两万个人还是要这样管：实际上就是要管理你直接指挥的那7到10个人，然后把管理任务递归地落实下去。\r\n</p>\r\n<p>\r\n	其次，无论愿不愿意承认，中层管理对绝大多数管理人员来说都是职业生涯的最后一站，是要做到退休的。升到高层管理职位，不仅要靠实力和成绩，还取决于太多偶然因素构成的综合机遇。所以从这个阶段开始，要准备长期的磨练甚至反复。\r\n</p>\r\n<p>\r\n	再次，中层管理的职业生涯的时间阶段往往和人生进入成熟期的经历是重合的，对于技术管理人员来说，是自己的技术积累逐渐转化为个人解决问题思路的深化、对于复杂局面的判断以及管理风格的形成这些无价特性的关键时期。\r\n</p>\r\n<p>\r\n	那么，中层技术管理人员应该着意锻炼自己的哪些素质，为新的机遇和挑战做好准备呢？\r\n</p>\r\n<p>\r\n	首\r\n先，中层技术管理人员应该摆脱幻想，习惯于把工作的基础建立在收集信息和反复分析之上。促成了这个要求的，还是工作的长期性和复杂性。例如，某个产品的返\r\n回状态信息里面有一个拼写错误，是不是直接在代码里改一下然后重新部署一下就可以了呢？基层开发经理可以这么想、这么做，但如果是中层部门经理就不能这么\r\n轻率。如果仔细收集信息就会发现，这个返回状态有大量的关联测试代码，只要修改了就会引发大量的测试脚本阻塞，连带着停止部署流水线，修复所有问题的时间\r\n会造成错过运营上线的排期。所有的这些信息，都是一点一点从各个不同的基层经理甚至一线程序员那里报告回来的，最终才能做出正确的判断：这个问题应该修\r\n复，但要考虑到回归测试用例的修改时间，以及排期提前量，而客户并未就此拼写问题提出任何抱怨，所以优先级应该排到较低的级别。\r\n</p>\r\n<p>\r\n	这样的问\r\n题，可以说在中层管理人员这里还算是最简单的一类，属于有明确答案的技术问题。那么，要判定一个快量产的机型的某个硬件组件是否应该更换型号或供应商，一\r\n个已经有上万名用户的函数库是否应该合并某个提高特定场景性能但会引发重新编译的实现，这些问题其实没有正确答案，只有反复权衡。更有甚者，某个技术人员\r\n是应该由于某次贡献加薪，还是一次性奖励？某个面试者解题的路子很野，但答案居然是对的，要不要发offer？这些就更加棘手，需要收集的信息更多、渠道\r\n也更需要广些。中层技术管理人员处理信息的一般原则应该是花费尽可能长的时间收集和分析信息，而将输出信息的时刻尽可能延迟。一定要记住技术规律是没有什\r\n么侥幸空间存在的，人心更是复杂多变。知之为知之，不知为不知。只要是不知道的信息，就是凭空想象出来的。以一个人的力量想知道所有的细节是非常困难的，\r\n需要持续投入时间和精力。但具体到每一个技术决定，需要掌握的信息则是有限的，尽管不能知道所有需要的信息也是在所难免。此时，就要尽可能地降低凭空想象\r\n来做决定的成分。所以，晚一秒钟做出决定，就多一秒钟来收集和分析信息，就少一分凭空想象造成错误决定的风险。\r\n</p>\r\n<p>\r\n	其次，每个中层技术管理人员都要锻炼自己的技术表达能力，要能够把涉及多于10个技术要素、相关人等、人与事的关系、人与人的关系和事物发展的逻辑等来龙去脉讲得一清二楚、井井有\r\n条。并且，要讲得通俗易懂，要让只有5分钟耐心的、和要讲述的内容毫无关系之人都能听懂，最好能被打动。这一点，是非常关键的。我参与过多次年度汇报，大\r\n量的中层管理人员做的汇报都有较大的改进空间。讲了半天，除了他和自己团队感动了，别人都还是一脸茫然。其实，别人能看到你做的工作，就是你能讲明白的那\r\n部分工作。说到底，这不是临时抱得了的佛脚。没有执行到位的工作，任何人都编不出可信的故事，而且几个简单的问题就马上要露马脚了。可是，如果自己的辛勤\r\n工作要为蹩脚的表达买单，对于大多数中层管理人员而言，也就意味着上升通道就此关闭了。\r\n</p>\r\n<p>\r\n	用服务的心态为自己定位，用培养的手段为企业纳才，\r\n不放弃任何管理创新的机会，锻炼快听、多想、慢说、表达到位的职业素养，这是中层技术管理人员不断成熟的诀窍。要做到这些，离不开中层技术管理对于技术的敬畏，和不断的技术学习。在本刊9月期《技术团队新官上任之基层篇》\r\n一文中，我曾说过，技术行业是一种终身职业，一旦入行，就要学习终身。这一点同样也适用于中层技术管理人员。停止学习，就意味着职业生涯的死亡，这决非危\r\n言耸听。下一期，我们将和自己创办企业，以及受到机会女神眷顾，成功晋升到技术高层管理职位的同学们分享更多更精彩的内容，欢迎阅读和反馈。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '1', 'http://www.csdn.net/article/2013-10-15/2817181', '1', '2015-01-09 09:59:05');
INSERT INTO `yov_source` VALUES ('10036', '技术团队新官上任之基层篇', '技术团队 上任 基层篇', '<strong></strong>&nbsp;&nbsp;&nbsp;&nbsp;从技术一线升职为基层技术管理人员，直至CTO或分管技术的总经理、副总裁，这可能是很多技术人员的梦想职业发展路线图。本文希望能够和刚刚走上技术管理岗位的同学们分享一些经验，使职业生涯的发展更加顺利和合理。<br />', '<p>\r\n	技术团队的管理人员身负技术和管理的双重使命，有着与众不同的成长路线。绝大多数情况下，在成长路线的第一步，是“技而优则管”，亦即由于表现出了出众的技术交付能力，优秀的技术人员被提拔到了基层管理岗位以承担更加重要和关键的交付任务。\r\n</p>\r\n<p>\r\n	众\r\n所周知，这并不是技术人员的唯一职业成长路线，大多数人都会在所谓的个人贡献路线上持续发展，走到管理岗位的转折点是少数人的路线。这条路并不好走：一方\r\n面，一旦承担了管理使命，工作内容和期望就会发生性质的转变，需要思考和学习一些全新的东西，这对于新官上任的技术管理人员来说挑战着实不小；另一方面，\r\n原有的技术使命变得更重了，如何能够运用好管理杠杆，不辱使命地完成技术任务，更是缺乏经验的技术管理人员很容易陷入两难的谜题。\r\n</p>\r\n<p>\r\n	<span style=\"color:#e36c09;\"><strong>技术管理路线从哪里开始</strong></span>\r\n</p>\r\n<p>\r\n	这\r\n个问题貌似非常可笑。技术管理路线不是从被提拔到技术管理岗位的那一天开始的吗？其实这么想就大错特错了。技术管理从来都是先有了管理之实，才会给予管理\r\n之名的。管理，顾名思义，包括“管”和“理”两个部分，而这两个部分都有着十分具体的工作内容。“管”的核心，在于对人员和资源施加影响和约束，使之向着\r\n既定的目标靠拢。而“理”的奥秘，在于组织协调人员之间的关系，减小摩擦阻力而激发合作动力甚至潜力。一言以蔽之，管理的实质，在于发挥团队的力量来完成\r\n目标。也就是说，只要一个目标并非通过自己个人的力量，而是假借了别人的力量来完成，这就是管理路线的开始了。\r\n</p>\r\n<p>\r\n	这也是管理魔力的所在：一名\r\n优秀的技术管理人员，就仿佛是长了三头六臂，既能够考虑到技术设计的方方面面，又能够把这种设计落实成以健壮漂亮的代码、精美易用的界面为基础的技术产\r\n品。这不是因为他自己的精力变得无限了，也不全是因为他的技术本领变得高强了，而是因为有很多人在他的影响和组织下，向着他制定的统一目标在各显神通。\r\n</p>\r\n<p>\r\n	只\r\n要一名技术人员，他不仅是在一个人完成自己被分配的任务，而是在影响和组织不止他自己的其他人共同完成任务，他的工作角色中就已经包含了管理的成分。也只\r\n有事实上已经在从事管理工作、积累了管理经验并表现出一定管理天赋的技术人员，才有可能最终走上技术管理岗位，成为一名专职的技术管理人员。\r\n</p>\r\n<p>\r\n	这也部分地回答了“如何才能升到技术管理职位”的问题。想成为开发经理吗？那就不能满足于只是完成每天领来的那部分开发任务，而要思考这样的问题。\r\n</p>\r\n<ul>\r\n	<li>\r\n		首先，我开发的这部分代码在整个项目里发挥着什么样的作用？\r\n	</li>\r\n	<li>\r\n		其次，我是不是可以把项目中至少我负责的这部分代码的上下游拉下来看一看是怎么回事？\r\n	</li>\r\n	<li>\r\n		再\r\n次，我理解了一个更大的逻辑以后，是不是能够和更多的开发人员坐下来商量一下怎么可以共同做一些改进，使得大家的日子都好过一点？还有，我是不是可以看一\r\n下测试人员是怎么来测试我写的代码，用例是什么样的？而运维人员又是怎么部署和升级的，遇到生产环境中的问题是怎么解决的？我可以多开发一些工具来改进\r\n交付流水线吗？我需要和几个人一起筹划这件事？\r\n	</li>\r\n</ul>\r\n<p>\r\n	当开始这样思考并着手做事时，你就开始向技术管理职位迈进了。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/05/522805356bb8d.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201309/05/522805356bb8d.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	<span style=\"color:#e36c09;\"><strong>不要做什么</strong></span>\r\n</p>\r\n<p>\r\n	技\r\n术管理当然是内容非常丰富多彩的一个课题，要做什么、该怎么做，可以写出许多书来。但是，也许像任何踏进任何一个内容丰富的领域一样，先弄清不要做什么也\r\n许反而是很关键的。毕竟职业发展并非一日之功，刚刚入行时犯一点小错也是在所难免，但如果有方向性的问题没有弄清楚，就比较糟糕了。\r\n</p>\r\n<p>\r\n	不要去模仿乔布斯。我是说，也不要去模仿任何当下出名时髦的IT商界领袖。这里面有几层意思。\r\n</p>\r\n<ul>\r\n	<li>\r\n		第一，基层技术管理人员往往除了管理职能以外，还有相当具体和繁重的一线技术的个人贡献期望。此时，如何把手头的短期工作用技术手段加以实现还是主要矛盾\r\n所在，管理在这个阶段往往还是以提升技术效率为目的的辅助手段。在这个阶段，主要以全局战略和大胆创新为主要特点，高层技术管理思想和方法对于基层技术管理人员的直接参考意义不大。\r\n	</li>\r\n	<li>\r\n		第\r\n二，一个企业的成功往往有多方面的因素，绝不可能仅仅是技术因素促成了全部的结果。另一方面，当企业被光环笼罩时，无论是领导人还是企业的的传记作者都不\r\n免自觉或不自觉地夸大成绩方面而忽略甚至避而不谈其阴暗面。但如果片面夸大技术因素或成功因素，而忽略其可能带来的负面效应，哪怕只是很小的一方面，都\r\n可能会导致适得其反的局面。\r\n	</li>\r\n	<li>\r\n		第三，也是最重要的，每个人都只能以自己的方式成功。应该对于自己耳听目见的信息，以及综合用心的判断抱有信心，只有自己总结出来的经验才能灵活运用，真正能够达到卓越程度的技术管理者无一不是自己摸索出来的管理之路。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<b>不要去做职业经理人</b>。更不要去学厚黑学，基层技术管理人员尤其没有这样做的生存空间。技术行业是一种终身职业，一旦入行，就要终身学习。IT技术行业，就更是如此。\r\n</p>\r\n<p>\r\n	试问，如果一个开发经理自己都不能够在下属遇到技术问题时为其解惑，又如何谈得上去影响和组织技术人员，使其发挥团队力量？又如何能够担负技术难题攻关的责任？技术人员是非常特殊的人群，其最显著的特点是生产力强大，但沟通力低于平均水平。\r\n</p>\r\n<p>\r\n	所\r\n以，普通的职业经理人只运用沟通工具上传下达，是完全不能实现技术管理目标的，因为技术人员的显著特点就是在得不到适当信息输入的前提下，没有足够的意愿\r\n达成沟通。并且，即使沟通已经很充分，也需要相当的技术理解力，才能将沟通的成果加以消化和落实。而这些，也正是技术管理人员独有的用武之处。\r\n</p>\r\n<p>\r\n	<b>不要立刻施政。</b>《谁\r\n说大象不能跳舞》一书中，IBM的新CEO郭士纳在走马上任的第二天就打破陈规，宣布新政。对于临危受命的高层管理人员来说，也许这样做有其必要性。但坦\r\n率地说，其实这可能并非最好的做法。而对于刚刚任命的基层技术管理人员来说，也许最重要的就是按捺住自己自以为是——也许出发点并不坏\r\n——的一肚子改革方案，而要耐着性子和团队一道做一段时间最无趣、最底层的“脏活累活”，真正了解到团队难在何处，以及需要怎样的帮助才能摆脱困境或做得\r\n更好。\r\n</p>\r\n<p>\r\n	这是必须要做的、绝对不能省略的环节，无论这新上任的技术管理人员是原先从这个团队提拔上来，还是空降而来的。根本原因在于，专职技\r\n术管理人员是一定需要时间对于团队和技术产品做出深一步了解，而不可能瞬间无师自通的。即使对于若干技术细节已经有了专家水平的了解，但必然对于其他的部\r\n分，还是需要相当的时间才能熟悉，进而才能与原有的知识融会贯通。\r\n</p>\r\n<p>\r\n	非技术管理人员瞎指挥，虽然可恶，但总算情有可原。但如果技术管理人员不懂装懂，给技术团队带来伤害，这真是罪无可恕！千万不要搞什么新官上任三把火，这除了烧掉自己的锦绣前程之外，别无它益。\r\n</p>\r\n<p>\r\n	<span style=\"color:#e36c09;\"><strong>打开思路，好好学习</strong></span>\r\n</p>\r\n<p>\r\n	成为一名基层技术管理人员以后，要着手做三件事：第一，要继续学习技术相关的业务知识；第二，要打开技术工作的思路；第三，要规划自己未来的专业发展路线。\r\n</p>\r\n<p>\r\n	很多优秀的技术人员，升任到管理岗位以后，便放慢了技术本身的深造和相关业务的学习。几年下来，人就基本上废了。而学习如逆水行舟，不进则退。此时再要求进\r\n步，就难上加难了。但是，管理不是要别人做事吗？为何自己还要继续精进？没错，管理的实质在于借助他人的力量，将每个人的生产力加上团队合作的放大系数，\r\n达成生产力大大提升的结果。但管理从来都不是发号施令这么简单，技术管理就更是如此。\r\n</p>\r\n<p>\r\n	技术人员可不是傻子，行家一出手，就知道有没有。任务\r\n下达、分工安排，甚至是一个小小流程的细节，技术人员心里都有一杆秤，在度量着自己的管理人员到底靠不靠谱。如果一个开发经理要求自己的员工“写出没有\r\nBug的代码”，此言一出，在专业技术人员的心中他就威信全失了。相反，如果一个敏捷教练能够准确地指出“在这个Sprint里面，我们把内嵌的SQL语\r\n句替换成了对应的API调用，这对于我们客户的安全性是一个很大的提升，防止了注入的风险并使得实现具有了弹性”，技术人员又怎能不对他肃然起敬？向管理\r\n要效益，这是人人会说的话，但技术管理要取得效益，就体现在每一次的代码签入、质量评审、交付上线、运维配置上。\r\n</p>\r\n<p>\r\n	这一个个的活动，以及真正\r\n动手与它们打交道的人，正是需要基层技术管理人员用心去经营的对象。而这无不要求更高效、更全面的学习。更有甚者，基层技术管理人员往往是技术部门和其他\r\n部门，甚至企业外部的技术接口，而技术语言在更广阔的世界中是需要翻译的。基层技术管理人员往往面对这个新职能，会不知所措，而唯一的办法，只能是从小学\r\n生做起，听听业务人员怎么描述他们的专业工作，甚至他们眼中的技术产品。能否立足技术、精通业务这一点，往往就是基层技术管理人员拉开差距的关键所在。\r\n</p>\r\n<p>\r\n	一线的技术工作，往往从方法到结果都有较大的限定性。而基层技术管理人员，第一次有了具体技术方案的调整权力，以及资源方面的一定自由。权力和资源，这是每一个管理人员都必须去想办法争取的核心利益所在。\r\n</p>\r\n<p>\r\n	管理人员如果没有一定的野心，这对于企业来说其实是非常不利的。可以说，正是管理人员想要争取权力和资源的动力，使得他们绞尽脑汁地优化自己的管理思想和方法，从而给企业带来了活力。但也正是他们争取权力和资源的动机和手段的差距，使得他们归属到了不同的梯队里。\r\n</p>\r\n<p>\r\n	基层技术管理人员，玩权术是绝对玩不过别人的，但也不能以此为借口，就因循守旧固步自封。须知，如果不是资深技术人员从事了技术管理岗位，那些岗位就必然是由技术不过关的人员占据，这对于团队和企业都不是好消息。\r\n</p>\r\n<p>\r\n	其实，权力和资源只要是出于正当的动机和合理的用途，就是为所有人造福的必要基础。那么基层技术管理人员如何争取到更多的权力和资源？办法很多。\r\n</p>\r\n<ul>\r\n	<li>\r\n		首先，要对自己和团队做了哪些工作，做好详尽的记录和归档。这样，不仅对于技术工作的连续性是一个很好的保证，也是在整理和表述团队的技术成绩和做出成员业绩评审时的最有力材料，更可以在未来申请更多资源，承担更大责任时做到胸中有底、心中有数。\r\n	</li>\r\n	<li>\r\n		其次，权力和资源在运用时要节约，申请时要留有余量。有形的招聘、采购时，节约经费这个好理解。但在汇报工作时，注意汇报材料的合理性，不浮夸更不造假，从\r\n而积累无形的信任；在为手下员工安排工作时，能够考虑到合理安排进度，造成有一定的压力但不至于形成焦虑的程度，并在遇到实际困难时予以解决，等等，从而积累无形的安全感和凝聚力，这些能力就需要时间来培养了。\r\n	</li>\r\n</ul>\r\n<p>\r\n	从根本上说，一切皆是经营的结果，多站在老板和员工的角度来思考他们的难处，利用自己手里的权力和资源，尤其是团队的技术优势来为他们排忧解难，这是基层技术管理人员成长的阶梯和秘诀。\r\n</p>\r\n<p>\r\n	当然，并非每个人都适合做管理人员，基层技术管理人员如果发现自己从事管理工作时困难太多，其实也是并不一定非要在这条道上走到黑不可的。如果实在觉得自己不适合管理，那么勇敢地放弃并回到个人贡献的路线上来，也不失为一种不错的选择，而且前途是一样光明的。\r\n</p>\r\n<p>\r\n	但如果权衡的结果是迎接挑战，继续在技术管理的道路上前进，那当然就意味着有更多的东西要学习、有更大的困难要克服，当然也有更好的回报在等待。下一期，我们将和晋升到中层技术管理的同学们分享更多更精彩的内容，欢迎阅读和反馈。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2013-08-27/2816724', '1', '2015-01-09 10:00:26');
INSERT INTO `yov_source` VALUES ('10037', '技术人，不要总在很初级的层面上谈管理 ', '技术人 初级的层面 谈管理 ', '&nbsp;&nbsp;&nbsp;&nbsp;无意间瞄到《[畅言]管理是权力的游戏吗？》，引起了我一些“新仇旧恨”，就也来吐槽一把。但吐槽的点倒不是权力不权力的，这是一点意思也没有的问题，在大多数人这个层次上（包括大多管理者）谈权力，形象来讲就和一般人老想象皇帝每天吃猪肉炖粉条一样，差太远，扯下去也没意思。 <br />', '<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">我想说的是技术人对管理的认知。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<strong><span style=\"font-size:12px;\">遇到问题谈问题 层次性很差</span></strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">最常见的谈管理场景是一个人从技术转到管理岗位，接下来实践了几个项目，有成功的也有失败的，总结了经验后，就开始分享管理的成功经验。我偶尔翻到很多关于管理的文字都给我这么一种感觉。这不是没价值，而是太狭隘，其普适性非常有问题。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">考虑管理这种看似没门槛的事情，更适合这样：先是把具体场景抽象出来，做一种系统的思考，这是</span><strong><span style=\"font-size:12px;\">特殊到一般的过程</span></strong><span style=\"font-size:12px;\">；接下来是大量在一般的层次上阅读参照思考，再回到具体场景，这是从</span><strong><span style=\"font-size:12px;\">一般到特殊的过程</span></strong><span style=\"font-size:12px;\">。这样就可以形成自己对于管理的模型，还不偏理论，能根据现实来伸缩，算是找到自己的“道”了。这玩意没有通解，因为个人的特征也是变量之一。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">但实际上很多人更容易单纯的遇到问题谈问题，这层次很差，并容易原地打转，说个几百年下来回头一看之前别人不也是这么说的么，不是螺旋上升而是原地画圈。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<strong><span style=\"font-size:12px;\">管理的真谛</span></strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">这篇文章如果就说上面这些，那就是哗众取宠，所以再往深了挖掘下。我曾在程序员杂志上发过一篇《管理的基本命题与一般性原则》的文章专门探讨过这事，这里借用其中几个观点来说什么叫特殊到一般，什么又叫一般到特殊：</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">如果如霍布斯般把组织比喻为一个由众人合成的巨人，那么显然这个巨人首先要明确的是“我何以需要存在？”，在此基础上有三类工作需要同时完成：第一是使众\r\n人聚合而成的力量最大，以便于更好的完成自己使命；第二是选择行进的方向；第三是处理与外部组织的关系，通常表现为协作、对抗等。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">以此进行递归，组织的大小将被放缩但其使命不变。由此可以得出管理工作的四个基本命题：</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<br />\r\n</p>\r\n<ul style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<li>\r\n		<span style=\"background-color:initial;font-size:12px;\">明确组织的使命？</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;font-size:12px;\">如何使组织持续存在，并且使组织中的成员可贡献的力量最大化？</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;font-size:12px;\">如何在合适的方向上善用组织各色人等凝聚而成的力量？</span> \r\n	</li>\r\n	<li>\r\n		<span style=\"background-color:initial;font-size:12px;\">如何从外部环境中获取可以进一步强化自身的力量？</span> \r\n	</li>\r\n</ul>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<br />\r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">第一点相当于定义组织的存在意义，这种意义依赖于众人的选择，而并没有确定答案。比如：慈善组织与恐怖组织虽然都是组织形式，但是其存在意义大相径庭。考虑一般原则时应该忽略组织在存在价值上的差异，这和物理学即可以用来造福社会也可以用来毁灭社会相同。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">其余三点上都要考虑短期与长期的平衡，而平衡点所在将与组织所处的具体时空背景有关。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">这样一来在管理的四个基本命题中将会牵涉到的概念有：使命、个人、组织、方向、外部环境。一般原则应该支撑组织达成基本命题中的目标，并且使相关概念之间\r\n没有根本性矛盾。根据相关性，可以分别在“个人与组织”，“组织与方向”，“组织与外部环境”三个大类别下探讨一般性原则。使命虽然浸透于所有环节之中，\r\n但却是原则的根基，而非是原则所要约束的对象，所以需要单独进行考察。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<strong><span style=\"font-size:12px;\">组织的使命</span></strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">组织只因使命而存在。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">个人与组织间的关系可以用异化程度来进行考察：一个极值是只有组织没有个人，在此情形下个人必须为组织牺牲一切；另一个极值是只有个人，组织只是个人连接\r\n在一起的一种自然形式。军队更类似于前者，而开源组织更类似于后者，大多公司则身处在中间某个位置，这时候个人需要让渡出一部分自己的自由以形成秩序，这\r\n种秩序可以降低内部耗散并更有助于达成整体的目标。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">从上述分析可以看出，组织的存在必然剥夺个人的一部分权利，而使命正是这一部分被剥夺权利之所以存在的唯一理由。如果加上道德的维度，那么使命应该回馈人类自身，不应该存在与人幸福无助的使命。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">使命定义了组织的边界，明确了组织间彼此的界限。</span><strong><span style=\"color:#548DD4;font-size:12px;\">理想状态下，个人只应该加入使命与自身价值吻合的组织，现实中这点却往往由于选择权被生存压力压缩或者由于利益导向而破坏。但这种人与组织在根本上的不契合最终会在管理中制造表象各异的种种难题。</span></strong><span style=\"font-size:12px;\">对此将在后面的章节中进一步分析。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">正因为使命的这种根基性作用，所以第一条原则必然是：</span><strong><span style=\"color:#548DD4;font-size:12px;\">人的特质、组织的章程、前进的方向、合作的内容需与使命相适应。</span></strong><span style=\"font-size:12px;\">这是消弭管理中根本矛盾的根本方法，否则只要人与组织相背离，就会持续产生现象不同的各种难题。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">在公司这类组织中，使命的影响可能只体现在少数人身上，因为公司也是一种利益分配的单位，也是个人获得基本生存能力的场所。但在非盈利组织中，使命则与每个人有关，脱去利益牵涉之后，人与使命的关联就变的更加清晰。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<strong><span style=\"font-size:12px;\">个人与组织</span></strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">下面以整体是部分之和为前提建立一个公式来描述组织力量与个人的关系，这个公式出自《完美软件开发：方法与逻辑》一书：</span> \r\n</p>\r\n<blockquote style=\"font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;color:#777777;margin-left:3em!important;\">\r\n	<span style=\"font-size:12px;\">假设一个人的工程素养为E，一个人的工作意愿为W，组织所能提供的基础力量为O，内耗系数为M，那么对于一个拥有n个人的组织，从纯量的视角看，其在单位时间内最终可能贡献值可以表示为：</span><br />\r\n<span style=\"font-size:12px;\"> [(E1*W1 &nbsp;+ O) + (E2*W2 + O) + ... ... + (EnWn &nbsp;+O)] * M</span> \r\n</blockquote>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">这样一来为达成第一命题中可贡献力量最大化这一目标时，显然要工作意愿，内耗系数和组织力量同时取得极值。其中组织力量更多的是一种技术手段，暂时略过不提。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">为使工作意愿取得极值其根本前提有两个：一个是这个人要愿意工作，一个是工作与完成自身的使命相适应。也就是说当人的工作只是为了完成自己而不是为了其他\r\n什么目标的时候，工作意愿可以取得极值。这时组织体现为个人自我实现的平台，个人只为使命所驱动，而使命使个人利益与组织利益重叠。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">现实之中，在公司这类组织中这很难完整实现，但越有物质基础的公司越应该有意识的向此进行回归，这是激励的终极方案。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">由此可以得出管理的第一条一般原则：</span><strong><span style=\"font-size:12px;\">在可能的范围内尽可能使激励机制转向使命驱动</span></strong><span style=\"font-size:12px;\">。而多大程度上可以以使命驱动工作，\r\n其主要限制条件是人的状态，如果把人进行抽象并分为两个类别：一类是争取基本的生存权；一类实现自我。在前一种条件下，个人的选择权较小，往往会被主动的\r\n忽视，因此无视个性，强化规则的方法是可行的。在后一种条件下则要努力促成个人理想与工作现实的重叠。这也意味着在某个阶段之后工作意愿本身事实上不可能\r\n通过外部手段解决，外部手段（如包括收入在内的各种激励手段）只能缓解并调和工作意愿问题，真正要解决这一问题始终要回归到人和工作自身。从物质基础的角\r\n度看，当普遍收入在某条基线之上的时候这种事情会发生，据统计在2005年，美国人在年收入超过4万美元后，收入不成为最关键因素。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">可能范围受到限制时，显然只有两种可能的解决方法：一是组织自身进行自我净化，把不适合的人员排斥出去。一是按照人员状况重定义组织的使命。但后者实质上意味着原来的组织已经消亡。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">这似乎很简单，但在现实中违背这一简单的原则的例子缺很多，最典型的情形就是高科技公司中对狼性的提倡。假设说人总是要进化到实现自我，那这类做法其实是\r\n加大组织与个人间的不匹配度，与上述原则背道而驰。人的独立思考越多，选择权越大，专业技能越高，这类方法的存在价值越小。</span><strong><span style=\"color:#548DD4;font-size:12px;\">因为到一定程度之后，人是可领导而不可管理的。人、事、组织间的和谐，是可见范围内的终极目标。</span></strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">我无意说上面一定是对的，但这是对管理这一工作的一种抽象，这就是特殊到一般的过程，即使它是错的这种抽象的思考也有助于提高我们对管理的认知，总之它是有用的。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<strong><span style=\"font-size:12px;\">不要再做管理 而要做领导</span><br />\r\n</strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">比如杰克韦尔奇说：怎么还在做管理，赶紧去做领导。没有这类抽象，你要么认为他很二，要不然就只能干瞪眼，只在字面上理解这句话。但实际上他非常犀利的指\r\n出了时代变迁对于管理的影响，在专业主义兴起后组织在变小而其中层级在减少。想象下一个创业团队，就四五个人，有人搞产品，有人搞架构，有人搞运维等，每\r\n个人都在自己的领域中极为专业，那管理者（比如CEO）的职责就变成了明确目标，激励，协调。而不是像传统上做项目那样做WBS去分解，去控制每个人的工\r\n作，因为你不懂，后面这类工作做的越多死的越快。这就叫不要再做管理要做领导，这是相对与工业经济时代的管理来说的。如果你做了上面的特殊到一般工作，你\r\n就很容易理解这事。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">再比如：开头提到的要不要做管理的话题，如果真理解了管理，你就会发现管理这个词其实是动态的，直观讲就是在Google和外包企业管理的内涵可能有绝大差异。这背后隐含的是职业路径的长短。</span><strong><span style=\"color:#548DD4;font-size:12px;\">在只有组织没有个人的环境里，不做管理可能就没有出头之日；在推崇专业主义的领域，足够牛的程序员一样可以买很多保时捷。当然这也受制于当事人的性格，从这个角度看确实不是每个人都适合做管理</span></strong><span style=\"font-size:12px;\">（这展开会很长，感兴趣的看这篇文章）。</span> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<strong><span style=\"font-size:12px;\">结束语</span></strong> \r\n</p>\r\n<p style=\"color:#333333;font-family:Helvetica,Tahoma,Arial,sans-serif;font-size:14px;\">\r\n	<span style=\"font-size:12px;\">故事说到这里也还是只说了把特殊的东西抽象到一般是怎么一会事，可以有哪些用处。真要讲下去，还得讲，怎么把一般的东西实践到特殊的场景里来，这才是学以\r\n致用，但这就太长，找机会再说吧。这篇文章主要想撬动一点的是对管理的进一步思考，用题目来说就是：不要总是在很初级的层面上谈管理。</span> \r\n</p>\r\n<br />', 'index.html', '', '', '', '', '', '1', '10', 'http://blog.csdn.net/deepbluecn/article/details/34417963', '1', '2015-01-09 10:03:43');
INSERT INTO `yov_source` VALUES ('10038', '程序员生存定律--管理向左，技术向右 ', '程序员 生存定律 管理向左 技术向右 ', '&nbsp;&nbsp;&nbsp;&nbsp;一个程序员在考虑增值时无法回避的一个根本问题是到底是做技术还是做管理。当然也有些职位会介于两者之间比如架构师，但我们暂时不去做细分，而是用简单的二分法。<br />', '<p class=\"p0\">\r\n	一个程序员在考虑增值时无法回避的一个根本问题是到底是做技术还是做管理。当然也有些职位会介于两者之间比如架构师，但我们暂时不去做细分，而是用简单的二分法。\r\n</p>\r\n<p class=\"p0\">\r\n	这种基本方向上的选择对后续很多细节上的取舍有关键影响，所以在考虑其他之前，最好先回答一下这个问题。这就和修炼时要选择少林、武当、华山还是魔教一样，一旦选择，基本上是回不了头。\r\n</p>\r\n<p class=\"p0\">\r\n	当然选择管理不意味着不需要掌握编程技能，毕竟当下大多公司还是信奉“宰相拔于州郡，将军起于行伍”的。但当技术达到一定水平后，管理还是技术这种方向性的选择将对下一步做什么有比较大的影响。在考虑那个方向前，则要先弄清楚管理和技术的关键差异。\r\n</p>\r\n<p class=\"p0\">\r\n	<br />\r\n</p>\r\n<h4>\r\n	<a name=\"t0\"></a>技术与管理的关键差异\r\n</h4>\r\n<p class=\"p0\">\r\n	到了<span style=\"font-family:Times New Roman;\">30</span><span style=\"font-family:宋体;\">几岁后，转为管理人员的程序员经常会调侃自己的技术能力：当年解决这种有时出、有时不出的</span><span style=\"font-family:Times New Roman;\">Bug</span><span style=\"font-family:宋体;\">时，我常常在其前后都加几条调试输出，这招很管用很可能立刻就把它搞定了。结果多年后维护这代码的人困惑了，还来问我，这句为啥不能去掉，看着也没用啊，其实我也不知道，只能说运气和人品在程序里也是很有影响力的。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	这是管理人员的一种真实写照，大家都知道，一旦走上管理岗位，那就和<span style=\"font-family:Times New Roman;\">ppt</span><span style=\"font-family:宋体;\">越走越近，和代码越走越远了。虽然他仍然要跟踪最新技术的动向，但他很可能已经无法深究很多技术细节了。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	据说微软这样的公司推崇一个人要想走上管理岗位，那要先把自己的代码用远少于别人的时间写好，省下来的时间才用来做管理工作。这很好，也不是完全不可能，但大多时候很难，需要很强大的天分，大多数人是做不到的。\r\n</p>\r\n<p class=\"p0\">\r\n	主要原因是管理和技术所要处理的问题有根本上的差异。\r\n</p>\r\n<p class=\"p0\">\r\n	管理者往往需要处理许多与人相关的事情，这导致要处理的事情是碎片化的，如果坚持编码，那么每天的打断往往会大幅降低写代码的效能，大家都知道编码是需要专注的。\r\n</p>\r\n<p class=\"p0\">\r\n	管理工作总是需要面对大量的琐碎工作的，比如：老板对项目不满要赶紧去说明，免得发酵成大问题；人力缺了要赶紧协调，一是要能要到人，关键还得能要到合适的人；工具缺了，要赶紧购买；兄弟们有情绪了，要赶紧安抚；<span style=\"font-family:Times New Roman;\">PPQA</span><span style=\"font-family:宋体;\">了有抱怨了，要赶紧改正。如果工作进一步泛化，还要涉及到预算、评估、职业路径规划等。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	我们很难让这些事情按照自己的节奏发生，如果管理人员做编程，最终这些都会变成一种对编程工作的随机性干扰。所以一般来讲很难把它们很好的与编码结合在一起。想象一下，一个管理人员负责某个项目中影响关键路径的某个模块，接下来上面所列的意外发生了，那这个管理者怎么办？\r\n</p>\r\n<p class=\"p0\">\r\n	唱歌的时候常说到<span style=\"font-family:Times New Roman;\">Key</span><span style=\"font-family:宋体;\">或者调门这个词。同样是《花心》这首歌，周华健的用的</span><span style=\"font-family:Times New Roman;\">Key</span><span style=\"font-family:宋体;\">和原本的冲绳民谣《花》的就不同，这导致两首歌听起来差别就很大，完全不一个感觉。也许可以说管理也是一种技术，但管理和设计编码这种技术的</span><span style=\"font-family:Times New Roman;\">Key</span><span style=\"font-family:宋体;\">不一样。做技术需要面对的是程序，程序是讲道理的，</span><span style=\"font-family:Times New Roman;\">Stack&nbsp;Overflow</span><span style=\"font-family:宋体;\">时它一定会崩溃；而做管理时需要考虑技术因素，但更需要面对的是各种人，人则只在一定程度上讲道理，所以管理不只是一种技术。因此基本上可以认为管理和技术时完全不同的两个方向。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	如果大家细心观察周围，就会发现，做技术（编码）的往往可以转去做管理，但做管理的再转回做技术（编码）就难了。这意味着技术背景对做管理往是很有帮助的，而管理背景对做技术则几乎没用。\r\n</p>\r\n<p class=\"p0\">\r\n	了解到这种差异后，要想做出自己的那份选择，还需要考虑三件事情：一是既定环境下技术路径究竟有多长，也就是说做技术有前途么；一是个人的性格适不适合做管理工作；一是做管理工作可能会有什么负面影响。这三点将在接下来的三个小节中分别进行探讨。\r\n</p>\r\n<p class=\"p0\">\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	<a name=\"t1\"></a>技术路径长短对前途的影响\r\n</h4>\r\n<p class=\"p0\">\r\n	程序员往往自嘲自己是“码农”，不知道这词是那里出来的，但听起来“码农”和“农民工”已经有点近似了。而“农民工”往往是收入低，工作时间长的代名词。这就折射出了一个很尴尬的事实，在很多公司中，单纯从收入的角度来看管理职位是要高于纯粹的技术岗位的。\r\n</p>\r\n<p class=\"p0\">\r\n	这并非是一个绝对规则，前文就曾经提到早在<span style=\"font-family:Times New Roman;\">20</span><span style=\"font-family:宋体;\">年前，微软的超级程序员就可以拥有比管理人员更高的工资，可以拥有多辆保时捷。但在技术路径短的公司里，管理人员收入偏高这事情却具有必然性。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	当一个公司的核心技术并没有创生多大价值，而是需要靠人力规模、商业模式等来支撑业务的时候，那么我们可以称之为技术路径短的公司。想象一下，如果一家公司专门承接本地化工作，那么也许也会需要程序员编制某些工具，但对程序员而言技术路径无疑是短的。\r\n</p>\r\n<p class=\"p0\">\r\n	如果暂时把眼光从程序的世界移开，那么事情就可以看得更清楚。\r\n</p>\r\n<p class=\"p0\">\r\n	在盖楼的时候，只要达到基本的质量，一个人每天砌<span style=\"font-family:Times New Roman;\">200</span><span style=\"font-family:宋体;\">块砖，固然比砌</span><span style=\"font-family:Times New Roman;\">100</span><span style=\"font-family:宋体;\">块要好的多，但相对于大楼而言，多砌</span><span style=\"font-family:Times New Roman;\">100</span><span style=\"font-family:宋体;\">块砖，所多带来的价值有限。再进一步由于砌每块砖的价值是固定的，同时一个人每天所能砌的砖也是有限度的，这就会导致砌砖工人，不管多么努力，其收入水平必然会被限制到某一个较低的水平，只要他的工作还只是砌砖。这种限度是由这一工作的内涵所决定的，倒不是谁遭到了歧视。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	再类比到软件行业里，单纯的在既定接口下实现已定义的业务逻辑就是技术路径比较短的工作，是体力密集型的；而分析业务逻辑，控制整体架构或者去研究<span style=\"font-family:Times New Roman;\">TTS</span><span style=\"font-family:宋体;\">的算法则是智力密集型的，技术路径较长。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	在\r\n选择方向时关键要避免的是选择了技术方向，但身处的现实中技术方向却路径较短，或者喜欢管理但跑到了纯粹技术流的公司里，这种选择其内部所蕴含的矛盾会给\r\n当事人的人生造成极大的困扰。比如说开发小型信息管理系统时，其所需要的技术含量并不高，公司的主营如果是这个，单纯的做技术可能会直接影响收入。这是一\r\n个需要考虑的很现实的事情。\r\n</p>\r\n<p class=\"p0\">\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	<a name=\"t2\"></a>什么样的程序员适合转管理\r\n</h4>\r\n<p class=\"p0\">\r\n	《黑客帝国》的动画片中有一集叫做“<span style=\"font-family:Times New Roman;\">Matriculated</span><span style=\"font-family:宋体;\">”，在这一集里有个机器人被逮住后，人类通过各种场景让他相信自己是个人类，计划看似成功了，但实际却不是。这个动画的启示意义在于，先天带来的很多东西，比如性格等实在很难改变，更多时候选择顺应自己的天性比选择对抗更加明智。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	从先天性格来看，确实有的人天生适合做管理多一点，有的人天生适合做技术多一点。\r\n</p>\r\n<p class=\"p0\">\r\n	比如说：\r\n</p>\r\n<p class=\"p0\">\r\n	有的程序员天生有点被动，不喜欢主动学习很多东西，不喜欢与人沟通，但对工作所直接关联的领域研究较深，做事情兢兢业业，一丝不苟。\r\n</p>\r\n<p class=\"p0\">\r\n	有的程序员非常聪明，理解东西很快，但不愿意搭理别人，总感觉别人水平比较差，脾气也比较暴躁。\r\n</p>\r\n<p class=\"p0\">\r\n	有的程序员精力充沛，对技术狂热，但并不仅局限于技术本身，有大局观，有理想，能坚持。\r\n</p>\r\n<p class=\"p0\">\r\n	单从性格而论前两者都不太适合做管理工作的，一旦做了管理工作，接触各种性格的人，容易造成人际关系紧张，反倒对自己形成一定的压力，极端情形下就会精神失常。\r\n</p>\r\n<p class=\"p0\">\r\n	单纯的因为收入而选择管理工作，并不总是明智的，你可能无法适应，反倒导致事业出现起伏<span style=\"font-family:Times New Roman;\">---</span><span style=\"font-family:宋体;\">不要低估这点的影响，现实中非常多的人因为这种错位而使人生走入低谷，甚至生病。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	在大五模型里用五个因素来考察人格特质：\r\n</p>\r\n<p class=\"p0\">\r\n	<strong>外倾性（<span style=\"font-family:Times New Roman;\">extroversion):</span></strong>\r\n</p>\r\n<p class=\"p0\">\r\n	外倾者者倾向于喜欢群居，善于社交和自我决断。内倾者则比较内向，胆小害羞，安静少语。\r\n</p>\r\n<p class=\"p0\">\r\n	<strong>随和性（<span style=\"font-family:Times New Roman;\">agreeableness</span><span style=\"font-family:宋体;\">）</span><span style=\"font-family:Times New Roman;\">:</span></strong>\r\n</p>\r\n<p class=\"p0\">\r\n	高随和性的人是合作的，热情的和信赖他人的，低随和性的人是冷淡的，敌对的和不受欢迎的。\r\n</p>\r\n<p class=\"p0\">\r\n	<strong>责任心<span style=\"font-family:Times New Roman;\">(conscientiousness):</span></strong>\r\n</p>\r\n<p class=\"p0\">\r\n	高责任心的人是负责的，有条不紊的，值得信赖的，持之以恒的。低责任心的人则容易精力分散，缺乏规划性，且不可信赖。\r\n</p>\r\n<p class=\"p0\">\r\n	<strong>情绪稳定性<span style=\"font-family:Times New Roman;\">(emotional&nbsp;stability):</span></strong>\r\n</p>\r\n<p class=\"p0\">\r\n	积极的情绪稳定性者倾向于平和，自信；而消极情绪稳定性者（神经质的人）倾向于紧张，焦虑，失望和缺乏安全感。\r\n</p>\r\n<p class=\"p0\">\r\n	<strong>经验开放性<span style=\"font-family:Times New Roman;\">(Openness&nbsp;to&nbsp;experience):</span></strong>\r\n</p>\r\n<p class=\"p0\">\r\n	开放性高的人富有创造性，凡事好奇，具有艺术的敏感性；开放性低的人则保守对熟悉的事物感到舒适和满足。\r\n</p>\r\n<p class=\"p0\">\r\n	&nbsp;\r\n</p>\r\n<p class=\"p0\">\r\n	总的来看，外倾性和经验开放性好的人更适合走上管理岗位。\r\n</p>\r\n<p class=\"p0\">\r\n	千万不要忽视这种错位的力量。金山的求伯君先生就直承自己不擅长做管理。他认为人的一生之中最关键的是对自己能够有所了解，不是说自己什么都能干，是万能的。在雷军走后的<span style=\"font-family:Times New Roman;\">4</span><span style=\"font-family:宋体;\">年里，做</span><span style=\"font-family:Times New Roman;\">CEO</span><span style=\"font-family:宋体;\">有些力不从心，快</span><span style=\"font-family:Times New Roman;\">50</span><span style=\"font-family:宋体;\">岁的他精神压力太大，多次想退休，请雷军出山。最终求伯君先生在不到</span><span style=\"font-family:Times New Roman;\">50</span><span style=\"font-family:宋体;\">岁的时候退出江湖，不知道是不是和这个有关。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	当\r\n然很多人可能远走不到求伯君先生的高度，但终究类似，可以打个比方形容错位的中层管理者。上司和下属员工像两块板子，管理这门功夫没练好的话，中层管理者\r\n就被搓球了：上司说，你做的这叫什么事儿，脑子大大的坏了。下属说：你瞎答应什么，这事儿怎么做，我不干，要干你自己干，爱咋咋地。\r\n</p>\r\n<p class=\"p0\">\r\n	管理这功夫练好了，情形就变了：上司尊重你的意见，下属把你视为旗帜。一处天堂，一处地狱，核心差别其实不大，根本还在天生的人格特质。待管理人群的特质也很有影响，但这是运气所管理的范畴。\r\n</p>\r\n<p style=\"text-align:center;\" class=\"p0\">\r\n	<strong>是不是适合做管理者的简明判断方法</strong>\r\n</p>\r\n<p class=\"p0\">\r\n	假设说团队里两个兄弟吵起来来了，你愿不愿意去调解？\r\n</p>\r\n<p class=\"p0\">\r\n	假如有一个人脾气很坏你愿不愿意和他沟通，即使你不喜欢？\r\n</p>\r\n<p class=\"p0\">\r\n	假如有一个人问题很多，你愿不愿意面对面批评他？\r\n</p>\r\n<p class=\"p0\">\r\n	假如有一个人屡教不改，你愿不愿意采取直接的惩罚措施，那怕关系紧张？\r\n</p>\r\n<p class=\"p0\">\r\n	这个列表还可以增长。一旦做管理工作，这类需要抛开个人视角，而从组织的视角去看待问题并行动的地方很多。\r\n</p>\r\n<p class=\"p0\">\r\n	如果对这类问题的回答是否定的，那么最好是不要往管理的方向上走。\r\n</p>\r\n<p class=\"p0\">\r\n	上面这几个问题，纯走技术道路的还可以作壁上观，但如果是发生在自己团队里，管理者却保持逃避的态度，那么管理者就失职了。\r\n</p>\r\n<p class=\"p0\">\r\n	由于人的世界很复杂，所以期望坏的事情一件也不发生，那是不现实的。我个人感觉管理者面对这类事情的几率是<span style=\"font-family:Times New Roman;\">100%</span><span style=\"font-family:宋体;\">，区别是遇到多少件，而不是遇不遇得到。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	其实故事到这里还没完，如果往深了考察，就会发现，即使一个人愿意去搞定吵架中的两个人，那还有你怎么去搞定，搞不搞得定的问题。\r\n</p>\r\n<p class=\"p0\">\r\n	捣糨糊、各打五十大板这类简单粗暴的方法往往只能有效于一时，等价于埋下定时炸弹，长线来看不是什么高明方法。但把这个展开就需要另外一本书，这里就不进行展开了。\r\n</p>\r\n<p class=\"p0\">\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	<a name=\"t3\"></a>管理工作的负效应\r\n</h4>\r\n<p class=\"p0\">\r\n	从日常很多人发表的言论来看，管理工作似乎被无限美化了，很多人都认为管理工作似乎是一条彻底金光大道，但这并不完全正确。为了让事情回归本来面目，这里说一点管理方所可能带来的负效应。\r\n</p>\r\n<p class=\"p0\">\r\n	同纯技术工作相比，管理工作（特别是中层管理）的可流动性可能会非常低，形象来讲很多公司并不会愿意请外来的中层管理者来管理已有的员工，而更愿意请技术上有专长的人来解决具体的问题。这是由管理工作的几个特质所决定的：\r\n</p>\r\n<p class=\"p0\">\r\n	管理工作和人打交道比较多，所以对人员的特质有很强的依赖性。如果一个团队的人都非常像机器人，那么在不同公司间管理技能是完全通用的<span style=\"font-family:Times New Roman;\">---</span><span style=\"font-family:宋体;\">只要有</span><span style=\"font-family:Times New Roman;\">PMP</span><span style=\"font-family:宋体;\">，</span><span style=\"font-family:Times New Roman;\">CMMI</span><span style=\"font-family:宋体;\">这类东西就够了。但关键问题是人员的特性是多样的，这导致管理人员和被管理人员需要较多的磨合和适应。形象点讲就是，如果无法搞定特定人群，你考</span><span style=\"font-family:Times New Roman;\">5</span><span style=\"font-family:宋体;\">个</span><span style=\"font-family:Times New Roman;\">PMP</span><span style=\"font-family:宋体;\">证书，该不管用还是不管用。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	同时长时间在管理岗位的话，即使是做技术出身，技术能力也会退化，沟通技能、与上级的信任程度反倒会提高。而这些东西，到一家新公司后，一定会被归零，，其价值并不明显。反倒不如擅长算法，擅长某类业务的技术人员可流动性好。\r\n</p>\r\n<p class=\"p0\">\r\n	这也就意味着，管理人员往往与公司的利益绑定的更紧。尤其是中层管理人员，达到一定年纪后（比如：<span style=\"font-family:Times New Roman;\">40</span><span style=\"font-family:宋体;\">岁），很可能会失去流动的可能性，一旦所处的公司出现问题，那就可能会面临非常尴尬的局面</span><span style=\"font-family:Times New Roman;\">---</span><span style=\"font-family:宋体;\">直接讲就是，如果你选择了管理方向，却缺乏相应的人脉，</span><span style=\"font-family:Times New Roman;\">35</span><span style=\"font-family:宋体;\">岁之后基本不具备可流动性，换工作会很难，至少比纯技术的高端人员难。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	这点的一个旁证是各个初创期公司的人员构成。如果你用心观察就会发现对于初创期的公司而言，它需要创始人把握方向和寻找资金，也需要工程师来完成具体事务，但不太需要中层管理人员。比如：<span style=\"font-family:Times New Roman;\">Pinterest</span><span style=\"font-family:宋体;\">曾经公开了自己的数据，在</span><span style=\"font-family:Times New Roman;\">2010</span><span style=\"font-family:宋体;\">年是</span><span style=\"font-family:Times New Roman;\">2</span><span style=\"font-family:宋体;\">个创始人，</span><span style=\"font-family:Times New Roman;\">1</span><span style=\"font-family:宋体;\">个工程师；</span><span style=\"font-family:Times New Roman;\">2011</span><span style=\"font-family:宋体;\">是</span><span style=\"font-family:Times New Roman;\">3</span><span style=\"font-family:宋体;\">个工程师；</span><span style=\"font-family:Times New Roman;\">2012</span><span style=\"font-family:宋体;\">年是</span><span style=\"font-family:Times New Roman;\">6</span><span style=\"font-family:宋体;\">个工程师；</span><span style=\"font-family:Times New Roman;\">2013</span><span style=\"font-family:宋体;\">年是</span><span style=\"font-family:Times New Roman;\">40</span><span style=\"font-family:宋体;\">个工程师。这种情况下，只有到</span><span style=\"font-family:Times New Roman;\">2013</span><span style=\"font-family:宋体;\">年后中层管理人员才有存在价值，而一般情形而言这种情况并不会社招，而是会从现有人员中选拔。这最终导致纯管理人员的可流动性并没有想的那么好。</span>\r\n</p>\r\n<p class=\"p0\">\r\n	当然什么事情都有例外，如果你是成功运作几个产品的产品经理，那么也可不在流动性上受到限制。因为那些产品就是你最好的名片，他们使你在江湖里有了一席之地。\r\n</p>\r\n<p class=\"p0\">\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	小结\r\n</h4>\r\n<p class=\"p0\">\r\n	考\r\n虑上述三个方面，大多时候可以判明自己是应该做技术还是做管理。比如说：如果一个人日常很容易和人产生冲突，但脑子很好使，也能静下心来钻研技术。这种情\r\n形大致上应该努力找一家技术路径长的公司做技术，否则可能会人际关系紧张。而与此相反，一个人如果技术能做的还不错，也愿意与人沟通，同时已经身处一家技\r\n术路径不是很长的公司，并不太能够换工作，那么就很可能需要尽早转向管理方向。\r\n</p>\r\n<p class=\"p0\">\r\n	总之，别太为了点钱过度难为自己，走不远的话，最终还是吃亏。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://blog.csdn.net/leezy_2000/article/details/32483613', '1', '2015-01-09 10:04:50');
INSERT INTO `yov_source` VALUES ('10039', '如何提高团队协作的效率', '提高 团队协作 效率', '&nbsp;&nbsp;&nbsp;&nbsp;软件开发是一项团队活动，必然需要团队成员间的交流与协作。由此，如何提高团队协作的效率便成为大家共同关注的话题。本期三位嘉宾将结合自己的实践经验与大家一起探讨。<br />', '<p>\r\n	<strong>分工合理，责任明确</strong>\r\n</p>\r\n<p>\r\n	团\r\n队是由个人组成的，团队中的个人往往经历不同、背景不同、性格有差异、水平有高低。在团队形成后、正式开工前，首先应该进行合理分工，要结合每个人的特点\r\n和爱好，充分发挥出每个人的特长。因为如果工作不愉快、不顺手的话，效率自然低下。分工完成后，每个人对应的职责也就确定了。这时应该同每一位团队成员进\r\n行明确申明，最好以文字形式落实到个人并与日常绩效考核挂钩，以避免互相推诿、相互等待的情况出现。\r\n</p>\r\n<p>\r\n	<strong>制定高效的沟通机制</strong>\r\n</p>\r\n<p>\r\n	分工完成后团队即开始工作，此时必须保证信息在整个团队内的畅通，特别是互相之间有工作关联的同事，在发现问题时需要及时提出，以免造成不必要的工时浪费。\r\n但软件开发本身是一种需要精力集中并且安静的工作，多次临时性的打断会造成开发思路的停滞，因此团队负责人最好能够每天在固定的时间段内组织大家进行沟\r\n通，并了解工作的进度。而固定的时间也会让大家形成习惯，使效率得到提升。\r\n</p>\r\n<p>\r\n	<strong>发现团队瓶颈</strong>\r\n</p>\r\n<p>\r\n	大\r\n家往往会陷入一种误区，认为团队中每个员工效率发挥到极致的时候就是这个团队效率最高的时候。但经过企业管理实践不断的论证，这种想法其实是非常可怕的谬\r\n论。正确的做法应该是将整个团队看成一个整体，再去谈效率问题。团队的分工协作就好比是生产的流水线，流水线的整体生产效率不取决于流水线上效率最高的环\r\n节，而取决于效率最低、速度最慢的环节。当流水线上某一环节出现故障而停滞时，整个流水线也就停滞了。这也是常说的木桶原理。所以我们必须时刻去发现团队\r\n中的短板，尽一切力量帮助它，提高它的效率。这样，也许会牺牲局部某些个人的效率，但经过一段时间的实施后，你可能会惊奇地发现整个团队的效率变高了。\r\n</p>\r\n<p>\r\n	<strong>定期检查，及时调整</strong>\r\n</p>\r\n<p>\r\n	流水线的机器是死的，而程序员们是活的。因此团队的瓶颈也许会因为调整而发生变化，这时需要团队负责人审时度势，及时进行调整。也许需要修正前期的分工，也\r\n许需要改变正在使用的技术，甚至是更换无法胜任的团队成员。让整个团队的工作效率保持在一个较高的并且能够相互匹配的水平，这样做非常重要。\r\n</p>\r\n<p>\r\n	<strong>总结</strong>\r\n</p>\r\n<p>\r\n	团队是一个整体，不能靠每个员工进行单打独斗，要始终牢记团队的最终效用取决于团队中效率最低的环节。进行合理分工是预防瓶颈发生的前提，而建立高效的沟通\r\n机制则是发现瓶颈的有效方法。当瓶颈环节出现后要尽团队最大力量去发挥其效用，而当瓶颈发生变化时需及时做出调整，才能提高<span style=\"background-color:#FFFFFF;\">团队协作的效率。</span>\r\n</p>\r\n<p>\r\n	<span style=\"color:#c09100;\"><span style=\"background-color:#FFFFFF;\"><b>杭州云图科技有限公司研发总监，资深项目管理专家涂勇：提升研发团队协作效率的四个秘诀</b></span></span>\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	要提升研发团队的协作效率，我认为可从目标、规则、沟通和工具四个方面入手。\r\n</p>\r\n<p>\r\n	<strong>目标，让团队成员有明确的前进方向</strong>\r\n</p>\r\n<p>\r\n	清晰明确的团队目标可以对团队高效协作形成很强的牵引力，更重要的是，团队目标是团队成员个人目标制定的前提。要让团队高效率的协作，最好的方法就是让团队\r\n所有成员每时每刻的工作都围绕团队目标开展。需要指出的是，将团队的目标分解成近期目标、中期目标和远期目标是一个值得推荐的做法。此外，少数优秀的团队\r\n管理者甚至能够将团队的远期目标上升到团队使命感和价值观的高度。要做到这点，管理者需具备卓越的领导力。\r\n</p>\r\n<p>\r\n	具体到研发管理，对项目而言，明\r\n确项目目标并不困难，诸如产品发布、系统上线等这些都可以作为项目目标，并且项目经理也可以很容易以项目计划的形式来加以落实。但对职能部门的管理者而\r\n言，制定好职能部门的目标就很考验管理水平。职能部门的经理不应忽视部门目标的重要性，而这可以与团队成员的个人职业发展目标结合起来考虑。\r\n</p>\r\n<p>\r\n	<strong>规则，让团队成员始终保持住队形</strong>\r\n</p>\r\n<p>\r\n	高效率团队运作，一定有良好的团队规则做保证。明确告诉团队成员，什么样的行为是团队所不能容忍的，并将其形成制度。制度违反者都应受到相应的惩罚，并做到\r\n及时（第一时间）、公平（一视同仁）、公开（团队内部）。制度是团队的高压线，不坚决执行的制度还不如没有制度，记住这点很重要。\r\n</p>\r\n<p>\r\n	如果说制\r\n度告诉团队什么事不能做，那么规范就是告诉团队成员尤其是新进入团队的成员应该怎样做。文档规范、编程规范、原理图设计规范等开发规范，是团队高效率协作\r\n的保证。规范不是制度，可以容忍一时不遵守规范的情况，但应该让团队在遵守规范方面做得越来越好。培训、优秀案例和反面教材宣传等都是推行规范的好实践。\r\n另外，规范不是高压线，不赞成对违反规范的成员进行惩罚，最好的方式是对在规范方面做得优秀的人进行公开表扬。\r\n</p>\r\n<p>\r\n	制度和规范都是针对的人，对事来说规则即是流程。没有高效率的工作流程，也就没有高效率的团队。对于牵涉多人协作的工作，即使是一个设计不完备的流程也比没有流程好。值得指出的是：\r\n流程应该随着团队内外部的环境变化而做持续优化，在一些大公司中甚至会成立专门的流程改进小组，足见流程持续优化的重要性。\r\n</p>\r\n<p>\r\n	<strong>沟通，让团队成员凝聚成一个有机的整体</strong>\r\n</p>\r\n<p>\r\n	良\r\n好的沟通对一个高效率团队有多么重要，熟悉Scrum的朋友对此会有更深刻的体会。“坐到一起，每日站立会议，Review会议”，Scrum在团队沟通\r\n方面推崇的最佳实践都体现了沟通的重要性。为什么很多公司搬入新办公大楼后就开始走下坡路？下面的这个分析很可能就是主要原因：团队成员在新办公区的座位\r\n会比以前拉得更大，以前与团队成员坐在一起的主管们搬入了独立的办公室，而这会导致团队间原来形成的良好沟通氛围消失，其后果严重到足以给企业带来致命打\r\n击！好吧，我承认这听起来有点骇人听闻，目的只是想借此强调一下沟通的重要性。\r\n</p>\r\n<p>\r\n	通过开会来达到团队沟通的目的是一种好的方式吗？有人会说\r\n是，有人会说不是。其实，开会这种方式，无所谓好与不好，关键就两点：是否有必要开会以及开个什么样的会。我的个人感触：一人用嘴大家用耳的会应该是表彰\r\n大会；开了跟没开一样的会最好是批判大会；如果开会有人睡着了，大多数情况下是因为会议本身具有催眠效果。\r\n</p>\r\n<p>\r\n	相比开会这种沟通方式，我更喜欢现场管理和看板管理。\r\n</p>\r\n<p>\r\n	<strong>工具，是团队高效率协作的倍增器</strong>\r\n</p>\r\n<p>\r\n	这方面最容易让人想到的也是大多数团队目前所采用的方法就是：引入适合团队的协同软件。前面介绍的明确目标、制定规范和加强沟通等方面的措施，如果能有合适的团队协同工具支持和配合，推行起来则要顺利很多。\r\n</p>\r\n<p>\r\n	如何选择一款合适的协同软件呢？引入的协同软件贵在精而不在多，功能完备集成性好的协同软件可以避免引入过多系统而产生的信息孤岛。侧重自上而下管控的IT\r\n系统只会在规范团队方面起作用，要提升团队协作效率，更应该选择实现注重协作性的系统。免费的协同软件大多不如付费的，但价格昂贵的协同软件对多数团队而\r\n言并不适合。\r\n</p>\r\n<p>\r\n	优秀的管理者的工具箱中，总是会有各种各样的宝贝。诸如团队绩效、团队竞争等都是激发团队成员潜能和斗志的好方法，实施得好的话，可以显著提升团队成员间的协同效率。\r\n</p>\r\n<p>\r\n	如果你正好在带团队，不妨尝试一下上面提到的这些方法，相信你的团队的协作效率一定会越来越高。\r\n</p>\r\n<p>\r\n	<span style=\"color:#c09100;\"><b>Pragmatic.ly 联合创始人，Teahour.FM主播系统架构师叶玎玎：创业型开发团队的协作心得</b></span>\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	毫无疑问，Stephen R. Covey的《The 7 Habits of Highly Effective \r\nPeople》和David Allen的 《Getting Things Done: The Art of Stress-Free \r\nProductivity》是个人管理类的超级畅销书，让我们学会如何才能成为高效能人士。然而，即使团队里的所有人都是高效能人士，这个团队也不一定是\r\n个高效能团队。我们常说“一个和尚有水喝，两个和尚挑水喝，三个和尚没水喝”，正是出于这个道理。顾名思义，团队协作是指所有团队成员之间协同、合作，里\r\n面会有分工、沟通、协调，甚至会有妥协，所以我们需要一些规则和工具来帮助团队提高协作效率。本文的一些心得和实践来自于我在小团队（&lt;10）的经验，并且在团队内部相互信任、目标一致的基础上，所以不涉及办公室人事管理，适合于创业型开发团队。\r\n</p>\r\n<p>\r\n	<strong>目标一致</strong>\r\n</p>\r\n<p>\r\n	不仅要确保团队的长期目标一致，还要确保短期目标一致。如同在足球场踢球，刚开始比赛时，大家战术和思想都是一致的。而一旦进球后，就会出现有人想守，有人\r\n想攻的情况，这种不一致会造成局面被动并可能导致输球。创业团队也是如此。所以在任何时候，团队成员都要保持一致意见：现阶段的目标是什么，什么事情对团队最重要，然后所有做的事情都配合这个目标来完成。\r\n</p>\r\n<p>\r\n	<strong>合理安排</strong>\r\n</p>\r\n<p>\r\n	小\r\n团队人少，永远有做不完的事，所以在做计划时总是害怕资源出现闲置而添加过多任务。我们一开始也是如此。但慢慢发现，这样不仅弄得团队身心俱疲，不停地赶\r\n进度，而且也会因为不停地延期导致团队很沮丧、压力过大影响工作的心情和状态。因此，现在每次迭代只会给大家80%~90%的工作量。有意思的是，很多时\r\n候时间都是刚刚够。\r\n</p>\r\n<p>\r\n	<strong>易者优先</strong>\r\n</p>\r\n<p>\r\n	如果讨论时遇到意见分歧，且这些不一致的意见不涉及对错，那么会很容易陷入各自试图说服别人接受自己观点的困境，纯属浪费时间。所以我们采用易者优先原则，设置了单任务最长讨论时间。\r\n一旦超过讨论时间又无法达成共识，就会选择最简单的方案，先做出来，然后大家测试，最后再做改进。\r\n</p>\r\n<p>\r\n	<strong>免扰模式</strong>\r\n</p>\r\n<p>\r\n	确定项目计划后，我们就基本启动了免扰模式。我们不鼓励在工作时随意地打断别人，即使是一起在办公室工作时。在我们看来，每一次粗暴的打扰（例如电话、\r\nIM）都是对效率的损害，我们更需要的是100%专注在要做的事情上。因此，我们要求每个人如果需要讨论，就先想清楚整个问题，然后在\r\nPragmatic.ly或者Hipchat里发出来。短时间来看可能回复会有延时，但从长期来看反而能让大家都能更深入的思考、更专注的工作。\r\n</p>\r\n<p>\r\n	尽量避免会议。只有一个例外是遇到困难需要头脑风暴时，因为开会比起文字是效率更高的选择。但只有任务涉及者才需要参与，而不需要浪费其他人的时间。\r\n</p>\r\n<p>\r\n	<strong>状态同步</strong>\r\n</p>\r\n<p>\r\n	团队人越多，沟通成本越高，尤其是需要知道团队的当前状态时，例如目前进度如何，接下来有哪些事情要做，做完的时候需不需要其他成员帮忙审查，或者有没有卡\r\n在某些地方需要帮助。这些状态和信息同步是非常耗时的，我们更倾向于用眼睛看代替嘴巴说，而 \r\nPragmatic.ly就很好地满足了这点。项目里的所有信息和状态都会实时地同步给整个团队。\r\n</p>\r\n<p>\r\n	<strong>代码审查</strong>\r\n</p>\r\n<p>\r\n	作为开发团队，我们不一定能保证每个任务都有充足的测试覆盖而且也不追求100%覆盖率。但每一段代码、每一次修改，都必须有其他人来审查，通过后才能进入\r\n主干。代码审查中可以发现当事者没考虑过的设计细节和一些实现上的Bug，保证了软件质量。通过代码审查，每个人可以学习到其他人好的思维方式和编码方\r\n式，也会提出做的不好的地方和改进意见，是整个团队在代码级别的另一种沟通和思考，促进了团队的成长。代码审查也能避免单点故障，万一出了问题，即使代码\r\n编写者不在，仍然有其他人能立刻去修正。\r\n</p>\r\n<p>\r\n	<strong>过程审查</strong>\r\n</p>\r\n<p>\r\n	除代码需要审查外，过程也是一个很有审查必要的事情。所以我们会不定时地一起进行一次简单的回顾，各自对这个周期的一些工作提出意见，然后在下一个周期里有针对性地改进。整个工作过程就是这样不断地在迭代式调整和改进，让我们根据自身的情况，实践出最适合团队的方式。\r\n</p>\r\n<p>\r\n	<strong>健康工作</strong>\r\n</p>\r\n<p>\r\n	要想工作好，身体先练好。一个健康的成员才可能高效地工作。在Y \r\nCombinator有个理论，在产品发布前，你应该专注并只专注两件半事情，1开发+1跟用户聊天+0.5锻炼身体。而在产品发布后，你应该专注并只专\r\n注三件事情，0.5开发+1跟用户聊天+1运营+0.5锻炼身体。可见锻炼身体的重要。我们团队每个人基本每天都会有专门的运动时间，跑步、游泳，或者健身房，已然成了我们工作的一部分。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '10', 'http://www.csdn.net/article/2013-09-27/2817072', '1', '2015-01-09 10:06:46');
INSERT INTO `yov_source` VALUES ('10040', '瞬时响应：网站的高性能架构', '瞬时响应 网站 高性能 架构', '&nbsp;&nbsp;&nbsp;&nbsp;网站性能是客观的指标，可以具体体现到响应时间、吞吐量等技术指标，同时也是主观的感受，而感受则是一种与具体参与者相关的微妙的东西，用户的感受和工程师的感受不同，不同的用户感受也不同。', '<p>\r\n	<b>什么叫高性能的网站？</b> \r\n</p>\r\n<p>\r\n	两个网站性能架构设计方案：A方案和B方案，A方案在小于100个并发用户访问时，每个请求的响应时间是1秒，当并发请求达到200的时候，请求的\r\n响应时间将骤增到10秒。B方案不管是100个并发用户访问还是200个并发用户访问，每个请求的响应时间都差不多是1.5秒。哪个方案的性能好？如果老\r\n板说“我们要改善网站的性能”，他指的是什么？\r\n</p>\r\n<p>\r\n	同类型的两个网站，X网站服务器平均每个请求的处理时间是500毫秒，Y网站服务器平均每个请求的处理时间是1000毫秒，为什么用户却反映Y网站的速度快呢？\r\n</p>\r\n<p>\r\n	网站性能是客观的指标，可以具体体现到响应时间、吞吐量等技术指标，同时也是主观的感受，而感受则是一种与具体参与者相关的微妙的东西，用户的感受和工程师的感受不同，不同的用户感受也不同。\r\n</p>\r\n<p>\r\n	<b>网站性能测试</b> \r\n</p>\r\n<p>\r\n	性能测试是性能优化的前提和基础，也是性能优化结果的检查和度量标准。不同视角下的网站性能有不同的标准，也有不同的优化手段。\r\n</p>\r\n<p>\r\n	<b>不同视角下的网站性能</b> \r\n</p>\r\n<p>\r\n	软件工程师说到网站性能的时候，通常和用户说的不一样。\r\n</p>\r\n<p>\r\n	1．用户视角的网站性能\r\n</p>\r\n<p>\r\n	从用户角度，网站性能就是用户在浏览器上直观感受到的网站响应速度快还是慢。用户感受到的时间，包括用户计算机和网站服务器通信的时间、网站服务器处理的时间、用户计算机浏览器构造请求解析响应数据的时间，如图1所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/26/5243db8636f07.jpg\" target=\"_blank\"> <img alt=\"\" src=\"http://cms.csdnimg.cn/article/201309/26/5243db8636f07_middle.jpg?_=6399\" border=\"0\" /> </a> \r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图1&nbsp;用户视角的网站性能\r\n</p>\r\n<p>\r\n	不同计算机的性能差异，不同浏览器解析HTML速度的差异，不同网络运营商提供的互联网宽带服务的差异，这些差异最终导致用户感受到的响应延迟可能会远远大于网站服务器处理请求需要的时间。\r\n</p>\r\n<p>\r\n	在实践中，使用一些前端架构优化手段，通过优化页面HTML式样、利用浏览器端的并发和异步特性、调整浏览器缓存策略、使用CDN服务、反向代理等\r\n手段，使浏览器尽快地显示用户感兴趣的内容、尽可能近地获取页面内容，即使不优化应用程序和架构，也可以很大程度地改善用户视角下的网站性能。\r\n</p>\r\n<p>\r\n	2．开发人员视角的网站性能\r\n</p>\r\n<p>\r\n	开发人员关注的主要是应用程序本身及其相关子系统的性能，包括响应延迟、系统吞吐量、并发处理能力、系统稳定性等技术指标。主要的优化手段有使用缓存加速数据读取，使用集群提高吞吐能力，使用异步消息加快请求响应及实现削峰，使用代码优化手段改善程序性能。\r\n</p>\r\n<p>\r\n	3．运维人员视角的网站性能\r\n</p>\r\n<p>\r\n	运维人员更关注基础设施性能和资源利用率，如网络运营商的带宽能力、服务器硬件的配置、数据中心网络架构、服务器和网络带宽的资源利用率等。主要优化手段有建设优化骨干网、使用高性价比定制服务器、利用虚拟化技术优化资源利用等。\r\n</p>\r\n<p>\r\n	<b>性能测试指标</b> \r\n</p>\r\n<p>\r\n	不同视角下有不同的性能标准，不同的标准有不同的性能测试指标，从开发和测试人员的视角，网站性能测试的主要指标有响应时间、并发数、吞吐量、性能计数器等。\r\n</p>\r\n<p>\r\n	<b>1．响应时间</b> \r\n</p>\r\n<p>\r\n	指应用执行一个操作需要的时间，包括从发出请求开始到收到最后响应数据所需要的时间。响应时间是系统最重要的性能指标，直观地反映了系统的“快慢”。表4.1列出了一些常用的系统操作需要的响应时间。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/26/5243dbbe47d55.jpg\" target=\"_blank\"> <img src=\"http://cms.csdnimg.cn/article/201309/26/5243dbbe47d55_middle.jpg\" border=\"0\" /> </a> \r\n</p>\r\n<p style=\"text-align:center;\">\r\n	表1&nbsp;常用系统操作响应时间表\r\n</p>\r\n<p>\r\n	测试程序通过模拟应用程序，记录收到响应和发出请求之间的时间差来计算系统响应时间。但是记录及获取系统时间这个操作也需要花费一定的时\r\n间，如果测试目标操作本身需要花费的时间极少，比如几微秒，那么测试程序就无法测试得到系统的响应时间。实践中通常采用的办法是重复请求，比如一个请求操\r\n作重复执行一万次，测试一万次执行需要的总响应时间之和，然后除以一万，得到单次请求的响应时间。\r\n</p>\r\n<p>\r\n	<span style=\"background-color:#FFFFFF;\"><b>2．并发数</b></span> \r\n</p>\r\n<p>\r\n	指系统能够同时处理请求的数目，这个数字也反映了系统的负载特性。对于网站而言，并发数即网站并发用户数，指同时提交请求的用户数目。\r\n</p>\r\n<p>\r\n	与网站并发用户数相对应的还有网站在线用户数（当前登录网站的用户总数）和网站系统用户数（可能访问系统的总用户数，对多数网站而言就是注册用户数）。其数量比较关系为：\r\n</p>\r\n<p align=\"center\">\r\n	<span style=\"color:#7f7f7f;\"><b>网站系统用户数&gt;&gt;网站在线用户数&gt;&gt;网站并发用户数</b></span> \r\n</p>\r\n<p>\r\n	在网站产品设计初期，产品经理和运营人员就需要规划不同发展阶段的网站系统用户数，并以此为基础，根据产品特性和运营手段，推算在线用户数和并发用户数。这些指标将成为系统非功能设计的重要依据。\r\n</p>\r\n<p>\r\n	现实中，经常看到某些网站，特别是电商类网站，市场推广人员兴致勃勃地打广告打折促销，用户兴致勃勃地去抢购，结果活动刚一开始，\r\n就因为并发用户数超过网站最大负载而响应缓慢，急性子的用户不停刷新浏览器，导致系统并发数更高，最后以服务器系统崩溃，用户浏览器显示\r\n“Service&nbsp;is&nbsp;too&nbsp;busy”而告终。出现这种情况，有可能是网站技术准备不充分导致，也有可能是运营人员错误地评估并发用户数导致。\r\n</p>\r\n<p>\r\n	测试程序通过多线程模拟并发用户的办法来测试系统的并发处理能力，为了真实模拟用户行为，测试程序并不是启动多线程然后不停地发送请求，而是在两次请求之间加入一个随机等待时间，这个时间被称作思考时间。\r\n</p>\r\n<p>\r\n	<b>3．吞吐量</b> \r\n</p>\r\n<p>\r\n	指单位时间内系统处理的请求数量，体现系统的整体处理能力。对于网站，可以用“请求数/秒”或是“页面数/秒”来衡量，也可以用\r\n“访问人数/天”或是“处理的业务数/小时”等来衡量。TPS（每秒事务数）是吞吐量的一个常用量化指标，此外还有HPS（每秒HTTP请求数）、\r\nQPS（每秒查询数）等。\r\n</p>\r\n<p>\r\n	在系统并发数由小逐渐增大的过程中（这个过程也伴随着服务器系统资源消耗逐渐增大），系统吞吐量先是逐渐增加，达到一个极限后，随着并发数的增加反而下降，达到系统崩溃点后，系统资源耗尽，吞吐量为零。\r\n</p>\r\n<p>\r\n	而这个过程中，响应时间则是先保持小幅上升，到达吞吐量极限后，快速上升，到达系统崩溃点后，系统失去响应。系统吞吐量、系统并发数及响应时间之间的关系将在本章后面内容中介绍。\r\n</p>\r\n<p>\r\n	系统吞吐量和系统并发数，以及响应时间的关系可以形象地理解为高速公路的通行状况：吞吐量是每天通过收费站的车辆数目（可以换算成\r\n收费站收取的高速费），并发数是高速公路上的正在行驶的车辆数目，响应时间是车速。车辆很少时，车速很快，但是收到的高速费也相应较少；随着高速公路上车\r\n辆数目的增多，车速略受影响，但是收到的高速费增加很快；随着车辆的继续增加，车速变得越来越慢，高速公路越来越堵，收费不增反降；如果车流量继续增加，\r\n超过某个极限后，任何偶然因素都会导致高速全部瘫痪，车走不动，费当然也收不着，而高速公路成了停车场（资源耗尽）。\r\n</p>\r\n<p>\r\n	网站性能优化的目的，除了改善用户体验的响应时间，还要尽量提高系统吞吐量，最大限度利用服务器资源。\r\n</p>\r\n<p>\r\n	<b>4．性能计数器</b> \r\n</p>\r\n<p>\r\n	它是描述服务器或操作系统性能的一些数据指标。包括System&nbsp;Load、对象与线程数、内存使用、CPU使用、磁盘与网络\r\nI/O等指标。这些指标也是系统监控的重要参数，对这些指标设置报警阈值，当监控系统发现性能计数器超过阈值时，就向运维和开发人员报警，及时发现处理系\r\n统异常。\r\n</p>\r\n<p>\r\n	System&nbsp;Load即系统负载，指当前正在被CPU执行和等待被CPU执行的进程数目总和，是反映系统忙闲程度的重要指标。多\r\n核CPU的情况下，完美情况是所有CPU都在使用，没有进程在等待处理，所以Load的理想值是CPU的数目。当Load值低于CPU数目的时候，表示\r\nCPU有空闲，资源存在浪费；当Load值高于CPU数目的时候，表示进程在排队等待CPU调度，表示系统资源不足，影响应用程序的执行性能。在\r\nLinux系统中使用top命令查看，该值是三个浮点数，表示最近1分钟，10分钟，15分钟的运行队列平均进程数。如图4.2所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/26/5243dcb305292.jpg\" target=\"_blank\"> <img src=\"http://cms.csdnimg.cn/article/201309/26/5243dcb305292_middle.jpg\" border=\"0\" /> </a> \r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图2&nbsp;在Linux命令行查看系统负载\r\n</p>\r\n<p>\r\n	<b>性能测试方法</b> \r\n</p>\r\n<p>\r\n	性能测试是一个总称，具体可细分为性能测试、负载测试、压力测试、稳定性测试。\r\n</p>\r\n<ul>\r\n	<li>\r\n		性能测试\r\n	</li>\r\n</ul>\r\n<p>\r\n	以系统设计初期规划的性能指标为预期目标，对系统不断施加压力，验证系统在资源可接受范围内，是否能达到性能预期。\r\n</p>\r\n<ul>\r\n	<li>\r\n		负载测试\r\n	</li>\r\n</ul>\r\n<p>\r\n	对系统不断地增加并发请求以增加系统压力，直到系统的某项或多项性能指标达到安全临界值，如某种资源已经呈饱和状态，这时继续对系统施加压力，系统的处理能力不但不能提高，反而会下降。\r\n</p>\r\n<ul>\r\n	<li>\r\n		压力测试\r\n	</li>\r\n</ul>\r\n<p>\r\n	超过安全负载的情况下，对系统继续施加压力，直到系统崩溃或不能再处理任何请求，以此获得系统最大压力承受能力。\r\n</p>\r\n<ul>\r\n	<li>\r\n		稳定性测试\r\n	</li>\r\n</ul>\r\n<p>\r\n	被测试系统在特定硬件、软件、网络环境条件下，给系统加载一定业务压力，使系统运行一段较长时间，以此检测系统是否稳定。在不同生产环境、不同时间点的请求压力是不均匀的，呈波浪特性，因此为了更好地模拟生产环境，稳定性测试也应不均匀地对系统施加压力。\r\n</p>\r\n<p>\r\n	性能测试是一个不断对系统增加访问压力，以获得系统性能指标、最大负载能力、最大压力承受能力的过程。所谓的增加访问压力，在系统测试环境中，就是不断增加测试程序的并发请求数，一般说来，性能测试遵循如图4.3所示的抛物线规律。\r\n</p>\r\n<p>\r\n	图4.3中的横坐标表示消耗的系统资源，纵坐标表示系统处理能力（吞吐量）。在开始阶段，随着并发请求数目的增加，系统使\r\n用较少的资源就达到较好的处理能力（a～b段），这一段是网站的日常运行区间，网站的绝大部分访问负载压力都集中在这一段区间，被称作性能测试，测试目标\r\n是评估系统性能是否符合需求及设计目标；随着压力的持续增加，系统处理能力增加变缓，直到达到一个最大值（c点），这是系统的最大负载点，这一段被称作负\r\n载测试。测试目标是评估当系统因为突发事件超出日常访问压力的情况下，保证系统正常运行情况下能够承受的最大访问负载压力；超过这个点后，再增加压力，系\r\n统的处理能力反而下降，而资源消耗却更多，直到资源消耗达到极限（d点），这个点可以看作是系统的崩溃点，超过这个点继续加大并发请求数目，系统不能再处\r\n理任何请求，这一段被称作压力测试，测试目标是评估可能导致系统崩溃的最大访问负载压力。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/26/5243dd7de4b7d.jpg\" target=\"_blank\"> <img src=\"http://cms.csdnimg.cn/article/201309/26/5243dd7de4b7d_middle.jpg\" border=\"0\" /> </a> \r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图3&nbsp;性能测试曲线\r\n</p>\r\n<p>\r\n	性能测试反应的是系统在实际生产环境中使用时，随着用户并发访问数量的增加，系统的处理能力。与性能曲线相对应的是用户访问的等待时间（系统响应时间），如图4.4所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/26/5243dd9724172.jpg\" target=\"_blank\"> <img src=\"http://cms.csdnimg.cn/article/201309/26/5243dd9724172_middle.jpg\" border=\"0\" /> </a> \r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图4&nbsp;并发用户访问响应时间曲线\r\n</p>\r\n<p>\r\n	在日常运行区间，可以获得最好的用户响应时间，随着并发用户数的增加，响应延迟越来越大，直到系统崩溃，用户失去响应。\r\n</p>\r\n<p>\r\n	性能测试报告\r\n</p>\r\n<p>\r\n	测试结果报告应能够反映上述性能测试曲线的规律，阅读者可以得到系统性能是否满足设计目标和业务要求、系统最大负载能力、系统最大压力承受能力等重要信息，表4.2是一个简单示例。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201309/26/5243ddd1c4695.jpg\" target=\"_blank\"> <img src=\"http://cms.csdnimg.cn/article/201309/26/5243ddd1c4695_middle.jpg\" border=\"0\" /> </a> \r\n</p>\r\n<p style=\"text-align:center;\">\r\n	表2&nbsp;性能测试结果报告\r\n</p>\r\n<p>\r\n	性能优化策略\r\n</p>\r\n<p>\r\n	如果性能测试结果不能满足设计或业务需求，那么就需要寻找系统瓶颈，分而治之，逐步优化。\r\n</p>\r\n<p>\r\n	1．性能分析\r\n</p>\r\n<p>\r\n	大型网站结构复杂，用户从浏览器发出请求直到数据库完成操作事务，中间需要经过很多环节，如果测试或者用户报告网站响应缓慢，存在性能问题，必须对请求经历的各个环节进行分析，排查可能出现性能瓶颈的地方，定位问题。\r\n</p>\r\n<p>\r\n	排查一个网站的性能瓶颈和排查一个程序的性能瓶颈的手法基本相同：检查请求处理的各个环节的日志，分析哪个环节响应时间不合理、超过预期；然后检查监控数据，分析影响性能的主要因素是内存、磁盘、网络、还是CPU，是代码问题还是架构设计不合理，或者系统资源确实不足。\r\n</p>\r\n<p>\r\n	2．性能优化\r\n</p>\r\n定位产生性能问题的具体原因后，就需要进行性能优化，根据网站分层架构，可分为Web前端性能优化、应用服务器性能优化、存储服务器性能优化3大类。', '', '', '', '', '', '', '1', '11', 'http://www.csdn.net/article/2013-09-26/2817048', '1', '2015-01-09 10:09:23');
INSERT INTO `yov_source` VALUES ('10041', '互联网系统架构的演进', '互联网 系统 架构 演进', '&nbsp;&nbsp;&nbsp;&nbsp;多终端接入、开放平台给互联网带来了前所未有的用户数量和访问规模，信息之多、传播速度之快，是传统网站难以想象的。本文将从发展演进的角度，解读高性能互联网系统架构。<br />', '<p>\r\n	多终端接入、开放平台给互联网带来了前所未有的用户量级和访问规模，SNS网站产生了海量的UGC（用户产生内容），而且这些内容依托关\r\n系链扩散速度之快、传播范围之广是传统网站难以想象的，海量数据的计算存储也一直是近年互联网领域的热点。本文将从发展演进的层面探讨互联网的系统架构。\r\n</p>\r\n<p>\r\n	<span style=\"color:#7f6000;\"><span style=\"background-color:#FFFFFF;\"><strong>天下武功唯快不破</strong></span></span>\r\n</p>\r\n<p>\r\n	网站初期的架构一般采用“短平快”的架构思路，架构以简单清晰、容易开发为第一衡量指标。\r\n</p>\r\n<p>\r\n	互联网架构选型首先包括开发语言的选择，目前PHP、Java是主力语言。开发语言的选择一般从团队人员的知识储备、社区活跃度、商业应用的成熟度、招聘人才的人力成本等方面考量。\r\n</p>\r\n<p>\r\n	选择语言之后，一般会选择该语言的流行框架辅助研发，例如Java的SSH、Python的Django等。但这些框架并不是通常意义上的架构，架构一般可\r\n分为物理架构、运行架构、逻辑架构、开发架构、数据架构等多个维度，框架往往只是代码架构的一部分。代码架构是指代码的组织形式、规范、设计模式等，框架\r\n其实是常用设计模式的软件化。例如Struts是MVC模式的实现，Hibernate、iBATIS是ORM模式的实现。\r\n</p>\r\n<p>\r\n	在架构视图中，早期关注的主要是开发视图和数据视图，一般数据存储采用DB，初期数据的关注点主要是安全和备份，MySQL的Master-Slave模式可以满足该需求。\r\n</p>\r\n<p>\r\n	<span style=\"color:#7f6000;\"><strong>鸡蛋不要放在一个篮子里</strong></span>\r\n</p>\r\n<p>\r\n	采用“短平快”三板斧将网站开发出来之后，急需解决的是网站的可用性问题。可用性最基本的要求是不能有单点，对程序节点而言，前端可采用LVS、HAProxy、Nginx等负载均衡/反向代理设备。\r\n</p>\r\n<p>\r\n	DB的可用性就复杂了很多，数据库天然是有状态的，状态就是其中的数据，新增一个数据节点一般伴随着大量的数据复制和迁移。对金融行业而言，昂贵的商用存储是\r\n解决之道，“IBM+Oracle+EMC”是该类系统的标配。互联网企业则一般采用较为廉价的方案，例如开源的DRDB+Heartbeat技术组合可\r\n以在MySQL主库宕机时实现备机接管，接管时间可以控制在30秒内。\r\n</p>\r\n<p>\r\n	程序节点其实也可能存在状态，例如Web服务中常用的Session\r\n就是保存在容器中的状态，这种状态保持要求所有相同用户的请求都在同一台机器上处理，无状态的程序节点才能水平扩展。无状态一般有两种设计思路，还以\r\nSession为例，一种思路是把用户的状态保存在客户端Cookie，每次请求都把客户端的用户信息带到服务器端，淘宝的分布式Session就是该思\r\n路的一种实现；另一种思路是状态保留在另外一个服务中，例如有些公司将Session放在分布式缓存中。\r\n</p>\r\n<p>\r\n	<span style=\"color:#7f6000;\"><strong>性能是生命线</strong></span>\r\n</p>\r\n<p>\r\n	去除单点之后的系统就可以水平扩展，架构如图1所示。但随着网站的推广运营，系统的规模开始扩大，此时可能会出现服务访问缓慢，甚至不可用的状况，如何提升系统性能就成了架构师的当务之急。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201308/27/521c5e387df49.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201308/27/521c5e387df49_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图1  去除单点之后进行水平扩展\r\n</p>\r\n<p>\r\n	<b>存储架构和性能</b>\r\n</p>\r\n<p>\r\n	互联网系统所有的性能瓶颈中，数据存储和访问速度往往是最重要也是最难解决的，选择合适的存储是系统的关键。存储的选择一般需要从多个方面考量，如成本、内容、用途和模型。目前主流的存储介质包括硬盘和内存两种。\r\n</p>\r\n<p>\r\n	对机械硬盘来说，1秒可以完成150次左右的随机I/O。而结合设计优良的Hash算法，内存查找可以每秒执行40万次左右。硬盘的随机读写能力决定了其读\r\n写的最差性能，但操作系统在实现文件系统时会把最近读写过的数据缓存在内存中。由于磁盘访问和内存访问性能量级的差距，从操作系统的Cache命中率就可\r\n以简单计算文件存储的性能，如果内存命中率可以达到80%，系统的I/O能力相较完全随机I/O将有5倍提升。\r\n</p>\r\n<p>\r\n	对于数据层服务器，大内存已成为标配（一般为100GB左右），如果DB中存储200GB的数据，根据8/2原则，Cache命中率应为87.5%，因此对MySQL而言，一般读写可以达到每秒1千次以上。\r\n</p>\r\n<p>\r\n	对于读写频率都很高、且可容忍数据丢失的场景，可以采用内存作为数据存储的介质。可靠的内存存储需要每次操作都记录Biglog，即使数据丢失也可以恢复，同时内存中的数据一般定期持久化到硬盘。\r\n</p>\r\n<p>\r\n	从功能角度考量，还可以分为持久化存储和Cache。持久化存储也可称为可靠存储，Cache是为了提升系统性能，在可靠存储的基础上建立的访问性能更加高效的数据读取节点，通常是内存存储，其架构一般如图2所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201308/27/521c5e9ebb8dc.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201308/27/521c5e9ebb8dc_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图2  持久化存储和Cache\r\n</p>\r\n<p>\r\n	存储的数据模型一般分为结构化存储和NoSQL存储。结构化存储以各种传统DB为代表，NoSQL技术的代表系统则有HBase、Memcached、\r\nRedis等。各种NoSQL系统虽然特性各异，但相对传统DB而言，由于结构化信息的缺失，往往不能做各种关联查询，适用场景更多是主键查询，而且一般\r\n是写少读多的系统。\r\n</p>\r\n<p>\r\n	对于大型互联网公司，为了某些场景下的性能优化，也会定制个性化的文件系统，例如为了适应大文件存储的场景，Google开发了GFS；为了更快读取海量商品的描述图片，TFS在阿里诞生。\r\n</p>\r\n<p>\r\n	虽然各类存储快速涌现，但DB作为结构化数据的传统存储设备，依然在架构中处于非常重要的地位。由于随机I/O的瓶颈，DB的性能天花板十分明显。在大型系\r\n统中通常需要分库操作，分库一般有两个维度——水平切分和垂直切分。水平切分一般根据主键规则或某种规则将同类数据切分到不同的单元表中，原则是数据切分均匀，尤其是热点数据分布均匀。\r\n</p>\r\n<p>\r\n	垂直切分是把大表中的字段拆分到多张表。垂直切分一般按照数据访问频率的不同。逻辑关系的差别进行切分，例如将大字段、kv字段、计数等高频访问字段单独剥离存储都是常见的垂直切分方案。\r\n</p>\r\n<p>\r\n	除了切库之外， MySQL的分表也会有效减少单表大小，使数据变得更简单，甚至可以做到不下线变更，单表索引规模的下降也会带来性能的提升。\r\n</p>\r\n<p>\r\n	分库分表作为DB架构中重要的一环，使DB更加稳健，但它给业务代码带来了额外的复杂性，最好通过中间件来屏蔽DB的底层分布，对业务透明。\r\n</p>\r\n<p>\r\n	作为高性能网站必不可少的组件，Cache在各种主流架构中也起着重要的作用。\r\n</p>\r\n<p>\r\n	从部署模式上看，它可分为本地Cache和分布式Cache。本地Cache是指在应用进程中的Cache，通常的数据结构是一个MAP，其优点是结构简\r\n单，效率较分布式Cache更高，缺点是一般应用程序服务器的内存有限，导致本地Cache容量受到局限，而且数据冗余度较高，每个应用服务器都需要一份\r\n数据，更新比较烦琐，一般采用超时删除机制。\r\n</p>\r\n<p>\r\n	分布式Cache的容量较大，方便扩容和更新，其数据分布可采用一致性Hash算法，减少节点变化带来的数据迁移。\r\n</p>\r\n<p>\r\n	引入Cache不可避免的问题是服务器的宕机处理。Cache通常是一个集群，数据分布在多个节点，如果挂掉一个节点，只会影响部分数据，而且对于可靠性要求较高的系统，每个节点都可以有备份。\r\n</p>\r\n<p>\r\n	作为可靠存储的数据备份，Cache在架构设计上往往承担大部分读访问需求，其命中率尤为重要。Cache不命中有两种情况，一是数据在Cache中不存\r\n在，二是在持久化存储中也不存在。对于后者的频繁访问会导致请求直接压在DB上，在设计时应尽量避免，可以通过维护Bitmap对持久化存储中没有的数据\r\n进行拦截，直接返回，也可以简单地将这些数据对应空对象放进Cache。\r\n</p>\r\n<p>\r\n	Cache的存储一般是将索引和数据分离，对于索引数据可以全量缓存，对于体量较大的数据一般采用部分缓存的方式。\r\n</p>\r\n<p>\r\n	Cache的使用场景有一定的局限，对于较为静态的数据才有意义，这个临界值一般是5分钟。由于当前存储技术的进步，Cache也可以用其他高性能的存储介质代替，例如SSD的引入使得硬盘的随机读写能力提升数十倍，也会使得Cache的重要性有所下降。\r\n</p>\r\n<p>\r\n	<b>程序架构和性能</b>\r\n</p>\r\n<p>\r\n	对一般的系统而言，程序逻辑的主要作用是调用各种数据访问接口，该操作通常需要等待，所以除搜索等少数系统外，程序逻辑一般是非CPU密集型。该类系统中“线程”是稀缺资源，线程数和接口耗时构成了系统的QPS能力。\r\n</p>\r\n<p>\r\n	大型互联网系统的QPS可能为几万甚至峰值达到几十万，此时增加机器可以解决问题，但这些机器的利用率其实很低，因为大部分时间是在等待，此时引入异步变得非常重要，异步在同样的时间可以处理更多工作，拥有更好的性能。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201308/27/521c5f3bd4a8a.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201308/27/521c5f3bd4a8a_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图3  同步调用和异步调用\r\n</p>\r\n<p>\r\n	利用Nio的多路复用方式可方便地实现异步系统，当然也可用协程令代码更加清晰。业界流行的SEDA技术可将一次请求拆分为粒度更细的Actor，每个\r\nActor使用独立队列，前一个的输出是后一个的输入。SEDA通过该方式将请求中等待和非等待的环节分离，提升了系统的吞吐量，这种方式在小米等互联网\r\n公司有较多应用。\r\n</p>\r\n<p>\r\n	除了异步之外，并行对系统也很重要，它可以有效缩短请求的响应时间。批量接口也可以有效减少系统调用次数，使得系统线程消耗更少，从而提升系统吞吐量。\r\n</p>\r\n<p>\r\n	对线程而言，还有一个重要的参数是超时时间。响应快的服务，超时时间可以长一些，对于响应慢的服务，超时时间可以短一些，尽快失败是保护自己的有效手段。\r\n</p>\r\n<p>\r\n	<b>网络架构和性能</b>\r\n</p>\r\n<p>\r\n	大型网站的网络接入一般是“DNS+负载均衡层+CDN”这种模式。对于大型互联网公司，往往有多个IDC提供对外服务，中国互联网的南北不互通使得解决不\r\n同地域不同运营商的接入速度问题成了难题，该问题的解决一般需要公司自己开发DNS服务器，结合IP测速平台，引流用户请求到访问速度最快的节点。\r\n</p>\r\n<p>\r\n	<span style=\"color:#7f6000;\"><strong>大系统小做</strong></span>\r\n</p>\r\n<p>\r\n	业务逻辑复杂多变，如何保证程序逻辑的代码稳定是架构师需要解决的问题，良好的模块划分和扩展性强的接口设计都是解决这个问题的利器。\r\n</p>\r\n<p>\r\n	模块是和领域模型相关的一个概念，其往往指系统中高内聚的一个数据访问单元。例如对电商系统而言，最大的两个领域模型分别是商品信息和交易信息，每个领域模\r\n型对应一系列数据，商品会有商品的基本信息、类目信息等，交易会包括交易的订单，这些“领域模型+数据+业务方法”就构成了一个个的模块，高度内聚的模块\r\n是数据的访问的入口。例如交易时也需要去获取商品信息，但一般不会被允许直接调用商品模块的数据表，而是通过商品模块提供的接口进行访问，这样做有下面一\r\n些优点。\r\n</p>\r\n<ul>\r\n	<li>\r\n		接口和数据分离，底层数据结构的变化不会影响到外围系统。\r\n	</li>\r\n	<li>\r\n		数据直接暴露给其他系统，增加了系统的不稳定性。\r\n	</li>\r\n	<li>\r\n		接口的收敛减少了重复开发，提高了系统可用性。\r\n	</li>\r\n</ul>\r\n<p>\r\n	对较小规模的应用，模块可部署在一起，但对大型系统而言，模块一般是单独部署，通过RPC交互，这样可以减少彼此之间的系统层面影响。例如Amazon就倾向将所有服务器程序暴露为接口。\r\n</p>\r\n<p>\r\n	分布式系统增加了系统交互的复杂性，也为系统引入了更多潜在的失败环节，但分布式系统可以带来的好处更明显。\r\n</p>\r\n<ul>\r\n	<li>\r\n		有利于系统分级，针对不同服务提供不同的可用性。\r\n	</li>\r\n	<li>\r\n		大规模开发有了可能，每个模块可以单独开发和部署。\r\n	</li>\r\n	<li>\r\n		系统可重用性加强，避免重复制造轮子。\r\n	</li>\r\n	<li>\r\n		服务治理更加简单，一般RPC天然提供容灾，可以自动发现新增节点和剔除问题节点。\r\n	</li>\r\n</ul>\r\n<p>\r\n	逻辑层的接口设计如何做到稳定呢？首先接口的设计不应该是产品驱动的，而应该由数据驱动，尽量考虑接口以后的发展，接口的参数尽量是对象，参数不要采用boolean这种难以扩展的数据类型。\r\n</p>\r\n<p>\r\n	逻辑层的接口设计，一般有粗粒度和细粒度两种模式。粗粒度接口的优点是交互少，一次调用基本可以满足需求，缺点是业务逻辑较多，所以不稳定性增加，这里的不稳定性不仅是系统稳定性，还包括业务逻辑的稳定性。细粒度接口交互较多，但更加有利于重用性。\r\n</p>\r\n<p>\r\n	细粒度接口多次交互是否会带来明显的性能损耗呢？目前服务器1秒可以执行近万次TCP连接，网络传输对于千兆网卡而言，一般也不会造成瓶颈，尤其RPC框架般都会保持长连接。因此，通常情况下我们可以忽略RPC调用带来的性能损耗。\r\n</p>\r\n<p>\r\n	逻辑层接口尽量采用大系统小做的原则，该原则是腾讯架构中重要的价值观。一个接口不做太多事情，只做关键路径，非关键逻辑可以用消息队列或事件通知等方式剥离出来，使得关键路径更加稳定。这也体现了服务分级的思想，把最大的精力花在最重要的接口上。\r\n</p>\r\n<p>\r\n	除了按重要性划分服务之外，也可以按接入方划分，避免不同终端的Bug影响。还可以按快慢划分，例如为上传文件等功能提供单独的服务，避免长时间占用线程，影响系统稳定性。\r\n</p>\r\n<p>\r\n	模块化是程序的水平切分，有时也会采用垂直切分，这种架构有以下好处。\r\n</p>\r\n<ul>\r\n	<li>\r\n		系统规模更方便水平扩展，数据处理能力会显著增加。例如某个模块的容量不足，可以单独扩容该模块。\r\n	</li>\r\n	<li>\r\n		减少系统耦合，提升稳定性。例如将多变的Web层和稳定的数据层进行拆分，可以避免因为页面频繁发布导致的系统故障；将无线的接入层和Web接入层分离可以减少因为一个接入方引起的全局问题。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<span><strong>开放势不可挡</strong></span>\r\n</p>\r\n<p>\r\n	系统发展往往会带来平台化需求，例如微博的大多数服务除了满足PC访问，还要满足移动端及内外部平台，此时系统通常会抽象出一个接入层。\r\n</p>\r\n<p>\r\n	<b>接入层设计</b>\r\n</p>\r\n<p>\r\n	接入层一般分为：通信、协议和路由模块。\r\n</p>\r\n<p>\r\n	常用的通信方式有TCP、UDP和HTTP等，对开放平台等以外围接入为主的系统而言，HTTP因其简单方便是最合适的通信方式，而内部系统接入出于性能考量，可以直接用TCP或者UDP。\r\n</p>\r\n<p>\r\n	目前的主流协议有JSON、XML、Hessian等，对外部调用一般采用XML或者JSON，内部系统可以采用Hessian或其他自定义的二进制协议。\r\n</p>\r\n<p>\r\n	路由层是根据用户的信息将请求转发到后端服务层。LVS可看作是路由层，根据IP协议将不同来源的请求转发到不同IP \r\nServer，Nginx等具备反向代理的服务器也可以看作路由，根据不同URL转发到不同后端。我们经常会自定义路由层，通过用户调用的不同方法转发到\r\n不同Server，或者根据用户的特征，将用户路由到我们的灰度测试机。\r\n</p>\r\n<p>\r\n	<b>云平台概念</b>\r\n</p>\r\n<p>\r\n	具有了平台化的接入功能，系统可以方便地接入内部或者外部系统，此时就具有了“云”的特征，对各种公有云或私有云来说，系统的隔离和自动扩容都十分重要，虚拟化等技术在该类系统中有了充分应用，例如阿里云等云平台都大量使用了虚拟化。\r\n</p>\r\n<p>\r\n	<span style=\"color:#7f6000;\"><strong>稳定压倒一切</strong></span>\r\n</p>\r\n<p>\r\n	<b>代码稳定性</b>\r\n</p>\r\n<p>\r\n	稳定性是系统架构中一以贯之的内容，可以从图4中理解它的含义。\r\n</p>\r\n<p>\r\n	正常情况下，图4左边系统的性能明显优于右边，但从架构角度考虑，右图要好于左图，因为突起的毛刺使得系统的容量骤降，很容易引发雪崩。性能考量不仅是系统的最优性能或者平均性能，最差性能往往也是系统出现问题的原因。\r\n</p>\r\n<p>\r\n	<a href=\"http://cms.csdnimg.cn/article/201308/27/521c65a47b010.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201308/27/521c65a47b010_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	图4  两种稳定性对比<b><br />\r\n</b>\r\n</p>\r\n<p>\r\n	<b>容灾</b>\r\n</p>\r\n<p>\r\n	除了特别小型的系统，没有100%可用的系统。一般需要根据系统的情况制定合适的目标，该目标最通用的衡量维度是系统可用率。\r\n</p>\r\n<p>\r\n	系统可用率是可以提供服务的时间与总时间的比率，常用的系统可用率如表1所示。\r\n</p>\r\n<p style=\"text-align:center;\">\r\n	<a href=\"http://cms.csdnimg.cn/article/201308/27/521c6ee960363.jpg\" target=\"_blank\"><img src=\"http://cms.csdnimg.cn/article/201308/27/521c6ee960363_middle.jpg\" border=\"0\" /></a>\r\n</p>\r\n<p>\r\n	而对于灾难，我们有下面几个环节可以介入。\r\n</p>\r\n<ul>\r\n	<li>\r\n		预防：容量估算和接入方限流是常用的手段，以应对宕机或者突发流量。\r\n	</li>\r\n	<li>\r\n		发现：主要依赖监控和各种工具，可以分为系统、接口、公共组件、业务等方面。\r\n	</li>\r\n	<li>\r\n		解决：应对灾难需要我们事先做足功课，例如对外部的调用我们都有降级开关可以随时关闭；针对系统内部某个接口导致整个系统失去响应的场景，可以限制每个接口的并发量。\r\n	</li>\r\n</ul>\r\n<p>\r\n	系统容量的冗余和可水平扩展也是容灾的必备要求，无状态的系统对于系统扩容更友好。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '11', 'http://www.csdn.net/article/2013-08-27/2816716', '1', '2015-01-09 10:10:47');
INSERT INTO `yov_source` VALUES ('10042', '利用HTML5监控网站性能', 'HTML5 监控 网站 性能', '<span style=\"color:#000000;\">&nbsp;&nbsp;&nbsp;&nbsp;HTML5技术给Web带来很多新的元素，不仅使网站变得越来越美观，交互体验越来越接近完美，更使得很多曾经不可能完成的功能都可以实现。本文针对HTML5在网站性能监控方面带来的新特性，与大家分享携程旅行网在此方向的实践经验。</span><br />', '<p>\r\n	<span style=\"color:#3366ff;\"><strong>网站性能监控的现状</strong></span>\r\n</p>\r\n<p>\r\n	网站性能越来越被大众所关注，因为它直接影响用户体 \r\n验。大多数互联网公司在网站性能监控方面仅做到服务器性能监控和网络I/O监控，这样的背景催生了一些第三方做网站性能监控的公司，如基调、监控宝、GA\r\n 等。它们都有一个共同点——基本在全国主要城市铺设了监控点，定时主动访问页面来获取性能数据。然后定时对数据进行汇总，生成报表后提供给最终用户。<span id=\"more-14601\"></span>\r\n</p>\r\n<p>\r\n	<span style=\"color:#3366ff;\"><strong>第三方监控的优势与劣势</strong></span>\r\n</p>\r\n<p>\r\n	第三方监控有如下一些优势与劣势。\r\n</p>\r\n<p>\r\n	<strong>优势</strong>\r\n</p>\r\n<ul>\r\n	<li>\r\n		无需改动现有程序代码。第三方监控由于采用主动访问并采集的机制，只需要在用户管理界面配置相关页面的URL，就可以模拟用户访问的过程，因而完全不需要开发人员介入。\r\n	</li>\r\n	<li>\r\n		能采集到丰富的数据。因为模拟访问使用的浏览器由供应商部署，所以可以在客户端加入自定义插件或集成其他性能工具，能通过编程实现各类性能数据的采集。\r\n	</li>\r\n	<li>\r\n		数据量不大，汇总方便。这取决于供应商的监测点部署，但限于成本考虑，一般供应商只会在一二线城市部署，这样数据量汇总相对容易，分析复杂度较低。\r\n	</li>\r\n	<li>\r\n		出现问题时可重现和验证。因为能有丰富的数据，并且发生问题的监测点可控，我们就能很容易重现，方便排错。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<strong>劣势</strong>\r\n</p>\r\n<ul>\r\n	<li>\r\n		一次性投入大。监测点的部署需要大量设备支持，如果只是为一家公司提供服务，性价比不高，需要大量的资金。\r\n	</li>\r\n	<li>\r\n		难以完成不同浏览器下的测试。监测点无法顾及到所有用户使用的浏览器，对于不同的业务，客户群体不一致，浏览器的权重也不同，故监测点一般以IE和WebKit核心的浏览器为主。\r\n	</li>\r\n	<li>\r\n		响应有时间间隔。一般来说，监控页面不可能只有一个，会有很多，测试时为保证不互相干扰，特别是性能测试，会依次按队列方式进行，这会使得一个循环的时间很长，且需要等到所有监测点均完成测试后方可获得最终报告，不能及时反映当前的状态。\r\n	</li>\r\n	<li>\r\n		对于强依赖流程进入的页面难以监控。例如预订流程，需要POST大量信息，且有时效性，对于监测点来说具有一定的挑战。现在有些运营商可以提供一些简单的脚本功能，但对于日益复杂的业务需求，已无法满足。\r\n	</li>\r\n	<li>\r\n		监控点有限，不能覆盖整体用户群。监控点可以增加，但总是无法覆盖所有的网络环境，因此数据只能用于参考，并不能代表真实用户感受。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<span style=\"color:#3366ff;\"><strong>HTML5给我们带来了什么</strong></span>\r\n</p>\r\n<p>\r\n	HTML5中新加入的performance标准在IE9、最新的Firefox和Chrome中都已实现，精确度也达到了毫秒级别，通过详细时间点，我们能获得很多关键的指标项。\r\n</p>\r\n<p>\r\n	在此，我们简单看一下一些可用的指标（如图1）。其中有很多能帮助我们了解客户端性能和客户感受，例如：服务器端处理时间 + \r\n网络传输时间（较短）=responseStart–requestStart，客户端白屏时间=domInteractive– \r\nnavigationStart或responseStart等。\r\n</p>\r\n<div class=\"wp-caption aligncenter\">\r\n	<img title=\"图1 HTML5性能指标（图片引用自W3C官方网站）\" src=\"http://ipad-cms.csdn.net/cms/attachment/201301/50dd532644f2c.jpg\" alt=\"\" height=\"300\" width=\"502\" />\r\n	<p class=\"wp-caption-text\">\r\n		图1 HTML5性能指标（图片引用自W3C官方网站）\r\n	</p>\r\n</div>\r\n<p>\r\n	对于携程，我们最主要监控的指标有下面几种。\r\n</p>\r\n<p>\r\n	1. Total总时长：从页面跳转开始至页面onLoad；\r\n</p>\r\n<p>\r\n	2. DNS域名解析时长：从发起页面域名解析至解析完成；\r\n</p>\r\n<p>\r\n	3. Connect建立与服务器TCP连接时长：从发起TCP连接至三次握手完成；\r\n</p>\r\n<p>\r\n	4. Request请求时长：从发起页面请求至服务器端返回第一个字节；\r\n</p>\r\n<p>\r\n	5. Response响应时长：从接收服务器发回的第一字节至主页面下载完成；\r\n</p>\r\n<p>\r\n	6. DomReady页面Dom树解析：从页面跳转至页面Dom元素稳定。\r\n</p>\r\n<p>\r\n	接下来我们看看客户端数据采集的优势与劣势。\r\n</p>\r\n<p>\r\n	<strong>优势</strong>\r\n</p>\r\n<ul>\r\n	<li>\r\n		真实的客户访问性能数据。客户在访问网站的同时，可能还在做很多其他操作，并且可能还有很多其他的网络应用占用带宽，真实的用户数据对于了解客人感受具有代表性。\r\n	</li>\r\n	<li>\r\n		能区分浏览器、操作系统平台。时下，用户使用着各种各样的外壳浏览器和自定义浏览器，而普通的测试无法覆盖到如此复杂的网站浏览环境，因此这部分数据尤其珍贵。\r\n	</li>\r\n	<li>\r\n		覆盖范围广，且地域分布较均衡。相比第三方，我们能依靠JavaScript收集到各个地域的数据，甚至是海外，规模越大的网站，越有意义，能反映用户当地的网络状况，获知CDN加速效果等。\r\n	</li>\r\n	<li>\r\n		浏览器原生支持，精度高。毫秒级的精度对于网络DNS、Connect时间，以及浏览器初始化事件执行时间有很大的意义。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<strong>劣势</strong>\r\n</p>\r\n<ul>\r\n	<li>\r\n		对于旧版本浏览器无能为力。性能数据采集需要HTML5的支持，对于IE6、IE7、IE8，不支持这一标准是其最大硬伤，不过得益于HTML5的推进速度，随着高版本浏览器的发布，这个问题会逐渐淡化，并不需要我们操心。\r\n	</li>\r\n	<li>\r\n		需要部署少量JavaScript代码。类似于Google Analyze的代码加载机制，需要在每个页面的底部嵌入代码，工作量取决于网站架构，如果有统一的页脚，工作量其实很小。\r\n	</li>\r\n	<li>\r\n		无法重现。由于数据来自客户，当时的状态无法保留，很难模拟客户的环境，会对于排错有一定的影响。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<span style=\"color:#3366ff;\"><strong>携程网的最佳实践</strong></span>\r\n</p>\r\n<p>\r\n	携程在数据采集方面已累积了一定经验，主要实现思路与环境搭建如图2所示。\r\n</p>\r\n<div class=\"wp-caption aligncenter\">\r\n	<img title=\"图2 主要的实现思路与环境搭建\" src=\"http://ipad-cms.csdn.net/cms/attachment/201301/50dd537bb5908.jpg\" alt=\"\" height=\"671\" width=\"502\" />\r\n	<p class=\"wp-caption-text\">\r\n		图2 主要的实现思路与环境搭建\r\n	</p>\r\n</div>\r\n<p>\r\n	<strong>JavaScript 采集 / 数据回发</strong>\r\n</p>\r\n<p>\r\n	当 \r\n页面加载完成后，部署在页面中的JavaScript代码会从performance.timing对象中获取性能信息，然后把这些数据拼装成URL参 \r\n数，模拟发送一个图片请求到Collector服务器。模拟图片请求的方式和Google Analyze等相似，即new \r\nImage().src=。这种方式应用广泛，具有跨域、兼容性好等优点。\r\n</p>\r\n<p>\r\n	这种回传方式也有不足。众所周知，GET请求的参数长度是有限制的，这意味着我们必需小心处理回发数据的长度，对于超长的信息进行截断。如若不然，过长的信息有可能会被直接丢掉，不利于后续的处理与分析。\r\n</p>\r\n<p>\r\n	<strong>Nginx 接收 / 记录Log</strong>\r\n</p>\r\n<p>\r\n	Collector \r\n服务是由性能卓越的Nginx集群来担任的。为了最大程度降低客户端回传数据时的资源占用，Nginx采取只记日志，不做任何处理的办法。这样客户端回传\r\n数据可以快速完成并关闭连接，使之对用户体验的影响降至最小。而Nginx（包括Apache等）的常用访问日志格式中都含有GET请求的完整URL，我\r\n 们回传的性能数据就记录在URL的参数中。\r\n</p>\r\n<p>\r\n	为了优化Collector集群的负载能力，我们需要对Linux、Nginx等做相应的调优。\r\n</p>\r\n<p>\r\n	Linux \r\n方面，最大打开文件数是最关键的一个参数。由于常规Web服务器往往运行着PHP、JavaScript等动态脚本，每个请求还涉及数据库操作，它们的并\r\n发能力到1000就不错了。Linux服务器默认配置通常足以满足这个级别的并发数。但我们的场景比较特殊：我们几乎不需要做处理，只记下访问日志即可。\r\nNginx服务器以并发性能强著称，官方数据表示可以支持10万并发。在Linux系统中，每一个连接，对应的就有一个Socket文件，因此最大并发数\r\n 受制于系统对最大打开文件数的限制。除此之外，还有一些网络相关的内核参数也根据应用场景进行了优化。\r\n</p>\r\n<p>\r\n	Nginx方面，去除了不需要的功能，保留了HttpEmptyGifModule。这个模块对到来的请求仅返回一个1×1像素的GIF图片。由于图片数据只有几个字节，直接保持在内存中，所以它可以以极快的速度对客户端请求做出响应。\r\n</p>\r\n<p>\r\n	location = /_.gif { empty_gif;}\r\n</p>\r\n<p>\r\n	如上配置的效果是，访问http://yourdomain/_.gif将得到一个只有一像素的GIF图片，其响应速度非常快。\r\n</p>\r\n<p>\r\n	<strong>读取 Log / 发送至队列</strong>\r\n</p>\r\n<p>\r\n	一 \r\n个专门负责日志传送的Agent会通过类似tail的机制跟踪日志内容，实时地将新增日志条目发送至消息队列，以备后续处理。这部分的意义在于：第一，它\r\n将集群中分散的日志统一发送到了一处，是一个日志的聚合过程；第二，将分析程序与Nginx服务器解耦开来，最大化保障Nginx集群的高可用性，也最大\r\n 化保障了RAW Data的可用性。\r\n</p>\r\n<p>\r\n	<strong>从队列中取出 / Storm集群实时分析</strong>\r\n</p>\r\n<p>\r\n	后端数据分析程序采用了分布式实时流数据处理框架Storm。基于该框架进行处理，一来面对搜集到的海量数据，可以横向扩展处理能力，二来实时流式的运算延迟很小，可以实时获取页面性能信息，使及时的预警成为可能。\r\n</p>\r\n<p>\r\n	Storm把数据处理抽象成由一个个逻辑单元组成的拓扑结构（如图3）。每个逻辑单元由运算和输入输出组成，按照Storm的术语，这些逻辑单元有两大类：Spout和Bolt，其中Spout是数据的源头。\r\n</p>\r\n<div class=\"wp-caption aligncenter\">\r\n	<img title=\"图3 Storm运算拓扑结构示意图（引用自Storm官方网站）\" src=\"http://ipad-cms.csdn.net/cms/attachment/201301/50dd541c78dfe.jpg\" alt=\"\" height=\"331\" width=\"502\" />\r\n	<p class=\"wp-caption-text\">\r\n		图3 Storm运算拓扑结构示意图（引用自Storm官方网站）\r\n	</p>\r\n</div>\r\n<p>\r\n	这些拓扑结构，将被分散到集群中的各个物理节点上，从而进行分布式的高效运算，可以迅速处理大量数据。\r\n</p>\r\n<p>\r\n	我们在Storm集群上所做的事情，包括浏览器、操作系统、地理位置等的分析，分析后的数据，直接支持按地区、运营商、系统平台、浏览器类型，以及指定具体的页面等条件任意查询和报表。\r\n</p>\r\n<p>\r\n	<strong>产生实时报表 / 预警邮件 / 预警短信</strong>\r\n</p>\r\n<p>\r\n	借助于Storm框架的强大实时处理能力，对日志的分析可以迅速产生实时报表。此外通过与历史数据的参照对比，还可以就性能数据中的异常信息给予预警，包括发送预警邮件和预警短信等。\r\n</p>\r\n<p>\r\n	实时报表直接在内存中处理，借助Storm的DRPC（Distributed Remote Procedure Call）（如图4），也即分布式远过程调用，可以把缓存在各个运算节点中的最近数据直接聚合起来生成报表。\r\n</p>\r\n<div class=\"wp-caption aligncenter\">\r\n	<img title=\"图4 Storm Distributed RPC示意图（引用自Storm官方网站）\" src=\"http://ipad-cms.csdn.net/cms/attachment/201301/50dd5462d168d.jpg\" alt=\"\" height=\"303\" width=\"502\" />\r\n	<p class=\"wp-caption-text\">\r\n		图4 Storm Distributed RPC示意图（引用自Storm官方网站）\r\n	</p>\r\n</div>\r\n<p>\r\n	通过一些规则判断，我们对实时数据流进行一些预警操作。预警事件触发后，相关信息作为一个事件发往报警系统。报警系统根据配置，向相关人员发送预警邮件或短信。\r\n</p>\r\n<p>\r\n	<strong>日、周、季、年汇总</strong>\r\n</p>\r\n<p>\r\n	在Storm输出数据的基础上，定时按日、周、季、年进行汇总。对于汇总数据可以方便地进行历史数据查询，为实时预警、长期性能评估等提供参考。同时以不同粒度进行旧数据的汇总，可以逐步丢弃过时的庞大明细数据，减轻数据库的压力。\r\n</p>\r\n<p>\r\n	<strong>还有什么我们可以做的？</strong>\r\n</p>\r\n<p>\r\n	整个环境搭建需要不少的人力物力，很多人可能会对其价值怀疑。在这里，我想告诉大家，客户端的数据收集是非常值得投入的。除了以上提到的页面访问的时间点数据采集外，其实我们还有很多地方可以复用。\r\n</p>\r\n<p>\r\n	例如客户端的JavaScript错误采集，使用try \r\ncatch和onerror的组合，收集客户端的错误信息。在携程，我们也把这类数据归为网站的性能数据，JavaScript错误会直接影响用户对网站\r\n 的印象，同时会影响用户在网站的消费，直接关系到利润，不可忽视。\r\n</p>\r\n<p>\r\n	又例如，通过用户行为数据采集，可以获得页面的基本访问信息。用户访问流、用户在页面上的所有操作，都可以帮助改进现有产品，如果条件允许，配合A/B测试，对于新产品的研发也能提供很多有价值的参考。\r\n</p>\r\n<p>\r\n	因此，大家可以凭借想象力，扩展思路，获得更多有意义的信息，完成更多有意义的研究。\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '3', 'http://www.programmer.com.cn/14601/', '1', '2015-01-09 10:16:42');
INSERT INTO `yov_source` VALUES ('10043', '超过78%的PHP网站存在漏洞 Perl最安全', 'PHP网站 漏洞 Perl 安全', 'Google的开发者大使Anthony Ferrara分析了PHP网站安装的版本号，比较了安全版本和不安全版本的安装比例，发现只有21 71%的网站是安全的。', '<p>\r\n	<strong>Google的开发者大使Anthony Ferrara分析了PHP网站安装的版本号，比较了安全版本和不安全版本的安装比例，&nbsp;发现只有21.71%的网站是安全的&nbsp;。&nbsp;这个数字其实还是乐观的估计，没有考虑没有维护的发行版支持版本。</strong>\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	PHP的安全版本包括：5.6.4、5.5.20和5.4.36；而Linux发行版维护的版本包括：5.4.4，5.3.3，5.5.12，5.5.9....等等。相比之下，Perl和Python网站的安全比例要高得多。\r\n</p>\r\n<p style=\"font-family:SimSun;font-size:14px;background-color:#FFFFFF;\">\r\n	<br />\r\n</p>\r\n<table class=\"data\" align=\"center\" cellspacing=\"1\">\r\n	<tbody>\r\n		<tr class=\"firstRow\">\r\n			<th style=\"background:#EEEEEE;\">\r\n				Platform\r\n			</th>\r\n			<th style=\"background:#EEEEEE;\">\r\n				% Installs That Are Secure\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				PERL\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				82.27%\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				Python\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				77.59%\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				Nginx\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				64.48%\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				Apache\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				61.96%\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				WordPress\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				60.45%\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				Drupal\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				45.23%\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td style=\"background:#FFFFFF;\">\r\n				PHP\r\n			</td>\r\n			<td style=\"background:#FFFFFF;\">\r\n				25.94%<br />\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>', '', '', '', '', '', '', '1', '4', 'http://article.phpchina.com/i/2015010913552.html', '1', '2015-01-27 16:19:47');
INSERT INTO `yov_source` VALUES ('10044', 'MySQL显示表字段及注释等信息', 'MySQL 字段 注释', 'MySQL显示表字段及注释等信息<br />', 'SHOW DATABASES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出 MySQL Server 数据库。<br />\r\nSHOW TABLES [FROM db_name]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出数据库数据表。<br />\r\nSHOW TABLE STATUS [FROM db_name]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出数据表及表状态信息。<br />\r\nSHOW COLUMNS FROM tbl_name [FROM db_name]&nbsp;&nbsp;&nbsp;&nbsp; //列出资料表字段<br />\r\nSHOW FIELDS FROM tbl_name [FROM db_name]，DESCRIBE tbl_name [col_name]。<br />\r\nSHOW FULL COLUMNS FROM tbl_name [FROM db_name]//列出字段及详情&nbsp; www.2cto.com &nbsp;<br />\r\nSHOW FULL FIELDS FROM tbl_name [FROM db_name] //列出字段完整属性<br />\r\nSHOW INDEX FROM tbl_name [FROM db_name]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出表索引。<br />\r\nSHOW STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出 DB Server 状态。<br />\r\nSHOW VARIABLES&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出 MySQL 系统环境变量。<br />\r\nSHOW PROCESSLIST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出执行命令。<br />\r\nSHOW GRANTS FOR user&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //列出某用户权限', '', '', '', '', '', '', '1', '5', 'http://www.2cto.com/database/201208/151381.html', '1', '2015-03-02 13:06:41');
INSERT INTO `yov_source` VALUES ('10045', 'centos samba 权限 selinux权限配置', 'centos samba 权限 selinux', 'http://www.cnblogs.com/xiaoluo501395377/archive/2013/05/26/3100444.html(参考)<br />', '<p>\r\n	SELINUX 策略\r\n</p>\r\n<p>\r\n	配置好samba后, 输入地址,提示需要权限 ,但目录明明是777权限\r\n</p>\r\n<p>\r\n	网上有关掉防火墙的办法,\r\n</p>\r\n<p>\r\n	#setenforce 0 &nbsp; &nbsp;\r\n</p>\r\n<p>\r\n	临时关掉防火墙是个办法,可是系统中既然有这个功能,那有一定有它的作用\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	搜索知,selinux是个安全策略,研究一下得知\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	[root@tom share_user]# ls -Z -d /home/share_user/ &nbsp; &nbsp; ###查看目录的selinux策略信息\r\n</p>\r\n<p>\r\n	drwxrwxrwx. share_user share_user unconfined_u:object_r:<span style=\"color:#ff00ff;\">home_root_t</span>:s0 /home/share_user/ &nbsp; &nbsp; ###home_root_t,可能是因为我用root用户创建的结果...\r\n</p>\r\n<p>\r\n	&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\r\n</p>\r\n<p>\r\n	###既然想让samba有权限,查看一下由samba自动创建的文件的策略信息\r\n</p>\r\n<p>\r\n	[root@tom share_user]# ls -Z /etc/samba/smb.conf<br />\r\n-rw-r--r--. root root system_u:object_r:<span style=\"color:#ff00ff;\">samba_etc_t</span>:s0 /etc/samba/smb.conf &nbsp;###samba_etc_t,这个进程创建之...猜想....\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	####下面就把/home/share_user目录的策略,改变成samba_etc_t....\r\n</p>\r\n<p>\r\n	chcon --reference=/etc/samba/smb.conf -R /home/share_user/ &nbsp; ####引用smb.conf的策略信息,赋到/home/share_user目录下,....\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	######再来看一下/home/share_user的策略信息...\r\n</p>\r\n<p>\r\n	[root@tom share_user]# ls -Z -d /home/share_user/<br />\r\ndrwxrwxrwx. share_user share_user system_u:object_r:<span style=\"color:#ff00ff;\">samba_etc_t</span>:s0 /home/share_user/ &nbsp; &nbsp;######此时/home/share_user的策略已经和samba的配置文件一样了....\r\n</p>\r\n<p>\r\n	这就好像告诉了系统,/home/share_user这个目录跟 samba的服务有关系, 可以放心 ~~~~~~~~~~~\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	在window下,开始运行处 输入 ip,看到了共享的文件,拖文件进去,应该不会有错误提示了..~~~~\r\n</p>', 'index.html', '', '', '', '', '', '1', '12', 'http://www.cnblogs.com/flex_fly/p/3670763.html', '1', '2015-03-02 13:12:41');
INSERT INTO `yov_source` VALUES ('10046', '访问Samba共享的文件很慢很慢的问题', 'Samba 共享 很慢', '由于公司新搬了地址,网络全部重新搭建.但服务器都是直接从旧地址搬到新地址,没有作任何更改.<br />\r\n问题来了,公司同事反映最近访问公共的共享的文件夹速度非常慢,特别是第一次,差点就忍受不了了!<br />\r\n网上找了一下资料,发现有网友(没找着那篇文章网址了)讲是因为network 和 hosts文件中的主机名不一样.', '由于公司新搬了地址,网络全部重新搭建.但服务器都是直接从旧地址搬到新地址,没有作任何更改.<br />\r\n<br />\r\n问题来了,公司同事反映最近访问公共的共享的文件夹速度非常慢,特别是第一次,差点就忍受不了了!<br />\r\n<br />\r\n网上找了一下资料,发现有网友(没找着那篇文章网址了)讲是因为network 和 hosts文件中的主机名不一样.<br />\r\n<br />\r\n查了一下自己的服务器配置,果然两个文件的主机名不一样,hosts中的主机名是默认的.<br />\r\n<br />\r\n[root@server ~]# cat /etc/sysconfig/network<br />\r\nNETWORKING=yes<br />\r\nNETWORKING_IPV6=no<br />\r\nHOSTNAME=server<br />\r\n<br />\r\n[root@server ~]# cat /etc/hosts<br />\r\n# Do not remove the following line, or various programs<br />\r\n# that require network functionality will fail.<br />\r\n127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; localhost.localdomain localhost<br />\r\n::1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; localhost6.localdomain6 localhost6<br />\r\n<br />\r\n将hosts文件中的主机名也改成和network中的主机名一样(如下),哇,那速度是相当地快!<br />\r\n<br />\r\n[root@server ~]# cat /etc/hosts<br />\r\n# Do not remove the following line, or various programs<br />\r\n# that require network functionality will fail.<br />\r\n#127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; localhost.localdomain localhost<br />\r\n127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server<br />\r\n::1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; localhost6.localdomain6 localhost6', '', '', '', '', '', '', '1', '12', '', '1', '2015-03-31 14:59:20');
INSERT INTO `yov_source` VALUES ('10047', 'Linux上传下载', 'Linux 上传 下载', 'Linux上传下载指令也有不少，这里介绍使用SecureCRT时的指令，在这里会有关默认路径的设置及使用方式。上传及下载的使用会涉及Linux到pc和pc到Linux这两个方向，下面会有具体的介绍。', '<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	先设定SecureCRT上传下载文件保存路径\r\n</p>\r\n<p>\r\n	options -&gt; session -&gt; Xmodem/Zmodem -&gt; upload / download -&gt; ok\r\n</p>\r\n<p>\r\n	然后确认一下系统中是否有 sz rz 这两个命令(FreeBSD下命令是 lrz、lsz)\r\n</p>\r\n<p>\r\n	如果有就跳过这里，如果没有，则安装lrzsz 在网上可以很容易找到，比如说http://download.chinaunix.net/down.php?id=12772&amp;ResourceID=6293&amp;site=1\r\n</p>\r\n<p>\r\n	下载之后是常规安装方法，解压，configure;make;make install\r\n</p>\r\n<p>\r\n	我下载的是src.rpm包，具体安装方法可以参考这里如何安装.src.rpm软件包\r\n</p>\r\n<p>\r\n	1、将linux上文件传到PC机上\r\n</p>\r\n<p>\r\n	shell&gt; sz /etc/rc.local\r\n</p>\r\n<p>\r\n	例：\r\n</p>\r\n<p>\r\n	[root@test root]# sz /etc/rc.local\r\n</p>\r\n<p>\r\n	rz\r\n</p>\r\n<p>\r\n	Starting zmodem transfer. Press Ctrl+C to cancel.\r\n</p>\r\n<p>\r\n	Transferring rc.local...\r\n</p>\r\n<p>\r\n	100% 464 bytes 464 bytes/s 00:00:01 0 Errors\r\n</p>\r\n<p>\r\n	2、将PC机上文件传到linux上\r\n</p>\r\n<p>\r\n	shell&gt; rz\r\n</p>\r\n选择要传送的文件，确定。', '', '', '', '', '', '', '1', '12', '', '1', '2015-04-09 10:50:51');
INSERT INTO `yov_source` VALUES ('10048', 'linux之间文件传输(转)', 'linux 文件传输', '<p>\r\n	linux的scp命令\r\n</p>\r\nlinux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录；<br />', '<div id=\"cnblogs_post_body\">\r\n	<p>\r\n		linux的scp命令\r\n	</p>\r\n	<p>\r\n		linux 的 scp 命令 可以 在 linux 之间复制 文件 和 目录；<br />\r\n<br />\r\n==================<br />\r\nscp 命令<br />\r\n==================<br />\r\nscp 可以在 2个 linux 主机间复制文件；<br />\r\n<br />\r\n命令基本格式：<br />\r\n&nbsp;\r\n	</p>\r\n	<div id=\"sina_keyword_ad_area2\" class=\"articalContent \">\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp [可选参数] file_source file_target<br />\r\n<br />\r\n======<br />\r\n从 本地 复制到 远程<br />\r\n======<br />\r\n* 复制文件：<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 命令格式：<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp local_file remote_username@remote_ip:remote_folder<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或者<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp local_file remote_username@remote_ip:remote_file<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或者<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp local_file remote_ip:remote_folder<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或者<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp local_file remote_ip:remote_file<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第1,2个指定了用户名，命令执行后需要再输入密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名；<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名；<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 例子：<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp /home/space/music/1.mp3\r\nroot@www.cumt.edu.cn:/home/root/others/music<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp /home/space/music/1.mp3\r\nroot@www.cumt.edu.cn:/home/root/others/music/001.mp3<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp /home/space/music/1.mp3\r\nwww.cumt.edu.cn:/home/root/others/music<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp /home/space/music/1.mp3\r\nwww.cumt.edu.cn:/home/root/others/music/001.mp3<br />\r\n<br />\r\n* 复制目录：<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 命令格式：<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp -r local_folder remote_username@remote_ip:remote_folder<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或者<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp -r local_folder remote_ip:remote_folder<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第1个指定了用户名，命令执行后需要再输入密码；<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第2个没有指定用户名，命令执行后需要输入用户名和密码；<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 例子：<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp -r /home/space/music/\r\nroot@www.cumt.edu.cn:/home/root/others/<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scp -r /home/space/music/ www.cumt.edu.cn:/home/root/others/<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面 命令 将 本地 music 目录 复制 到 远程 others 目录下，即复制后有 远程 有 ../others/music/\r\n目录\r\n	</div>\r\n</div>\r\n<div id=\"MySignature\">\r\n	当你幸福的时候，我不在，当我幸福的时候，你也不在\r\n</div>\r\n<br />', '', '', '', '', '', '', '1', '12', '', '1', '2015-04-09 10:53:42');
INSERT INTO `yov_source` VALUES ('10049', '关于mongodb ,redis,memcache之间见不乱理还乱的关系和作用', 'mongodb redis memcache', '1、 Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。<br />\r\n2、 数据类型--Memcache在添加数据时就要指定数据的字节长度', '1、 Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。<br />\r\n2、 数据类型--Memcache在添加数据时就要指定数据的字节长度，例如：<br />\r\n&nbsp; set key3 0 0 8<br />\r\n&nbsp; lxsymcto<br />\r\n&nbsp; STORED<br />\r\n而redis不需要，如：redis 127.0.0.1:6379&gt;set key2 \"lxsymblog\"<br />\r\n&nbsp; OK<br />\r\n&nbsp; redis 127.0.0.1:6379&gt;get key2<br />\r\n&nbsp; \"lxsymblog\"<br />\r\n3、虚拟内存--Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘<br />\r\n4、过期策略--memcache在set时就指定，例如set key1 0 0 8,即永不过期。Redis可以通过例如expire 设定，例如expire name 10<br />\r\n5、分布式--设定memcache集群，利用magent做一主多从;redis可以做一主多从。都可以一主一从<br />\r\n6、存储数据安全--memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）<br />\r\n7、灾难恢复--memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复<br />\r\n<br />\r\n<p>\r\n	从以下几个维度，对redis、memcache、mongoDB 做了对比，欢迎拍砖\r\n</p>\r\n<p>\r\n	1、性能<br />\r\n<br />\r\n都比较高，性能对我们来说应该都不是瓶颈<br />\r\n<br />\r\n总体来讲，TPS方面redis和memcache差不多，要大于mongodb<br />\r\n<br />\r\n2、操作的便利性<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcache数据结构单一<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redis丰富一些，数据操作方面，redis更好一些，较少的网络IO次数<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mongodb支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富<br />\r\n<br />\r\n3、内存空间的大小和数据量的大小<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redis在2.0版本后增加了自己的VM特性，突破物理内存的限制；可以对key value设置过期时间（类似memcache）<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcache可以修改最大可用内存,采用LRU算法<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mongoDB适合大数据量的存储，依赖操作系统VM做内存管理，吃内存也比较厉害，服务不要和别的服务在一起<br />\r\n<br />\r\n4、可用性（单点问题）<br />\r\n<br />\r\n对于单点问题，<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redis，依赖客户端来实现分布式读写；主从复制时，每次从节点重新连接主节点都要依赖整个快照,无增量复制，因性能和效率问题，<br />\r\n<br />\r\n所以单点问题比较复杂；不支持自动sharding,需要依赖程序设定一致hash 机制。<br />\r\n<br />\r\n一种替代方案是，不用redis本身的复制机制，采用自己做主动复制（多份存储），或者改成增量复制的方式（需要自己实现），一致性问题和性能的权衡<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Memcache本身没有数据冗余机制，也没必要；对于故障预防，采用依赖成熟的hash或者环状的算法，解决单点故障引起的抖动问题。<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mongoDB支持master-slave,replicaset（内部采用paxos选举算法，自动故障恢复）,auto sharding机制，对客户端屏蔽了故障转移和切分机制。<br />\r\n<br />\r\n5、可靠性（持久化）<br />\r\n<br />\r\n对于数据持久化和数据恢复，<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redis支持（快照、AOF）：依赖快照进行持久化，aof增强了可靠性的同时，对性能有所影响<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcache不支持，通常用在做缓存,提升性能；<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MongoDB从1.8版本开始采用binlog方式支持持久化的可靠性<br />\r\n<br />\r\n6、数据一致性（事务支持）<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Memcache 在并发场景下，用cas保证一致性<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redis事务支持比较弱，只能保证事务中的每个操作连续执行<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mongoDB不支持事务<br />\r\n<br />\r\n7、数据分析<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mongoDB内置了数据分析的功能(mapreduce),其他不支持<br />\r\n<br />\r\n8、应用场景<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redis：数据量较小的更性能操作和运算上<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcache：用于在动态系统中减少数据库负载，提升性能;做缓存，提高性能（适合读多写少，对于数据量比较大，可以采用sharding）<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MongoDB:主要解决海量数据的访问效率问题<br />\r\n<br />\r\n最近一直在研究key-value的存储，简单记一下感受。。一些memcache和redis的安装和使用就不赘述啦。只简单说说两种方案的差别。一些感想和测试结果未必足够能说明问题，有什么不妥请大家指正。因为这两天在学习的过程发现一直在更正自己认识的缺陷，每天都会否定前一天的想法。。好了，费话少说。<br />\r\n<br />\r\n经过对50万个数据存储的研究发现：<br />\r\n<br />\r\n每秒单条指令执行量 <br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; memcache&nbsp; 约３万次<br />\r\n<br />\r\nredis&nbsp;&nbsp;&nbsp;&nbsp; 约１万次<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp; 而且，memcache的一大优点是可以通过一个函数直接设置过期时间，而redis需要两个函数才可以既设置了键值对又设置过期时间，也就是redis在这点上效率变成了原来的一半，即5千次，这对于大部分需求来说，有点太慢了。<br />\r\n<br />\r\nmemcache的测试代码如下：\r\n</p>\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\n$mem = new Memcache;\r\n\r\n$mem-&gt;connect(\"127.0.0.1\", 11211);\r\n\r\n$time_start = microtime_float();\r\n\r\n//保存数据\r\n\r\nfor($i = 0; $i &lt; 100000; $i ++){\r\n\r\n    $mem-&gt;set(\"key$i\",$i,0,3);\r\n\r\n}\r\n\r\n$time_end = microtime_float();\r\n\r\n$run_time = $time_end - $time_start;\r\n\r\necho \"用时 $run_time 秒\r\n\";\r\n\r\nfunction microtime_float()\r\n\r\n{\r\n\r\n    list($usec, $sec) = explode(\" \", microtime());\r\n\r\n    return ((float)$usec + (float)$sec);\r\n\r\n}\r\n\r\n?&gt;</pre>\r\n<p>\r\n	redis的测试代码如下：redis1.php 此代码大概需要１０秒左右\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\n//连接\r\n\r\n$redis = new Redis();\r\n\r\n$redis-&gt;connect(\"127.0.0.1\", 6379);\r\n\r\n$time_start = microtime_float();\r\n\r\n//保存数据\r\n\r\nfor($i = 0; $i &lt; 100000; $i ++){\r\n\r\n    $redis-&gt;sadd(\"key$i\",$i);\r\n\r\n}\r\n\r\n$time_end = microtime_float();\r\n\r\n$run_time = $time_end - $time_start;\r\n\r\necho \"用时 $run_time 秒\r\n\";\r\n\r\n//关闭连接\r\n\r\n$redis-&gt;close();\r\n\r\n?&gt;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	如果需要在设置键值的同时设置过期时间，大概执行需要２０秒左右，测试代码如下:redis2.php\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\n//连接\r\n\r\n$redis = new Redis();\r\n\r\n$redis-&gt;connect(\"127.0.0.1\", 6379);\r\n\r\n$time_start = microtime_float();\r\n\r\n//保存数据\r\n\r\nfor($i = 0; $i &lt; 100000; $i ++){\r\n\r\n    $redis-&gt;sadd(\"key$i\",$i);\r\n\r\n    $redis-&gt;expire(\"key$i\",3);\r\n\r\n}\r\n\r\n$time_end = microtime_float();\r\n\r\n$run_time = $time_end - $time_start;\r\n\r\necho \"用时 $run_time 秒\r\n\";\r\n\r\n//关闭连接\r\n\r\n$redis-&gt;close();\r\n\r\n\r\n?&gt;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	后来在网上发现redis有一个神奇的功能叫事务，通过multi原子性的将一段代码块依次执行，从而达到一个完整功能模块的执行。不幸的是，通过测试发现，采用multi方式执行代码时并没有减少请求次数，相反在执行multi指令和exec指令时都要发送请求，从而将运行时间变成了原来的四倍，即四条指令的运行时间。测试代码如下：redis3.php\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\n//连接\r\n\r\n$redis = new Redis();\r\n\r\n$redis-&gt;connect(\"127.0.0.1\", 6379);\r\n\r\n$time_start = microtime_float();\r\n\r\n//保存数据\r\n\r\nfor($i = 0; $i &lt; 100000; $i ++){\r\n\r\n    $redis-&gt;multi();\r\n\r\n    $redis-&gt;sadd(\"key$i\",$i);\r\n\r\n    $redis-&gt;expire(\"key$i\",3);\r\n\r\n    $redis-&gt;exec();\r\n\r\n}\r\n\r\n$time_end = microtime_float();\r\n\r\n$run_time = $time_end - $time_start;\r\n\r\necho \"用时 $run_time 秒\r\n\";\r\n\r\n//关闭连接\r\n\r\n$redis-&gt;close();\r\n\r\n?&gt;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	问题出现了瓶颈，有好多公司需要海量数据处理，每秒５０００次远不能满足需求，然后由于redis主从服务器上比memcache有更大的优势，为了将来数据的着想，不得不使用redis，这时候出现了一种新的方式，即phpredis提供的pipline功能，该功能能够真正的将几条代码封装成一次请求，从而大大提高了运行速度，５０万次的数据执行只有了５８秒。测试代码如下：redis4.php\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-php\">&lt;?php\r\n\r\n//连接\r\n\r\n$redis = new Redis();\r\n\r\n$redis-&gt;connect(\"127.0.0.1\", 6379);\r\n\r\n$time_start = microtime_float();\r\n\r\n//保存数据\r\n\r\nfor($i = 0; $i &lt; 100000; $i ++){\r\n\r\n　　$pipe=$redis-&gt;pipeline();\r\n\r\n    $pipe-&gt;sadd(\"key$i\",$i);\r\n\r\n    $pipe-&gt;expire(\"key$i\",3);\r\n\r\n    $replies=$pipe-&gt;execute();\r\n\r\n}\r\n\r\n$time_end = microtime_float();\r\n\r\n$run_time = $time_end - $time_start;\r\n\r\necho \"用时 $run_time 秒\n\";\r\n\r\n//关闭连接\r\n\r\n$redis-&gt;close();\r\n\r\n\r\n?&gt;</pre>\r\n</p>\r\n<p>\r\n	运用这个操作可以非常完美的将赋值操作和设置过期时间操作打包到一个请求去执行，大大提高了运行效率。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	redis安装：http://mwt198668.blog.163.com/blog/static/48803692201132141755962/<br />\r\n<br />\r\nmemcache安装：http://blog.csdn.net/barrydiu/article/details/3936270<br />\r\n<br />\r\nredis设置主从服务器：http://www.jzxue.com/fuwuqi/fuwuqijiqunyuanquan/201104/15-7117.html<br />\r\n<br />\r\nmemcache设置主从服务器：http://www.cnblogs.com/yuanermen/archive/2011/05/19/2051153.html\r\n</p>', 'index.html', '', '', '', '', '', '1', '12', 'http://blog.163.com/weiwenjuan_bj/blog/static/14035033620135185150979/?latestBlog', '1', '2015-04-16 14:36:52');
INSERT INTO `yov_source` VALUES ('10050', 'Apache Rewrite 规则详解', 'Apache Rewrite 规则', 'Rewirte\r\n主要的功能就是实现URL的跳转，它的正则表达式是基于Perl语言。可基于服务器级的(httpd.conf)和目录级的 \r\n(.htaccess)两种方式。如果要想用到rewrite模块，必须先安装或加载rewrite模块。方法有两种一种是编译apache的时候就直接\r\n 安装rewrite模块，别一种是编译apache时以DSO模式安装apache,然后再利用源码和apxs来安装rewrite模块。', '<div id=\"cnblogs_post_body\">\r\n	<div class=\"mypost\">\r\n		<p>\r\n			<strong><span>1、Rewrite规则简介：</span></strong>\r\n		</p>\r\n		<p>\r\n			Rewirte\r\n主要的功能就是实现URL的跳转，它的正则表达式是基于Perl语言。可基于服务器级的(httpd.conf)和目录级的 \r\n(.htaccess)两种方式。如果要想用到rewrite模块，必须先安装或加载rewrite模块。方法有两种一种是编译apache的时候就直接\r\n 安装rewrite模块，别一种是编译apache时以DSO模式安装apache,然后再利用源码和apxs来安装rewrite模块。\r\n		</p>\r\n		<p>\r\n			基于服务器级的(httpd.conf)有两种方法<span id=\"more-71\"></span>，\r\n一种是在httpd.conf的全局下 直接利用RewriteEngine \r\non来打开rewrite功能;另一种是在局部里利用RewriteEngine \r\non来打开rewrite功能,下面将会举例说明，需要注意的是,必须在每个virtualhost里用RewriteEngine \r\non来打开rewrite功能。否则virtualhost里没有RewriteEngine on它里面的规则也不会生效。\r\n		</p>\r\n		<p>\r\n			基于目录级的(.htaccess),要注意一点那就是必须打开此目录的FollowSymLinks属性且在.htaccess里要声明RewriteEngine on。\r\n		</p>\r\n		<p>\r\n			<strong><span>2、举例说明：</span></strong>\r\n		</p>\r\n		<p>\r\n			下\r\n面是在一个虚拟主机里定义的规则。功能是把client请求的主机前缀不是www.colorme.com和203.81.23.202都跳转到 \r\n主机前缀为http://www.colorme.com.cn，避免当用户在地址栏写入http://colorme.com.cn时不能以会员方式登\r\n 录网站。\r\n		</p>\r\n		<p>\r\n			NameVirtualHost 192.168.100.8:80\r\n		</p>\r\n		<p>\r\n			ServerAdmin webmaster@colorme.com.cn<br />\r\nDocumentRoot “/web/webapp”<br />\r\nServerName www.colorme.com.cn<br />\r\nServerName colorme.com.cn<br />\r\nRewriteEngine on #打开rewirte功能<br />\r\nRewriteCond %{HTTP_HOST} !^www.colorme.com.cn [NC] #声明Client请求的主机中前缀不是www.colorme.com.cn,[NC]的意思是忽略大小写<br />\r\nRewriteCond %{HTTP_HOST} !^203.81.23.202 [NC] #声明Client请求的主机中前缀不是203.81.23.202,[NC]的意思是忽略大小写<br />\r\nRewriteCond %{HTTP_HOST} !^$ #声明Client请求的主机中前缀不为空,[NC]的意思是忽略大小写<br />\r\nRewriteRule ^/(.*) http://www.colorme.com.cn/ [L]<br />\r\n#含义是如果Client请求的主机中的前缀符合上述条件，则直接进行跳转到http://www.colorme.com.cn/,[L]意味着立即停\r\n止重写操作，并不再应用其他重写规则。这里的.*是指匹配所有URL中不包含换行字符，()括号的功能是把所有的字符做一个标记，以便于后面的应用.就是\r\n 引用前面里的(.*)字符。<br />\r\n例二.将输入 folio.test.com 的域名时跳转到profile.test.com\r\n		</p>\r\n		<p>\r\n			listen 8080<br />\r\nNameVirtualHost 10.122.89.106:8080<br />\r\nServerAdmin webmaster@colorme.com.cn<br />\r\nDocumentRoot “/usr/local/www/apache22/data1/”<br />\r\nServerName profile.test.com<br />\r\nRewriteEngine on<br />\r\nRewriteCond %{HTTP_HOST} ^folio.test.com [NC]<br />\r\nRewriteRule ^/(.*) http://profile.test.com/ [L]\r\n		</p>\r\n		<p>\r\n			<strong><span>3.Apache mod_rewrite规则重写的标志一览</span></strong>\r\n		</p>\r\n		<p>\r\n			1) R[=code](force redirect) 强制外部重定向<br />\r\n强制在替代字符串加上http://thishost[:thisport]/前缀重定向到外部的URL.如果code不指定，将用缺省的302 HTTP状态码。<br />\r\n2) F(force URL to be forbidden)禁用URL,返回403HTTP状态码。<br />\r\n3) G(force URL to be gone) 强制URL为GONE，返回410HTTP状态码。<br />\r\n4) P(force proxy) 强制使用代理转发。<br />\r\n5) L(last rule) 表明当前规则是最后一条规则，停止分析以后规则的重写。<br />\r\n6) N(next round) 重新从第一条规则开始运行重写过程。<br />\r\n7) C(chained with next rule) 与下一条规则关联\r\n		</p>\r\n		<p>\r\n			如果规则匹配则正常处理，该标志无效，如果不匹配，那么下面所有关联的规则都跳过。<br />\r\n8) T=MIME-type(force MIME type) 强制MIME类型<br />\r\n9) NS (used only if no internal sub-request) 只用于不是内部子请求<br />\r\n10) NC(no case) 不区分大小写<br />\r\n11) QSA(query string append) 追加请求字符串<br />\r\n12) NE(no URI escaping of output) 不在输出转义特殊字符<br />\r\n例如：RewriteRule /foo/(.*) /bar?arg=P1\\%3d$1 [R,NE] 将能正确的将/foo/zoo转换成/bar?arg=P1=zed<br />\r\n13) PT(pass through to next handler) 传递给下一个处理<br />\r\n例如：<br />\r\n&nbsp;&nbsp; RewriteRule ^/abc(.*) /def$1 [PT] # 将会交给/def规则处理<br />\r\n&nbsp;&nbsp; Alias /def /ghi<br />\r\n14) S=num(skip next rule(s)) 跳过num条规则<br />\r\n15) E=VAR:VAL(set environment variable) 设置环境变量\r\n		</p>\r\n		<p>\r\n			<strong><span>4.Apache rewrite例子集合</span></strong>\r\n		</p>\r\n		<p>\r\n			&nbsp;&nbsp;\r\n 在 httpd 中将一个域名转发到另一个域名虚拟主机世界近期更换了域名，新域名为 www.wbhw.com, \r\n更加简短好记。这时需要将原来的域名webhosting-world.com, 以及论坛所在地址 \r\nwebhosting-world.com/forums/定向到新的域名，以便用户可以找到，并且使原来的论坛 URL 继续有效而不出现 404 \r\n未找到，比如原来的http://www.webhosting-world.com/forums/-f60.html, \r\n让它在新的域名下继续有效，点击后转发到http://bbs.wbhw.com/-f60.html, 这就需要用 apache 的 \r\nMod_rewrite 功能来实现。\r\n		</p>\r\n		<p>\r\n			在中添加下面的重定向规则：\r\n		</p>\r\n		<p>\r\n			RewriteEngine On<br />\r\n# Redirect webhosting-world.com/forums to bbs.wbhw.com<br />\r\nRewriteCond %{REQUEST_URI} ^/forums/<br />\r\nRewriteRule /forums/(.*) http://bbs.wbhw.com/$1 [R=permanent,L]<br />\r\n# Redirect webhosting-world.com to wbhw.com<br />\r\nRewriteCond %{REQUEST_URI} !^/forums/<br />\r\nRewriteRule /(.*) http://www.wbhw.com/$1 [R=permanent,L]\r\n		</p>\r\n		<p>\r\n			添加了上面的规则以后， 里的全部内容如下：\r\n		</p>\r\n		<p>\r\n			ServerAlias webhosting-world.com<br />\r\nServerAdmin admin@webhosting-world.com<br />\r\nDocumentRoot /path/to/webhosting-world/root<br />\r\nServerName www.webhosting-world.com<br />\r\nRewriteEngine On<br />\r\n# Redirect webhosting-world.com/forums to bbs.wbhw.com<br />\r\nRewriteCond %{REQUEST_URI} ^/forums/<br />\r\nRewriteRule /forums/(.*) http://bbs.wbhw.com/$1 [R=permanent,L]<br />\r\n# Redirect webhosting-world.com to wbhw.com<br />\r\nRewriteCond %{REQUEST_URI} !^/forums/<br />\r\nRewriteRule /(.*) http://www.wbhw.com/$1 [R=permanent,L]\r\n		</p>\r\n		<p>\r\n			<strong>URL重定向</strong>\r\n		</p>\r\n		<p>\r\n			例子一:\r\n		</p>\r\n		<p>\r\n			1.http://www.zzz.com/xxx.php-&gt; http://www.zzz.com/xxx/<br />\r\n2.http://yyy.zzz.com-&gt; http://www.zzz.com/user.php?username=yyy 的功能<br />\r\nRewriteEngine On<br />\r\nRewriteCond %{HTTP_HOST} ^www.zzz.com<br />\r\nRewriteCond %{REQUEST_URI} !^user.php$<br />\r\nRewriteCond %{REQUEST_URI} .php$<br />\r\nRewriteRule (.*).php$ http://www.zzz.com/$1/ [R]<br />\r\nRewriteCond %{HTTP_HOST} !^www.zzz.com<br />\r\nRewriteRule ^(.+) %{HTTP_HOST} [C]<br />\r\nRewriteRule ^([^.]+).zzz.com http://www.zzz.com/user.php?username=$1\r\n		</p>\r\n		<p>\r\n			例子二：\r\n		</p>\r\n		<p>\r\n			/type.php?typeid=*&nbsp;&nbsp; –&gt; /type*.html<br />\r\n/type.php?typeid=*&amp;page=*&nbsp;&nbsp; –&gt; /type*page*.html<br />\r\nRewriteRule ^/type([0-9]+).html$ /type.php?typeid=$1 [PT]<br />\r\nRewriteRule ^/type([0-9]+)page([0-9]+).html$ /type.php?typeid=$1&amp;page=$2 [PT]\r\n		</p>\r\n		<p>\r\n			<strong><span>5.使用Apache的URL Rewrite配置多用户虚拟服务器</span></strong>\r\n		</p>\r\n		<p>\r\n			&nbsp;&nbsp; 要实现这个功能，首先要在DNS服务器上打开域名的泛域名解析（自己做或者找域名服务商做）。比如，我就把 *.semcase.com和 *.semcase.cn全部解析到了我的这台Linux Server上。\r\n		</p>\r\n		<p>\r\n			然后，看一下我的Apache中关于*.semcase.com的虚拟主机的设定。\r\n		</p>\r\n		<p>\r\n			#*.com,*.osall.net\r\n		</p>\r\n		<p>\r\n			ServerAdmin webmaster@semcase.com<br />\r\nDocumentRoot /home/www/www.semcase.com<br />\r\nServerName dns.semcase.com<br />\r\nServerAlias dns.semcase.com semcase.com semcase.net *.semcase.com *.semcase.net<br />\r\nCustomLog /var/log/httpd/osa/access_log.log” common<br />\r\n&nbsp;&nbsp;&nbsp; ErrorLog /var/log/httpd/osa/error_log.log”<br />\r\nAllowOverride None<br />\r\nOrder deny,allow<br />\r\n#AddDefaultCharset GB2312&nbsp;&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\nRewriteEngine on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\nRewriteCond %{HTTP_HOST}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^[^.]+.osall.(com|net)$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\nRewriteRule ^(.+)&nbsp;&nbsp;&nbsp;&nbsp; %{HTTP_HOST}$1&nbsp;&nbsp; [C]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\nRewriteRule ^([^.]+).osall.(com|net)(.*)$<br />\r\n/home/www/www.semcase.com/sylvan$3?un=$1&amp;%{QUERY_STRING} [L]<br />\r\n在这段设定中，我把*.semcase.net和*.semcase.com 的Document Root都设定到了 /home/www/www.semcase.com\r\n		</p>\r\n		<p>\r\n			但是，继续看下去，看到…配置了吗？在这里我就配置了URL Rewrite规则。<br />\r\nRewriteEngine on #打开URL Rewrite功能<br />\r\nRewriteCond %{HTTP_HOST} ^[^.]+.osall.(com|net)$ #匹配条件，如果用户输入的URL中主机名是类似 xxxx.semcase.com 或者 xxxx.semcase.cn 就执行下面一句<br />\r\nRewriteRule ^(.+) %{HTTP_HOST}$1 [C] #把用户输入完整的地址（GET方式的参数除外）作为参数传给下一个规则，[C]是Chain串联下一个规则的意思<br />\r\nRewriteRule ^([^.]+).osall.(com|net)(.*)$ /home/www/dev.semcase.com/sylvan$3?un=$1&amp;%{QUERY_STRING} [L]<br />\r\n# 最关键的是这一句，使用证则表达式解析用户输入的URL地址，把主机名中的用户名信息作为名为un的参数传给/home/www \r\n/dev.semcase.com目录下的脚本，并在后面跟上用户输入的GET方式的传入参数。并指明这是最后一条规则（[L]规则）。注意，在这一句中\r\n指明的重写后的地址用的是服务器上的绝对路径，这是内部跳转。如果使用http://xxxx这样的URL格式，则被称为外部跳转。使用外部跳转的话，浏\r\n 览着的浏览器中的URL地址会改变成新的地址，而使用内部跳转则浏览器中的地址不发生改变，看上去更像实际的二级域名虚拟服务器。\r\n		</p>\r\n		<p>\r\n			这样设置后，重启Apache服务器，测试一下，就大功告成了！\r\n		</p>\r\n	</div>\r\n</div>', '', '', '', '', '', '', '1', '1', '', '1', '2015-08-17 11:56:03');
INSERT INTO `yov_source` VALUES ('10051', 'linux下添加用户并赋予root权限 ', 'linux 添加用户 赋予 root 权限 ', '<p>\r\n	<p>\r\n		<span style=\"font-weight:bold;\">1、添加用户，首先用adduser命令添加一个普通用户，命令如下：</span> \r\n	</p>\r\n	<p>\r\n		#adduser tommy\r\n	</p>\r\n</p>', '<p>\r\n	<span style=\"font-weight:bold;\">1、添加用户，首先用adduser命令添加一个普通用户，命令如下：</span> \r\n</p>\r\n<p>\r\n	#adduser tommy\r\n</p>\r\n//添加一个名为tommy的用户<br />\r\n#passwd tommy&nbsp;&nbsp; //修改密码<br />\r\nChanging password for user tommy.<br />\r\nNew UNIX password:&nbsp;&nbsp;&nbsp;&nbsp; //在这里输入新密码<br />\r\nRetype new UNIX password:&nbsp; //再次输入新密码<br />\r\npasswd: all authentication tokens updated successfully.\r\n<p>\r\n	<span style=\"font-weight:bold;\">2、赋予root权限</span> \r\n</p>\r\n<p>\r\n	<span style=\"font-weight:bold;\">方法一：</span>修改 /etc/sudoers 文件，找到下面一行，把前面的注释（#）去掉\r\n</p>\r\n<p>\r\n	## Allows people in group wheel to run all commands<br />\r\n%wheel&nbsp;&nbsp; &nbsp;ALL=(ALL)&nbsp;&nbsp; &nbsp;ALL\r\n</p>\r\n<p>\r\n	然后修改用户，使其属于root组（wheel），命令如下：\r\n</p>\r\n<p>\r\n	#usermod -g root tommy\r\n</p>\r\n<p>\r\n	修改完毕，现在可以用tommy帐号登录，然后用命令 su – ，即可获得root权限进行操作。\r\n</p>\r\n<p>\r\n	<span style=\"color:#22B14C;\"><strong>方法二：</strong></span>修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行，如下所示：\r\n</p>\r\n<p>\r\n	## Allow root to run any commands anywhere<br />\r\nroot&nbsp;&nbsp; &nbsp;ALL=(ALL) &nbsp;&nbsp; &nbsp;ALL<br />\r\ntommy&nbsp;&nbsp; ALL=(ALL) &nbsp;&nbsp; &nbsp;ALL\r\n</p>\r\n<p>\r\n	修改完毕，现在可以用tommy帐号登录，然后用命令 sudo – ，即可获得root权限进行操作。\r\n</p>\r\n<p>\r\n	<span style=\"color:#FF7E00;\"><strong>方法三：</strong></span>修改 /etc/passwd 文件，找到如下行，把用户ID修改为 0 ，如下所示：<br />\r\ntommy:x:0:33:tommy:/data/webroot:/bin/bash\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<span style=\"color:#E53333;font-size:14px;\"><strong>一、Linux系统用户账号的管理</strong></span><br />\r\n<span style=\"font-size:14px;\">用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</span><br />\r\n<span style=\"font-size:14px;\">添加用户账号就是在系统中创建一个新账号,</span><br />\r\n<span style=\"font-size:14px;\">然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</span><br />\r\n<span style=\"font-size:14px;\">刚添加的账号是被锁定的，无法使用。</span><br />\r\n<br />\r\n<span style=\"color:#E53333;font-size:14px;\">1、添加新的用户账号使用useradd命令，</span><br />\r\n<span style=\"font-size:14px;\">添加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等.</span><br />\r\n<span style=\"font-size:14px;\">Linux提供了集成的系统管理工具userconf，它可以用来对用户账号进行统一管理。</span><br />\r\n<span style=\"background-color:#E53333;\"></span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">&nbsp; &nbsp; &nbsp;useradd 选项 用户名</span><br />\r\n<span style=\"font-size:14px;\">语义:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; -c comment &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;指定一段注释性描述。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; -d 目录 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; -g 用户组 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;指定用户所属的用户组。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; -G 用户组 用户组 &nbsp; 指定用户所属的附加组。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; -s Shell文件 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;指定用户的登录Shell。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; -u 用户号 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; 用户名 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;指定新用户的登录名。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例1:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ useradd –d /usr/sam -m sam</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">此命令创建了一个用户sam，</span><br />\r\n<span style=\"font-size:14px;\">其中-d和-m选项用来为登录名sam产生一个主目录/usr/sam(/usr为默认的用户主目录所在的父目录)。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例2：</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ useradd &nbsp;-s /bin/sh &nbsp; &nbsp;-g group &nbsp; &nbsp;-G adm,root &nbsp; &nbsp;gem</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">此命令新建了一个用户gem, 该用户的登录Shell是/bin/sh（有时要用/bin/bash),</span><br />\r\n<span style=\"font-size:14px;\">它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">新建用户组可用命令:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupadd group</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupadd adm </span><br />\r\n<br />\r\n<span style=\"font-size:14px;\"><strong>2、删除帐号</strong></span><br />\r\n<span style=\"font-size:14px;\">如果一个用户的账号不再使用，可以从系统中删除。</span><br />\r\n<span style=\"font-size:14px;\">删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">&nbsp; &nbsp; &nbsp;userdel 选项 用户名</span><br />\r\n<span style=\"font-size:14px;\">选项:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-r, &nbsp;把用户的主目录一起删除。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例1:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ userdel -r sam</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">此命令删除用户sam在系统文件中(主要是/etc/passwd, /etc/shadow, /etc/group等)的记录,</span><br />\r\n<span style=\"font-size:14px;\">同时删除用户的主目录。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\"><strong>3、修改帐号</strong></span><br />\r\n<span style=\"font-size:14px;\">修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</span><br />\r\n<span style=\"font-size:14px;\">修改已有用户的信息使用usermod命令.</span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">&nbsp; &nbsp; &nbsp;usermod 选项 用户名</span><br />\r\n<span style=\"font-size:14px;\">选项:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; 包括-c, -d, -m, -g, -G, -s, -u以及-o等,</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; 这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</span><br />\r\n<span style=\"font-size:14px;\">另外，有些系统可以使用如下选项：</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; -l 新用户名 &nbsp;指定一个新的账号，即将原来的用户名改为新的用户名。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例如:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ usermod -s /bin/ksh &nbsp; &nbsp;-d /home/z &nbsp; &nbsp;-g developer &nbsp; &nbsp;sam</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">此命令将用户sam的:</span><br />\r\n<span style=\"font-size:14px;\">登录Shell修改为ksh,</span><br />\r\n<span style=\"font-size:14px;\">主目录改为/home/z,&nbsp;</span><br />\r\n<span style=\"font-size:14px;\">用户组改为developer.</span> \r\n</p>\r\n<p style=\"font-family:verdana,Arial,Helvetica,sans-serif;font-size:14px;\">\r\n	4、给已有的用户增加工作组<br />\r\n<span style=\"color:#E53333;\">usermod -G groupname username</span> \r\n</p>\r\n<p style=\"font-family:verdana,Arial,Helvetica,sans-serif;font-size:14px;\">\r\n	或者：gpasswd -a user group\r\n</p>\r\n<span style=\"font-size:14px;\"><strong>5、用户口令的管理</strong></span><br />\r\n<span style=\"font-size:14px;\">用户管理的一项重要内容是用户口令的管理。</span><br />\r\n<span style=\"font-size:14px;\">用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</span><br />\r\n<span style=\"font-size:14px;\">指定和修改用户口令的Shell命令是passwd。</span><br />\r\n<span style=\"font-size:14px;\">超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">&nbsp; &nbsp; &nbsp;passwd 选项 用户名</span><br />\r\n<span style=\"font-size:14px;\">选项:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-l &nbsp; &nbsp; 锁定口令，即禁用账号。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-u &nbsp; &nbsp; 口令解锁。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-d &nbsp; &nbsp; 使账号无口令。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-f &nbsp; &nbsp; 强迫用户下次登录时修改口令。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; 如果默认用户名，则修改当前用户的口令。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例如:</span><br />\r\n<span style=\"font-size:14px;\">假设当前用户是sam,</span><br />\r\n<span style=\"font-size:14px;\">则下面的命令修改该用户自己的口令:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ passwd</span><br />\r\n<span style=\"font-size:14px;\">Old password:******</span><br />\r\n<span style=\"font-size:14px;\">New password:*******</span><br />\r\n<p>\r\n	<span style=\"font-size:14px;\">Re-enter new password:*******</span> \r\n</p>\r\n<p>\r\n	<span style=\"font-size:14px;\"><br />\r\n</span> \r\n</p>\r\n<span style=\"font-size:14px;\">如果是超级用户，</span><br />\r\n<span style=\"font-size:14px;\">可以用下列形式指定任何用户的口令：</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$passwd sam</span><br />\r\n<span style=\"font-size:14px;\">New password:*******</span><br />\r\n<span style=\"font-size:14px;\">Re-enter new password:*******</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">普通用户修改自己的口令时，</span><br />\r\n<span style=\"font-size:14px;\">passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，</span><br />\r\n<span style=\"font-size:14px;\">如果两次输入的口令一致，则将这个口令指定给用户；</span><br />\r\n<span style=\"font-size:14px;\">而超级用户为用户指定口令时，就不需要知道原口令。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">为了系统安全起见，用户应该选择比较复杂的口令，</span><br />\r\n<span style=\"font-size:14px;\">例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例如1:</span><br />\r\n<span style=\"font-size:14px;\">为用户指定空口令时，执行下列形式的命令：</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$passwd -d sam</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; 此命令将用户sam的口令删除，这样用户sam下一次登录时，系统就不再询问口令。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">passwd命令还可以用-l(lock)选项锁定某一用户，使其不能登录，例如：</span><br />\r\n<span style=\"font-size:14px;\">例如2:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ passwd -l sam</span><br />\r\n<br />\r\n<span style=\"color:#E53333;font-size:14px;\"><strong>二、Linux系统用户组的管理</strong></span><br />\r\n<span style=\"font-size:14px;\">每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。</span><br />\r\n<span style=\"font-size:14px;\">不同Linux 系统对用户组的规定有所不同，</span><br />\r\n<span style=\"font-size:14px;\">如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</span><br />\r\n<span style=\"font-size:14px;\">用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\"><strong>1、增加一个新的用户组使用groupadd命令。</strong></span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">&nbsp; &nbsp; &nbsp;groupadd 选项 用户组</span><br />\r\n<span style=\"font-size:14px;\">选项:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-g GID &nbsp; 指定新用户组的组标识号（GID）。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; &nbsp;-o &nbsp; &nbsp; &nbsp; 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</span><br />\r\n<br />\r\n<span style=\"color:#E53333;font-size:14px;\">例1:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupadd group1</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; 此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例2:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupadd -g 101 group2</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; 此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\"><strong>2、如果要删除一个已有的用户组，使用groupdel命令.</strong></span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">&nbsp; &nbsp; groupdel 用户组</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例1:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupdel group1</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; 此命令从系统中删除组group1。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\"><strong>3.修改用户组的属性使用groupmod命令。</strong></span><br />\r\n<span style=\"font-size:14px;\">语法:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; groupmod 选项 用户组</span><br />\r\n<span style=\"font-size:14px;\">选项:</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; -g GID &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 为用户组指定新的组标识号。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; -o &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</span><br />\r\n<span style=\"font-size:14px;\">&nbsp; &nbsp; -n &nbsp;新用户组 &nbsp; &nbsp; 将用户组的名字改为新名字</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例1:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupmod -g 102 group2</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">此命令将组group2的组标识号修改为102。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例2:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ groupmod –g 10000 -n group3 group2</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">此命令将组group2的标识号改为10000，组名修改为group3。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\"><strong>4.如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</strong></span><br />\r\n<span style=\"font-size:14px;\">用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。</span><br />\r\n<br />\r\n<span style=\"font-size:14px;\">例如:</span><br />\r\n<span style=\"color:#E53333;font-size:14px;\">$ newgrp root</span><br />\r\n<span style=\"font-size:14px;\">释义:</span><br />\r\n<span style=\"font-size:14px;\">这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</span><br />\r\n<span style=\"font-size:14px;\">类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</span><br />\r\n<p>\r\n	http://www.libaqiang.com/?p=33001\r\n</p>\r\nhttp://blog.chinaunix.net/uid-26000296-id-3496103.html', 'index.html', '', '', '', '', '', '1', '1', 'http://blog.csdn.net/stormbjm/article/details/9086163', '1', '2015-09-15 16:42:46');
INSERT INTO `yov_source` VALUES ('10052', 'Linux修改SSH端口和禁止Root远程登陆', 'Linux 修改 SSH 端口 禁止 Root 远程登陆', '<p>\r\n	Linux修改ssh端口22\r\n</p>\r\n<p>\r\n	vi /etc/ssh/ssh_config\r\n</p>\r\n<p>\r\n	vi /etc/ssh/sshd_config\r\n</p>\r\n<br />', '<p>\r\n	Linux修改ssh端口22\r\n</p>\r\n<p>\r\n	vi /etc/ssh/ssh_config\r\n</p>\r\n<p>\r\n	vi /etc/ssh/sshd_config&nbsp;\r\n</p>\r\n<p>\r\n	然后修改为port 8888\r\n</p>\r\n<p>\r\n	以root身份service sshd restart (redhat as3)\r\n</p>\r\n<p>\r\n	使用putty,端口8888&nbsp;\r\n</p>\r\n<p>\r\n	Linux下SSH默认的端口是22,为了安全考虑，现修改SSH的端口为1433,修改<a class=\"UBBWordLink\" target=\"_blank\" href=\"http://www.jb51.net\">方法</a>如下 ：\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	/usr/sbin/sshd -p 1433\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	为增强安全\r\n</p>\r\n<p>\r\n	先增加一个普通权限的用户：\r\n</p>\r\n<p>\r\n	#useradd uploader\r\n</p>\r\n<p>\r\n	#passwd uploader\r\n</p>\r\n<p>\r\n	//设置密码\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	生产机器禁止ROOT远程SSH登录：\r\n</p>\r\n<p>\r\n	#vi /etc/ssh/sshd_config\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	把\r\n</p>\r\n<p>\r\n	PermitRootLogin yes\r\n</p>\r\n<p>\r\n	改为\r\n</p>\r\n<p>\r\n	PermitRootLogin no\r\n</p>\r\n<p>\r\n	重启sshd服务\r\n</p>\r\n<p>\r\n	#service sshd restart\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	远程管理用普通用户uploader登录，然后用 su root 切换到root用户拿到最高权限\r\n</p>\r\n<br />', '', '', '', '', '', '', '1', '12', 'http://www.jb51.net/os/RedHat/1068.html', '1', '2015-09-15 17:18:34');
INSERT INTO `yov_source` VALUES ('10053', 'Redis的部署使用文档', 'Redis 部署', '简述：　　redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、\r\nlist(链表)、set(集合)和zset(有序集合)。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操\r\n作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的\r\n是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。', '<p>\r\n	环境：CentOS 5.5&nbsp; x64\r\n</p>\r\n<p>\r\n	下载安装：\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-bsh\">cd /root/tools \r\nwget http://redis.googlecode.com/files/redis-2.4.2.tar.gz \r\ntar zxvf redis-2.4.2.tar.gz \r\ncd redis-2.4.2 \r\nmake &amp;&amp; make install \r\ncp redis.conf  /etc/ \r\ncd  </pre>\r\n<p>\r\n	vi /etc/redis.conf\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-js\">daemonize yes \r\npidfile /var/run/redis.pid \r\nport 6379 \r\n\r\n#bind 127.0.0.1 \r\ntimeout 600 \r\nloglevel notice \r\nlogfile /elain/logs/redis/redis.log \r\n\r\ndatabases 16 \r\n\r\nsave 900 1 \r\nsave 300 10 \r\nsave 60 10000 \r\n\r\nrdbcompression yes \r\ndbfilename dump.rdb \r\n\r\ndir /elain/data/redis/ \r\n\r\n# maxclients 128 \r\n\r\nappendonly yes \r\nappendfilename appendonly.aof \r\n\r\n# appendfsync always \r\nappendfsync everysec \r\n# appendfsync no \r\n\r\nrequirepass elain \r\n\r\nno-appendfsync-on-rewrite no \r\nauto-aof-rewrite-percentage 100 \r\nauto-aof-rewrite-min-size 64mb \r\n\r\nslowlog-log-slower-than 10000 \r\n\r\nslowlog-max-len 1024 \r\n\r\nreally-use-vm yes \r\nvm-enabled yes \r\nvm-swap-file /tmp/redis.swap \r\nvm-max-memory 0 \r\nvm-page-size 32 \r\nvm-pages 134217728 \r\nvm-max-threads 4 \r\n\r\nhash-max-zipmap-entries 512 \r\nhash-max-zipmap-value 64 \r\n\r\nlist-max-ziplist-entries 512 \r\nlist-max-ziplist-value 64 \r\n\r\nset-max-intset-entries 512 \r\n\r\nzset-max-ziplist-entries 128 \r\nzset-max-ziplist-value 64 \r\n\r\nactiverehashing yes \r\n\r\n# include /path/to/local.conf \r\n# include /path/to/other.conf </pre>\r\n<p>\r\n	启动：redis-server /etc/redis.conf\r\n</p>\r\n<p>\r\n	开机加自启动：echo \"redis-server /etc/redis.conf\" &gt;&gt;/etc/rc.local&nbsp; <br />\r\n测试：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-bsh\">[root@md03 ~]# redis-cli -a elain \r\nredis 127.0.0.1:6379&gt; set elain 123456 \r\nOK \r\nredis 127.0.0.1:6379&gt; get elain \r\n\"123456\" </pre>\r\n查看状态信息：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint\">[root@md04 ~]# redis-cli info \r\nredis_version:2.4.2 \r\nredis_git_sha1:00000000 \r\nredis_git_dirty:0 \r\narch_bits:64 \r\nmultiplexing_api:epoll \r\nprocess_id:2204 \r\nuptime_in_seconds:25 \r\nuptime_in_days:0 \r\nlru_clock:2013834 \r\nused_cpu_sys:0.00 \r\nused_cpu_user:0.00 \r\nused_cpu_sys_children:0.00 \r\nused_cpu_user_children:0.00 \r\nconnected_clients:1 \r\nconnected_slaves:0 \r\nclient_longest_output_list:0 \r\nclient_biggest_input_buf:0 \r\nblocked_clients:0 \r\nused_memory:17505392 \r\nused_memory_human:16.69M \r\nused_memory_rss:1617920 \r\nused_memory_peak:17496792 \r\nused_memory_peak_human:16.69M \r\nmem_fragmentation_ratio:0.09 \r\nmem_allocator:jemalloc-2.2.1 \r\nloading:0 \r\naof_enabled:1 \r\nchanges_since_last_save:5 \r\nbgsave_in_progress:0 \r\nlast_save_time:1320372561 \r\nbgrewriteaof_in_progress:0 \r\ntotal_connections_received:1 \r\ntotal_commands_processed:0 \r\nexpired_keys:0 \r\nevicted_keys:0 \r\nkeyspace_hits:2 \r\nkeyspace_misses:8 \r\npubsub_channels:0 \r\npubsub_patterns:0 \r\nlatest_fork_usec:0 \r\nvm_enabled:1 \r\nrole:master \r\naof_current_size:237 \r\naof_base_size:237 \r\naof_pending_rewrite:0 \r\nvm_conf_max_memory:0 \r\nvm_conf_page_size:32 \r\nvm_conf_pages:134217728 \r\nvm_stats_used_pages:3 \r\nvm_stats_swapped_objects:3 \r\nvm_stats_swappin_count:0 \r\nvm_stats_swappout_count:3 \r\nvm_stats_io_newjobs_len:0 \r\nvm_stats_io_processing_len:0 \r\nvm_stats_io_processed_len:0 \r\nvm_stats_io_active_threads:0 \r\nvm_stats_blocked_clients:0 \r\ndb0:keys=4,expires=0 </pre>\r\n主从同步配置：<br />\r\n只需把/etc/redis.conf 复制到 从机上,主、从机上把127.0.0.1 IP 改成本机ip，然后在从机上的redis.conf 里添加以下几行，重启即可：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-bsh\">slave-serve-stale-data yes \r\nslaveof 主服务器IP 6379 \r\nmasterauth &lt;master-password&gt; </pre>\r\n注：以上主从配置做了密码验证，也可不做验证，不用加masterauth 选项<br />\r\n<br />\r\n附上启动脚本：<br />\r\n脚本用法：\r\n</p>\r\n<p>\r\n	/etc/init.d/redis-server start|restart|stop <br />\r\n<pre class=\"prettyprint lang-bsh\">#!/bin/sh   \r\n#   \r\n# redis - this script starts and stops the redis-server daemon   \r\n#   \r\n# chkconfig:   - 85 15   \r\n# description:  Redis is a persistent key-value database   \r\n# processname: redis-server   \r\n# config:      /etc/redis.conf   \r\n# config:      /etc/sysconfig/redis   \r\n# pidfile:     /var/run/redis.pid   \r\n  \r\n# Source function library.   \r\n. /etc/rc.d/init.d/functions   \r\n  \r\n# Source networking configuration.   \r\n. /etc/sysconfig/network   \r\n  \r\n# Check that networking is up.   \r\n[ \"$NETWORKING\" = \"no\" ] &amp;&amp; exit 0   \r\n  \r\nredis=\"/usr/local/bin/redis-server\"   \r\nprog=$(basename $redis)   \r\n  \r\nREDIS_CONF_FILE=\"/etc/redis.conf\"   \r\n  \r\n[ -f /etc/sysconfig/redis ] &amp;&amp; . /etc/sysconfig/redis   \r\n  \r\nlockfile=/var/lock/subsys/redis   \r\n  \r\nstart() {   \r\n    [ -x $redis ] || exit 5   \r\n    [ -f $REDIS_CONF_FILE ] || exit 6   \r\n    echo -n $\"Starting $prog: \"   \r\n    daemon $redis $REDIS_CONF_FILE   \r\n    retval=$?   \r\n    echo   \r\n    [ $retval -eq 0 ] &amp;&amp; touch $lockfile   \r\n    return $retval   \r\n}   \r\n  \r\nstop() {   \r\n    echo -n $\"Stopping $prog: \"   \r\n    killproc $prog -QUIT   \r\n    retval=$?   \r\n    echo   \r\n    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile   \r\n    return $retval   \r\n}   \r\n  \r\nrestart() {   \r\n    stop   \r\n    start   \r\n}   \r\n  \r\nreload() {   \r\n    echo -n $\"Reloading $prog: \"   \r\n    killproc $redis -HUP   \r\n    RETVAL=$?   \r\n    echo   \r\n}   \r\n  \r\nforce_reload() {   \r\n    restart   \r\n}   \r\n  \r\nrh_status() {   \r\n    status $prog   \r\n}   \r\n  \r\nrh_status_q() {   \r\n    rh_status &gt;/dev/null 2&gt;&amp;1   \r\n}   \r\n  \r\ncase \"$1\" in   \r\n    start)   \r\n        rh_status_q &amp;&amp; exit 0   \r\n        $1   \r\n        ;;   \r\n    stop)   \r\n        rh_status_q || exit 0   \r\n        $1   \r\n        ;;   \r\n    restart|configtest)   \r\n        $1   \r\n        ;;   \r\n    reload)   \r\n        rh_status_q || exit 7   \r\n        $1   \r\n        ;;   \r\n    force-reload)   \r\n        force_reload   \r\n        ;;   \r\n    status)   \r\n        rh_status   \r\n        ;;   \r\n    condrestart|try-restart)   \r\n        rh_status_q || exit 0   \r\n        ;;   \r\n    *)   \r\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}\"   \r\n        exit 2   \r\nesac </pre>\r\nredis官方文档：http://redis.io/documentation<br />\r\nredis官方操作命令全集：http://redis.io/commands<br />\r\nreids 各接口使用方法请参考官方文档\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	附录：<br />\r\n配置文件 redis.conf 详解<br />\r\n<br />\r\ndaemonize&nbsp; yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #是否以后台进程运行，默认为no<br />\r\npidfile&nbsp; /var/run/redis.pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #如以后台进程运行，则需指定一个pid，默认为/var/run/redis.pid<br />\r\nbind 127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #绑定主机IP，默认值为127.0.0.1（注释）<br />\r\nport&nbsp;&nbsp; 6379&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #监听端口，默认为6379<br />\r\ntimeout&nbsp; 300&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #超时时间，默认为300（秒）<br />\r\nloglevel&nbsp; notice&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n#日志记slave-serve-stale-data \r\nyes：在master服务器挂掉或者同步失败时，从服务器是否继续提供服务。录等级，有4个可选值，debug，verbose（默认\r\n值），notice，warning<br />\r\nlogfile&nbsp;&nbsp; /var/log/redis.log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #日志记录方式，默认值为stdout<br />\r\ndatabases&nbsp; 16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #可用数据库数，默认值为16，默认数据库为0<br />\r\nsave 900 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #900秒（15分钟）内至少有1个key被改变<br />\r\nsave 300 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #300秒（5分钟）内至少有300个key被改变<br />\r\nsave 60 10000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #60秒内至少有10000个key被改变<br />\r\nrdbcompression yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #存储至本地数据库时是否压缩数据，默认为yes<br />\r\ndbfilename dump.rdb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #本地数据库文件名，默认值为dump.rdb<br />\r\ndir ./&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #本地数据库存放路径，默认值为 ./<br />\r\n<br />\r\nslaveof 10.0.0.12 6379&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #当本机为从服务时，设置主服务的IP及端口（注释）<br />\r\nmasterauth elain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #当本机为从服务时，设置主服务的连接密码（注释）<br />\r\nslave-serve-stale-data yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #在master服务器挂掉或者同步失败时，从服务器是否继续提供服务。<br />\r\nrequirepass elain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #连接密码（注释）<br />\r\n<br />\r\nmaxclients 128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #最大客户端连接数，默认不限制（注释）<br />\r\nmaxmemory &lt;bytes&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n#设置最大内存，达到最大内存设置后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理后，任到达最大内存设置，将无法再进行写入操作。\r\n（注释）<br />\r\nappendonly no&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n#是否在每次更新操作后进行日志记录，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据文件是按上面save条件来同步\r\n的，所以有的数据会在一段时间内只存在于内存中。默认值为no<br />\r\nappendfilename&nbsp;&nbsp; appendonly.aof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #更新日志文件名，默认值为appendonly.aof（注释）<br />\r\nappendfsync&nbsp; everysec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n#更新日志条件，共有3个可选值。no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁\r\n盘，everysec表示每秒同步一次（默认值）。<br />\r\n<br />\r\nreally-use-vm yes<br />\r\nvm-enabled&nbsp; yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #是否使用虚拟内存，默认值为no<br />\r\nvm-swap-file /tmp/redis.swap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br />\r\nvm-max-memory 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #vm大小限制。0：不限制，建议60-80% 可用内存大小。<br />\r\nvm-page-size 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #根据缓存内容大小调整，默认32字节。<br />\r\nvm-pages 134217728&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #page数。每 8 page，会占用1字节内存。<br />\r\nvm-page-size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #vm-pages 等于 swap 文件大小<br />\r\nvm-max-threads 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #vm 最大io线程数。注意： 0 标志禁止使用vm <br />\r\nhash-max-zipmap-entries 512<br />\r\nhash-max-zipmap-value 64<br />\r\n<br />\r\nlist-max-ziplist-entries 512<br />\r\nlist-max-ziplist-value 64<br />\r\nset-max-intset-entries 512<br />\r\nactiverehashing yes\r\n</p>', '', '', '', '', '', '', '1', '12', 'http://elain.blog.51cto.com/3339379/705846', '1', '2015-10-15 15:03:51');

-- ----------------------------
-- Table structure for yov_source_type
-- ----------------------------
DROP TABLE IF EXISTS `yov_source_type`;
CREATE TABLE `yov_source_type` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `active` tinyint(1) DEFAULT '1',
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_source_type
-- ----------------------------
INSERT INTO `yov_source_type` VALUES ('1', 'CSS/CSS3', 'CSS and CSS3', '1', '2014-12-08 23:08:10');
INSERT INTO `yov_source_type` VALUES ('2', 'JS/jQuery', ' ', '1', '2014-12-08 23:54:29');
INSERT INTO `yov_source_type` VALUES ('3', 'HTML/HTML5', ' ', '1', '2014-12-08 23:54:45');
INSERT INTO `yov_source_type` VALUES ('4', 'PHP', ' ', '1', '2014-12-08 23:55:00');
INSERT INTO `yov_source_type` VALUES ('5', 'MYSQL', ' ', '1', '2014-12-08 23:55:07');
INSERT INTO `yov_source_type` VALUES ('6', 'C/C++', ' ', '1', '2014-12-09 16:42:14');
INSERT INTO `yov_source_type` VALUES ('7', 'JAVA', ' ', '1', '2014-12-09 16:42:24');
INSERT INTO `yov_source_type` VALUES ('8', 'IOS', ' ', '1', '2014-12-09 16:42:35');
INSERT INTO `yov_source_type` VALUES ('9', 'Android', ' ', '1', '2014-12-09 16:43:19');
INSERT INTO `yov_source_type` VALUES ('10', 'IT Management', 'Document of IT management', '1', '2015-01-08 16:24:12');
INSERT INTO `yov_source_type` VALUES ('11', 'Web Structure', 'Web Structure', '1', '2015-01-09 10:08:18');
INSERT INTO `yov_source_type` VALUES ('12', 'Linux', ' ', '1', '2015-03-02 13:08:28');

-- ----------------------------
-- Table structure for yov_user
-- ----------------------------
DROP TABLE IF EXISTS `yov_user`;
CREATE TABLE `yov_user` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `username` varchar(200) DEFAULT NULL,
  `password` varchar(200) DEFAULT NULL,
  `code` varchar(6) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `vorname` varchar(200) DEFAULT NULL,
  `id_group` int(12) DEFAULT NULL,
  `active` tinyint(1) DEFAULT '1',
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_user
-- ----------------------------
INSERT INTO `yov_user` VALUES ('1', 'akiler', 'fd854f88f44ee9900deef74ac0b562bd', '70d0c2', null, null, null, '1', '2014-10-24 10:53:30');

-- ----------------------------
-- Table structure for yov_user_group
-- ----------------------------
DROP TABLE IF EXISTS `yov_user_group`;
CREATE TABLE `yov_user_group` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `permission` varchar(1000) DEFAULT NULL,
  `active` tinyint(1) DEFAULT '1',
  `time_add` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of yov_user_group
-- ----------------------------
